#+OPTIONS: auto-id:t
#+STARTUP: overview
<2020-09-27 Sun 22:38> Installed new stable emacs 27.1-1 from [[https://emacsformacosx.com/][emacs for mac osx]]

* Configuration 
:PROPERTIES:
:CUSTOM_ID: h:12952E6C-F302-4796-8131-E5078D363A81
:END:

This is me moving my configuration to an org file as many people have suggested, including Sacha Chua and then Brett Witty who I am more directly copying (from [[https://github.com/BrettWitty/dotemacs/blob/master/bew_config.org][here]])

I started this on 2020-05-26, and at first I will just lump my whole current init.el file on here as a code block, then I will start breaking it up and organizing it.

And now of course (<2020-07-20 Mon>) I'm mining heavily from Protesilaos Stavrou ([[https://gitlab.com/protesilaos/dotfiles/-/blob/master/emacs/.emacs.d/emacs-init.org][his init]]), because he has lots of the same aesthetic notions I do and his literate .emacs is pretty great.  I owe the focused editing module to him.
* Base settings
** load paths
Adding the load path for the packages I install manually - having them in .emacs.d will make them more portable
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/packages/")
;; set PATH
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
#+end_src
** system $PATH - in macos, often does not load correctly into emacs
- this starts the package [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] in any GUI frame
#+begin_src emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+end_src
** Disable GUI components
I still keep the menu - sometimes there are things there that I forget.  But this takes the tool bar and scroll bar out, as well as skipping the splash screen.
#+begin_src emacs-lisp
(use-package emacs
  :init
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  :config
  (setq use-file-dialog nil)
  (setq use-dialog-box t)
  (setq use-dialog-box t)
  (setq inhibit-splash-screen t)
  (setq ring-bell-function 'ignore)
  :bind (("C-z" . nil)
	 ("C-x C-z" . nil)
	 ("C-h h" . nil)))
		  
#+end_src

** Always rebuild init and refresh package cache
Because =config.org= --> ~config.el~, it helps avoid some problems if the derived file is deleted so that old elements don't creep in somehow.  A good place to do this (Prot's idea, as usual) is to do this at the =kill-emacs-hook= so that the rebuilding time happens at that time instead of at startup.

#+begin_src emacs-lisp
(use-package emacs
  :config
  (defun prot/rebuild-emacs-init ()
    "Produce Elisp init from my Org dotemacs.
Add this to `kill-emacs-hook', to use the newest file in the next
session.  The idea is to reduce startup time, though just by
rolling it over to the end of a session rather than the beginning
of it."
    (let ((init-el "~/.emacs.d/config.el")
          (init-org "~/.emacs.d/config.org"))
          (when init-el
        (delete-file init-el))
      (org-babel-tangle-file init-org init-el)))
  :hook ((kill-emacs-hook . prot/rebuild-emacs-init)
         (kill-emacs-hook . package-quickstart-refresh)))
#+end_src
** Remove modeline lighters
This enables the removal of the text that indicates active modes on the mode line.  This below simply enables the package "diminish" that allows us to use the ":diminish" keyword.
#+begin_src emacs-lisp
(use-package diminish
  :ensure
  :after use-package)
#+end_src
** Funnel all CUSTOMIZE to a single file
I am trying to use the CUSTOMIZE option less, as I lose track of things that I have changed there and then they end up in init.el and other places.  But this following will at least (hopefully) put /all/ the CUSTOMIZE changes into a single file rather than potentially being scattered around and more confusing.
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/.emacs-custom.el")
(load custom-file)
#+end_src
** This puts all the #BACKUP FILES# out of the way and limits them slightly

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old versions to keep
  )
#+END_SRC
** default browser to open links
Current setting is to open the default macos browser, whatever it may be (set in Macos =System Preferences=)
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-default-browser)
#+end_src
* Personal Details
:PROPERTIES:
:CUSTOM_ID: h:4D9016D1-13E8-493A-BCD7-7EC445B84B71
:END:

#+begin_src emacs-lisp
  (setq user-full-name "Nick Taintor"
	user-mail-address "nick.taintor@gmail.com"
	calendar-latitude 38.820600
	calendar-longitude -77.318260
	calendar-location-name "Farirfax, VA")

  (use-package solar
    :load-path "packages/solar"
    :config
    (setq calendar-latitude 38.820600
	  calendar-longitude -77.318260))

    ;; global custom key settings
    (global-set-key (kbd "M-o") 'other-window)
#+end_src

* Org mode
Trying to put all the org stuff in one place, under a =use-package= wrapper.  Otherwise all the little bits and pieces of Org Mode float around my configuration.  And the result has not been great - some things load, some don't, and I feel like it would be better to integrate them all under one umbrella.  Maybe then I will spend less time messing around with my config ha ha ha.

#+begin_src emacs-lisp
(use-package org
  :config
  (setq org-directory "~/org")
  (setq org-default-notes-file "~/org/notes.org")   ;; TODO get rid of other notes pointer
  (setq org-agenda-files
	'("~/org"
	  "~/.emacs.d"))
  ;;refile, todo
  (setq org-refile-targets
	'((org-agenda-files . (:maxlevel . 2))
	  (nil . (:maxlevel . 2))))
  (setq org-refile-use-outline-path t)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-use-cache t)
  (setq org-reverse-note-order nil)
  (setq org-todo-keywords
        '((sequence "TODO(t)" "|" "DONE(D)" "CANCEL(C)")
          (sequence "MEET(m)" "|" "MET(M)")
          (sequence "STUDY(s)" "|" "STUDIED(S)")))
  ;; (setq org-todo-keyword-faces               ;; TODO figure out todo-keywords
  ;;       '(("MEET" . (:inherit font-lock-type-face))
  ;;         ("STUDY" . (:inherit font-lock-constant-face))))
  (setq org-fontify-done-headline nil)
  (setq org-fontify-quote-and-verse-blocks t)
  (setq org-fontify-whole-heading-line nil)
  (setq org-fontify-whole-block-delimiter-line t)
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-pretty-entities t)
  ;; tags
  (setq org-tag-alist        ; TODO figure out tags!
	'(("psych")
	  ("frankie")))
  ;; code blocks                      
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-fontify-natively t)
  (setq org-src-preserve-indentation t)
  ;; general
  (setq delete-selection-mode t)
  (setq org-adapt-indentation nil)
  (setq org-special-ctrl-a/e nil)
  (setq org-special-ctrl-k nil)
  (setq org-hide-emphasis-markers t)
  (setq org-hide-leading-stars t)
  (setq org-startup-indented t)    ; enables =org-indent-mode=
  (setq org-superstar-mode t)
  (setq org-descriptive-links t)   ; this is the variable used by org-toggle-link-display
  (setq org-structure-template-alist     ; Changed in Org 9.3, emacs 27.1, now activated by C-c C-,
	  '(("s" . "src")
          ("E" . "src emacs-lisp")
          ("e" . "example")
          ("q" . "quote")
          ("v" . "verse")
          ("V" . "verbatim")
          ("c" . "center")
          ("C" . "comment")))
  (setq org-return-follows-link nil))    ; Gets me into trouble otherwise	
#+end_src
- For =org-hide-emphasis-markers= - note this [[https://www.reddit.com/r/orgmode/comments/gss1g4/update_i_made_my_own_sbrorgemphasizemode_that/][Reddit post]] that looks to change the way this works so that you can edit these things better when the point is on them.

* Org customization
:PROPERTIES:
:CUSTOM_ID: h:21CF83D2-02A3-48A9-8539-E957F50B6508
:END:
** Org source code block
Editing source code blocks via =C-c '= when in a block of code with a language assigned to it

#+begin_src emacs-lisp
(use-package org-src
  :load-path "packages/org-src"
  :after org
  :config
  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-src-tab-acts-natively t)
  (setq org-edit-src-content-indentation 0))
#+end_src

This will add nicer-looking bullets:
note: good old =org-bullets= has been superseded by [[https://github.com/integral-dw/org-superstar-mode][org-superstar!]]
#+begin_src emacs-lisp
(use-package org-superstar
  :ensure
  :after org
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (setq org-superstar-remove-leading-stars t))
#+END_SRC

Setting things up for annotated bibliography
<2020-08-12 Wed> Have never used this, so turning off for now

# #+BEGIN_SRC emacs-lisp
# (setq org-latex-pdf-process
#       '("pdflatex -interaction nonstopmode -output-directory %o %f"
# 	"bibtex %b"
# 	"pdflatex -interaction nonstopmode -output-directory %o %f"
# 	"pdflatex -interaction nonstopmode -output-directory %o %f"))

# (setq bibtex-autokey-year-length 4
#       bibtex-autokey-name-year-separator "-"
#       bibtex-autokey-year-title-separator "-"
#       bibtex-autokey-titleword-separator "-"
#       bibtex-autokey-titlewords 2
#       bibtex-autokey-titlewords-stretch 1
#       bibtex-autokey-titleword-length 5)

# (require 'dash)
# (setq org-latex-default-packages-alist
#       (-remove-item
#        '("" "hyperref" nil)
#        org-latex-default-packages-alist))

# ;; Append new packages
# (add-to-list 'org-latex-default-packages-alist '("" "natbib" "") t)
# (add-to-list 'org-latex-default-packages-alist
# 	     '("linktocpage,pdfstartview=FitH,colorlinks,
# linkcolor=blue,anchorcolor=blue,
# citecolor=blue,filecolor=blue,menucolor=blue,urlcolor=blue"
# 	       "hyperref" nil)
# 	     t)

# (setq reftex-default-bibliography '("~/googleDrive/bibliography/references.bib"))

# ;; see org-ref for use of these variables
# (setq org-ref-bibliography-notes "~/googleDrive/bibliography/notes.org"
#       org-ref-default-bibliography '("~/googleDrive/bibliography/references.bib")
#       org-ref-pdf-directory "~/googleDrive/Zotero")

# (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")


# (setq ispell-program-name "/usr/local/bin/aspell")
# #+end_src

** Setting default notes file
:PROPERTIES:
:CUSTOM_ID: h:824C588E-B074-4613-A4B0-EDCA6CA4F044
:END:
#+begin_src emacs-lisp
(setq org-default-notes-file "~/org/notes.org")
#+end_src

** org-capture
:PROPERTIES:
:CUSTOM_ID: h:F68B25C3-E54A-4A1A-BC2A-B284C2ED9D77
:END:
#+begin_src emacs-lisp
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src

** todo
:PROPERTIES:
:CUSTOM_ID: h:9771176B-92B9-48F4-87B2-C6C0FBFC5B5B
:END:
Setting TODO keywords
- symbol meanings: ! = timestamp, @ = note with timestamp
#+begin_src emacs-lisp

(setq org-todo-keywords
      '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))

#+end_src

* Consistent Org heading IDs (and anchor tags)
:PROPERTIES:
:CUSTOM_ID: h:9D8BBA15-B9BC-48F2-A25C-5A893F27BE27
:END:
From [[https://gitlab.com/protesilaos/dotfiles/-/blob/master/emacs/.emacs.d/emacs-init.org][Stavrou]] and this [[https://writequit.org/articles/emacs-org-mode-generate-ids.html][article]] (I swear I found the article before I saw Stavrou's setup!

The issue is two-fold - wanting to quickly create unique internal links that will also survive export to HTML and the multiple rewrites of files.

#+begin_src emacs-lisp
(use-package org-id
  :load-path "packages/org-id"
  :after org
  :commands (contrib/org-get-id
             contrib/org-id-headlines)
  :config
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))

  (defun eos/org-custom-id-get (&optional pom create prefix)
    "Get the CUSTOM_ID property of the entry at point-or-marker
POM. If POM is nil, refer to the entry at point. If the entry
does not have an CUSTOM_ID, the function returns nil. However,
when CREATE is non nil, create a CUSTOM_ID if none is present
already. PREFIX will be passed through to `org-id-new'. In any
case, the CUSTOM_ID of the entry is returned."
    (interactive)
    (org-with-point-at pom
      (let ((id (org-entry-get nil "CUSTOM_ID")))
        (cond
         ((and id (stringp id) (string-match "\\S-" id))
          id)
         (create
          (setq id (org-id-new (concat prefix "h")))
          (org-entry-put pom "CUSTOM_ID" id)
          (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
          id)))))

(defun eos/org-add-ids-to-headlines-in-file ()
  "Add CUSTOM_ID properties to all headlines in the current
   file which do not already have one. Only adds ids if the
   `auto-id' option is set to `t' in the file somewhere. ie,
   ,#+OPTIONS: auto-id:t"
  (interactive)
  (save-excursion
    (widen)
    (goto-char (point-min))
    (when (re-search-forward "^#\\+OPTIONS:.*auto-id:t" (point-max) t)
      (org-map-entries (lambda () (eos/org-custom-id-get (point) 'create))))))

#+end_src

* Applications and utilities
** Calendar
This is used by a number of different applications and for many functions.  It turns out that a bunch of the terms called by =Calendar= (such as =displayed-month=, =displayed-year= etc) are not available to other applications until it is run explicitly.  So unless =Calendar= is set up you can get error messages about ~void-variable~

Below, not setting lat/long because it is defined above in [[#h:4D9016D1-13E8-493A-BCD7-7EC445B84B71][Personal Details]]

#+begin_src emacs-lisp
(use-package calendar;; not setting lat/long because it is defined above in [[#h:4D9016D1-13E8-493A-BCD7-7EC445B84B71][Personal Details]]
  :config
  (setq calendar-time-display-form
	'(24-hours ":" minutes
		   (when time-zone
		     (concat " (" time-zone ")"))))
  (setq calendar-week-start-day 1)       ; start week on Monday
  (setq calendar-date-style 'iso)

  (use-package lunar
    :load-path "packages/lunar"
    :config
    (setq lunar-phase-names
	  '("New Moon"
	    "First Quarter Moon"
	    "Fancypants Moon"
	    "Last Quarter Moon")))

  :hook (calendar-today-visible-hook . calendar-mark-today))
#+end_src
** org-journal
from [[https://github.com/bastibe/org-journal][org-journal github]]
#+begin_src emacs-lisp
(use-package org-journal
  :after org
  :ensure t
  :commands (org-journal-new-entry)
  :bind (("C-c j" . org-journal-new-entry))
  ;;:hook ((org-journal-mode . prot/olivetti-mode)
  ;;       (org-journal-mode . org-indent-mode))
  :defer 0.5
  :init
  ;; Change default prefix key; needs to be set before loading org-journal
  (setq org-journal-prefix-key "C-c j ")
  :config
  (setq org-journal-dir "~/org/journal/"
	;; try to bring the config to every journal file
	org-journal-file-header "#+SETUPFILE: ~/.emacs.d/config.org"
	org-journal-date-format "%A, %d %B %Y"
	;; Carry over TODO items and items explicitly marked
        org-journal-carryover-items "+carryover|+TODO=\"TODO\""
	org-journal-enable-agenda-integration t
	;; Remove empty journals after carryover
        org-journal-carryover-delete-empty-journal 'always
	org-journal-file-type 'monthly))
   
#+end_src
** which-key
Found at this [[https://github.com/justbur/emacs-which-key][github]], I find which-key very useful at this point.  This mode displays the key bindings that /could/ follow the binding that you start entering.

#+begin_src emacs-lisp
(use-package which-key
    :config
    (which-key-mode))
#+end_src

* Projectile
:PROPERTIES:
:CUSTOM_ID: h:4E31B98B-2A5B-4EB8-810F-AB8192B8A2E9
:END:
From [[https://projectile.mx/][Projectile home page]]
#+begin_src macs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))
#+end_src
* Ivy / Counsel / Swiper
From abo-abo, whose Github is [[https://github.com/abo-abo/swiper][here]].

(since it's cool and this seems like the right place for it, here's =smex=, a better M-x which integrates =IDO=)
*smex*:
#+begin_src emacs-lisp
(use-package smex
  :ensure t)
#+end_src

*Ivy*:
#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :diminish ivy-mode
  :demand t
  :init
  ;; set ivy height
  (setq ivy-height 30)
  ;; make sure it always stays that high
  (setq ivy-fixed-height-minibuffer t)
  ;; virtual buffers - combines many good things into one command
  (setq ivy-use-virtual-buffers t)
  ;; full file names - useful when multiple files have same names
  (setq ivy-virtual-abbreviate 'full)
  ;; selectable prompt
  (setq ivy-use-selectable-prompt t)
  ;; set completion style - in this case to ignore the order of terms (http://oremacs.com/swiper/#completion-styles)
  (setq ivy-re-builders-alist
	'((t . ivy--regex-ignore-order)))
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode 1)

  :bind (("C-c C-r" . #'ivy-resume)
	 ("C-x b"   . #'ivy-switch-buffer)))
#+end_src
*ivy-rich*, a "friendly interface for ivy," from [[https://github.com/Yevgnen/ivy-rich][here]]
#+begin_src emacs-lisp
(use-package ivy-rich
  :after (ivy)
  :init
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  :config
  (ivy-rich-mode 1))
#+end_src

*Counsel*:
#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :diminish counsel-mode
  :bind (("M-x" . counsel-M-x)
	 ("M-y" . counsel-yank-pop)
	 ("C-x C-f" . counsel-find-file)
	 ("C-h v" . counsel-describe-variable)
	 ("C-h f" . counsel-describe-function)
	 ("C-x 8" . counsel-unicode-char))
  :config
  (counsel-mode 1))
#+end_src
*Swiper*:
#+begin_src emacs-lisp
(use-package swiper
  :ensure t
  :after (ivy)
  :config
  (global-set-key "\C-s" 'swiper))
#+end_src
* Reveal.JS
:PROPERTIES:
:CUSTOM_ID: h:3BA717E1-1687-4341-809A-249993795EFE
:END:
#+begin_src emacs-lisp
(use-package ox-reveal 
:ensure ox-reveal)

(setq org-reveal-root "file:///Users/nick/org/comptia/sessionone/reveal.js")
(setq org-reveal-mathjax t)

(use-package htmlize
  :ensure t)
#+end_src

Org-mode exporting, ~C-c C-e~, now includes an option ~R~ for such reveal slide decks.

Two dimensional slides are not always obvious so with the following there is an option in
tiny font to view the slide-deck continuously and remind users that ~?~ provides useful
shortcuts. Courtesy of [[https://github.com/alhassy/emacs.d/blob/master/README.org][Musa Al-hassy]] 

#+begin_src emacs-lisp
(setq org-reveal-title-slide "<h1>%t</h1> <h3>%a</h3>
<font size=\"1\">
<a href=\"?print-pdf&showNotes=true\">
⟪ Flattened View ; Press <code>?</code> for Help ⟫
</a>
</font>")
#+end_src

One should remove the ~&showNotes=true~ if they do not want to include
speaker notes in the flattened view.

Within the flatenned view, one may wish to ~CTRL/CMD+P~ then save the
resulting PDF locally.

* Emacs-reveal
:PROPERTIES:
:CUSTOM_ID: h:D5FD65A9-6D79-44E3-914F-A55CBD1F9BB8
:END:

#+begin_src emacs-lisp
(use-package emacs-reveal
  :load-path "~/.emacs.d/elpa/emacs-reveal")
#+end_src

Here, setting up so that the org file will automatically be exported to an oer-reveal HTML file (same as doing C-c C-e w w)
#+begin_src emacs-lisp
(defun toggle-oer-reveal-export-on-save ()
  (interactive)
  (if (memq 'oer-reveal-export-to-html after-save-hook)
      (progn
        (remove-hook 'after-save-hook 'oer-reveal-export-to-html t)
        (message "Disabled org html export on save for current buffer..."))
    (add-hook 'after-save-hook 'oer-reveal-export-to-html nil t)
    (message "Enabled oer-reveal-export-to-html on save for current buffer...")))
#+end_src
So with the above defined function, in an org file can M-x toggle-oer-reveal-export-on-save <return>
* org-ref
:PROPERTIES:
:CUSTOM_ID: h:37FC1751-EFA0-4AE9-8A0B-A53FA50FC8CB
:END:
citations, cross-references, indexes, glossaries and bibtex utilities for org-mode
from [[https://github.com/jkitchin/org-ref][here]]
#+begin_src emacs-lisp
(use-package org-ref)
(use-package org-ref-pdf
  :load-path "/Users/nick/.emacs.d/packages/org-ref-pdf.el")
(use-package org-ref-url-utils
  :load-path "/Users/nick/.emacs.d/packages/org-ref-url-utils.el")
#+end_src
* org-re-reveal
:PROPERTIES:
:CUSTOM_ID: h:51A6C200-A7CD-481B-9AA8-B46AA1EAD366
:END:
<2020-05-30 Sat> turning off for now,focussing on getting regular reveal to work

#+begin_src emacs-lisp
;;(require 'org-re-reveal)
#+end_src

* org-pdftools - a custom org link type for pdf-tools
:PROPERTIES:
:CUSTOM_ID: h:740CC9DD-B35D-40A8-A300-332DFE09902B
:END:

#+BEGIN_SRC emacs-lisp
(use-package org-pdftools
  :hook (org-load . org-pdftools-setup-link))

(use-package org-noter-pdftools
  :after org-noter
  :config
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+END_SRC

* Org-Download
:PROPERTIES:
:CUSTOM_ID: h:B6CA3E66-1F8B-4534-9674-FD8F421615FA
:END:

I didn't like the way it stored things, and it kept duplicating the stuff I already had on my drive.  I just like Kitchin's take on it better!
Drag and drop images to Emacs org-mode - [[https://github.com/abo-abo/org-download]]

# #+BEGIN_SRC emacs-lisp
# (use-package org-download
#   :ensure t
#   :defer t
#   :init
#   ;; Add handlers for drag-and-drop when Org is loaded.
#     (with-eval-after-load 'org
#       (org-download-enable)))

# (setq-default org-download-image-dir "/Users/nick/org/comptia/sessionOne/images")
# #+END_SRC

* Drag images and files onto org-mode and insert a link to them
:PROPERTIES:
:CUSTOM_ID: h:EF7F7DFE-6063-4ED6-B3ED-C41FFA277E7D
:END:
from John Kitchin [[http://kitchingroup.cheme.cmu.edu/blog/2015/07/10/Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them/][link]]

#+BEGIN_SRC emacs-lisp
(defun my-dnd-func (event)
  (interactive "e")
  (goto-char (nth 1 (event-start event)))
  (x-focus-frame nil)
  (let* ((payload (car (last event)))
         (type (car payload))
         (fname (cadr payload))
         (img-regexp "\\(png\\|jp[e]?g\\)\\>"))
    (cond
     ;; insert image link
     ((and  (eq 'drag-n-drop (car event))
            (eq 'file type)
            (string-match img-regexp fname))
      (insert (format "[[%s]]" fname)))
     ;; insert image link with caption
     ((and  (eq 'C-drag-n-drop (car event))
            (eq 'file type)
            (string-match img-regexp fname))
      (insert "#+ATTR_LATEX: :width 0.75\\textwidth :placement [h] :float nil\n")
      (insert "#+ATTR_HTML: :width 30%\n")
      (insert (concat  "#+CAPTION: " (read-string "Caption: ") "\n"))
      (insert (format "[[%s]]" fname)))
     ;; C-drag-n-drop to open a file
     ((and  (eq 'C-drag-n-drop (car event))
            (eq 'file type))
      (find-file fname))
     ((and (eq 'M-drag-n-drop (car event))
           (eq 'file type))
      (insert (format "[[attachfile:%s]]" fname)))
     ;; regular drag and drop on file
     ((eq 'file type)
      (insert (format "[[%s]]\n" fname)))
     (t
      (error "I am not equipped for dnd on %s" payload)))))


(define-key org-mode-map (kbd "<drag-n-drop>") 'my-dnd-func)
(define-key org-mode-map (kbd "<C-drag-n-drop>") 'my-dnd-func)
(define-key org-mode-map (kbd "<M-drag-n-drop>") 'my-dnd-func)
#+END_SRC

#+RESULTS:
: my-dnd-func

* Centred, focused text mode (olivetti-mode)
:PROPERTIES:
:CUSTOM_ID: h:98392A91-7C10-4BC7-B0EA-F9B57760F675
:END:
From Protesilaos Stavrou's [[https://protesilaos.com/dotemacs/][setup]]
I'm just taking his mode completely right now, so I'll call it what he does (=prot/olivetti-mode=) - what it does is bring the current window's buffer to the center of view, removes the fringe, hides the mode line, default typeface set to something proportionately-spaced, other things.

<2020-07-20 Mon> I'm going to dump this and some of his other associated functions and definitions, hopefully at some point I will distribute them out through this file appropriately and link them.
#+begin_src emacs-lisp
(use-package olivetti
  :ensure
  :defer
  :diminish
  :config
  (setq olivetti-body-width 0.65)
  (setq olivetti-minimum-body-width 72)
  (setq olivetti-recall-visual-line-mode-entry-state t)

  (define-minor-mode prot/olivetti-mode
    "Toggle buffer-local `olivetti-mode' with additional parameters.

Fringes are disabled.  The modeline is hidden, except for
`prog-mode' buffers (see `prot/hidden-mode-line-mode').  The
default typeface is set to a proportionately-spaced family,
except for programming modes (see `prot/variable-pitch-mode').
The cursor becomes a blinking bar, per `prot/cursor-type-mode'."
    :init-value nil
    :global nil
    (if prot/olivetti-mode
        (progn
          (olivetti-mode 1)
          (set-window-fringes (selected-window) 0 0)
          (prot/variable-pitch-mode 1)
          (prot/cursor-type-mode 1)
          (unless (derived-mode-p 'prog-mode)
            (prot/hidden-mode-line-mode 1)))
      (olivetti-mode -1)
      (set-window-fringes (selected-window) nil) ; Use default width
      (prot/variable-pitch-mode -1)
      (prot/cursor-type-mode -1)
      (unless (derived-mode-p 'prog-mode)
        (prot/hidden-mode-line-mode -1))))
  :bind ("C-c o" . prot/olivetti-mode))


(use-package emacs
  :commands prot/hidden-mode-line-mode
  :config
  (setq mode-line-percent-position '(-3 "%p"))
  (setq mode-line-defining-kbd-macro
        (propertize " Macro" 'face 'mode-line-emphasis))
  (setq-default mode-line-format
                '("%e"
                  mode-line-front-space
                  mode-line-mule-info
                  mode-line-client
                  mode-line-modified
                  mode-line-remote
                  mode-line-frame-identification
                  mode-line-buffer-identification
                  "  "
                  mode-line-position
                  (vc-mode vc-mode)
                  " "
                  mode-line-modes
                  " "
                  mode-line-misc-info
                  mode-line-end-spaces))

  (define-minor-mode prot/hidden-mode-line-mode
    "Toggle modeline visibility in the current buffer."
    :init-value nil
    :global nil
    (if prot/hidden-mode-line-mode
        (setq-local mode-line-format nil)
      (kill-local-variable 'mode-line-format)
      (force-mode-line-update))))


(use-package face-remap
  :diminish buffer-face-mode            ; the actual mode
  :commands prot/variable-pitch-mode
  :config
  (define-minor-mode prot/variable-pitch-mode
    "Toggle `variable-pitch-mode', except for `prog-mode'."
    :init-value nil
    :global nil
    (if prot/variable-pitch-mode
        (unless (derived-mode-p 'prog-mode)
          (variable-pitch-mode 1))
      (variable-pitch-mode -1))))

;;; Initially had a bunch of errors with the following, but then I wised up and upgraded emacs to 27.0.91 and it worked
(use-package emacs
  :config
  (setq-default scroll-preserve-screen-position t)
  (setq-default scroll-conservatively 1) ; affects `scroll-step'
  (setq-default scroll-margin 0)

  (define-minor-mode prot/scroll-centre-cursor-mode
    "Toggle centred cursor scrolling behaviour."
    :init-value nil
    :lighter " S="
    :global nil
    (if prot/scroll-centre-cursor-mode
        (setq-local scroll-margin (* (frame-height) 2)
                    scroll-conservatively 0
                    maximum-scroll-margin 0.5)
      (dolist (local '(scroll-preserve-screen-position
                       scroll-conservatively
                       maximum-scroll-margin
                       scroll-margin))
        (kill-local-variable `,local))))

  ;; C-c l is used for `org-store-link'.  The mnemonic for this is to
  ;; focus the Line and also works as a variant of C-l.
  :bind ("C-c L" . prot/scroll-centre-cursor-mode))


(use-package display-line-numbers
  :defer
  :config
  ;; Set absolute line numbers.  A value of "relative" is also useful.
  (setq display-line-numbers-type t)

  (define-minor-mode prot/display-line-numbers-mode
    "Toggle `display-line-numbers-mode' and `hl-line-mode'."
    :init-value nil
    :global nil
    (if prot/display-line-numbers-mode
        (progn
          (display-line-numbers-mode 1)
          (hl-line-mode 1))
      (display-line-numbers-mode -1)
      (hl-line-mode -1)))
  :bind ("<f7>" . prot/display-line-numbers-mode))

(use-package frame
  :load-path "packages/frame"
  :commands prot/cursor-type-mode
  :config
  (setq-default cursor-type 'box)
  (setq-default cursor-in-non-selected-windows '(bar . 2))
  (setq-default blink-cursor-blinks 50)
  (setq-default blink-cursor-interval nil) ; 0.75 would be my choice
  (setq-default blink-cursor-delay 0.2)

  (blink-cursor-mode -1)

  (define-minor-mode prot/cursor-type-mode
    "Toggle between static block and pulsing bar cursor."
    :init-value nil
    :global t
    (if prot/cursor-type-mode
        (progn
          (setq-local blink-cursor-interval 0.75
                      cursor-type '(bar . 2)
                      cursor-in-non-selected-windows 'hollow)
          (blink-cursor-mode 1))
      (dolist (local '(blink-cursor-interval
                       cursor-type
                       cursor-in-non-selected-windows))
        (kill-local-variable `,local))
      (blink-cursor-mode -1))))

#+end_src

* magit
:PROPERTIES:
:CUSTOM_ID: h:03DF5961-7D68-44F5-B8F6-1291856B8AF1
:END:
Using magit and forge (which works with GitLab)
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)
         ("C-x C-g" . magit-status)))

(use-package forge
  :after magit)
#+end_src
* Paradox - install packages from github <2020-10-13 Tue 15:51> turning off for now - re-evaluate
#+BEGIN_SRC emacs-lisp
;; (setq paradox-github-token 4ff7cf2de8240f479e3a3a2510227b72c6c773f8)
#+END_SRC
* Python IDE with elpy
:PROPERTIES:
:CUSTOM_ID: h:02E4F19E-952B-4A5C-B14F-D506919C3552
:END:
from Jorgen Schaefer's github [[https://github.com/jorgenschaefer/elpy]]

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :init
  (elpy-enable))
#+END_SRC

The next instructs emacs to use the standard Python interpreter
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "python"
      python-shell-interpreter-args "-i")
#+END_SRC

Because on a mac the "python" command means python2, added this:
#+BEGIN_SRC emacs-lisp
(if (eq 'system-type "darwin")
    (defvar elpy-rpc-python-command "python3")
(defvar elpy-rpc-python-command "python"))  
#+END_SRC

Include [[https://www.flycheck.org/en/latest/][flycheck]]
#+BEGIN_SRC emacs-lisp
;; Enable Flycheck rather than flymake

(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

#+END_SRC

Using company-jedi: company-mode completion back-end for Python JEDI [[https://github.com/emacsorphanage/company-jedi]]
#+BEGIN_SRC emacs-lisp
(defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))

(add-hook 'python-mode-hook 'my/python-mode-hook)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (use-package flycheck
;;   :ensure t
;;   :init (global-flycheck-mode))
#+END_SRC

Using autopep8

#+BEGIN_SRC emacs-lisp
(use-package py-autopep8
  :init
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
#+END_SRC

Use pyvenv 
[[https://github.com/jorgenschaefer/pyvenv][Pyvenv]]

#+BEGIN_SRC emacs-lisp
(use-package pyvenv
  :ensure t
  :init
  (setenv "WORKON_HOME" "~/.pyenv/versions"))
#+END_SRC

* LSP Mode
:PROPERTIES:
:CUSTOM_ID: h:55A8DBAA-432B-4E6E-A4CA-3197D1DC4097
:END:
home page [[https://emacs-lsp.github.io/lsp-mode/][here]]
#+begin_src emacs-lisp
;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
(setq lsp-keymap-prefix "s-l")

(use-package lsp-mode
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
            (python-mode . lsp)
            ;; if you want which-key integration
            (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
;; if you are helm user
(use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
(use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language




#+end_src
* expand region
:PROPERTIES:
:CUSTOM_ID: h:37AB6CF7-E0DB-4291-9771-241AB775032A
:END:
From [[https://github.com/magnars/expand-region.el][this]] GitHub 
#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind (("C-=" . er/expand-region)))
#+end_src
* Yasnippet
:PROPERTIES:
:CUSTOM_ID: h:F0D2F8E6-A784-4E2F-87F0-F1B751A92919
:END:
from [[https://github.com/joaotavora/yasnippet][here]]
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/packages/yasnippet")

(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1)
  :config
  (add-to-list 'yas-snippet-dirs "~/emacs.d/snippets"))
 #+end_src

* Settings for prose and code
** Dictionary
This allows offline access to Webster's Revised Unabridged Dictionary (1913).  A long journey starting with a reference to [[http://mbork.pl/2017-01-14_I'm_now_using_the_right_dictionary][this]] on Reddit, leading to the discovery of this poetic [[http://jsomers.net/blog/dictionary][paean]] to using the right dictionary.  Below should work OK, you can do =C-c d= to look up the word on point or type in another one. The dictionary itself is in Stardict format and on my mac is stored at =~/.stardict/dic=.  Using [[https://github.com/gucong/emacs-sdcv][sdcv-mode]] instead of sdcv from Melpa.

#+begin_src emacs-lisp
(use-package sdcv
  :ensure t
  :bind (("C-c d" . sdcv-search-pointer))
  :hook (sdcv-mode-hook . (lambda ()
                            (font-lock-mode -1))))
#+end_src
** spelling
Currently using flyspell - there are all kinds of complicated and better ways to do it, but doing this for now.
#+begin_src emacs-lisp
(use-package flyspell
  :defer 1
  :diminish)
#+end_src
* preferences / appearance
:PROPERTIES:
:CUSTOM_ID: h:9F230725-522C-4B77-891D-DEFB42A0F8A4
:END:
** visual line mode
I just like this to be on by default.  If I start doing more programming in Emacs, I will probably want to make this more granular
#+begin_src emacs-lisp
(global-visual-line-mode 1)
#+end_src
** Parentheses
I used to bury this in org mode stuff but it kept not being activated for various reasons and I have really come to depend on it!  So here it is, separate and sweet
#+begin_src emacs-lisp
(use-package paren
  :config
  (setq show-paren-style 'parenthesis)
  (setq show-paren-when-point-in-periphery t)
  (setq show-paren-when-point-inside-paren nil)
  :hook (after-init-hook . show-paren-mode))
#+end_src

** dim non-selected buffer
#+begin_src emacs-lisp
(use-package dimmer
  :defer 1
  :load-path "~/.emacs.d/packages/dimmer.el"
  :config
  (setq dimmer-exclusion-predicates '(helm--alive-p window-minibuffer-p))
  (setq dimmer-exclusion-regexp-list
        '("^\\*[h|H]elm.*\\*" "^\\*Minibuf-[0-9]+\\*"
          "^.\\*which-key\\*$" "^*Messages*" "*LV*"))
  (setq dimmer-fraction 0.50)
  (dimmer-mode t))
#+end_src
** Installing Prot's Modus themes
from: [[https://gitlab.com/protesilaos/modus-themes][here]]
"This is a set of accessible themes for GNU Emacs.  The contrast ratio
  between foreground and background values should always be >= 7:1, which
  conforms with the WCAG AAA accessibility standard.  This is the highest
  standard of its kind.
The Modus themes project consists of two standalone items, one where
  dark text is cast on a light backdrop (Modus Operandi) and another where
  light text is displayed against a dark background (Modus Vivendi)."
#+begin_src emacs-lisp
(use-package modus-operandi-theme :ensure)

(use-package modus-vivendi-theme :ensure)

(load-theme 'modus-operandi t)          ; Light theme
(load-theme 'modus-vivendi t)           ; Dark theme
#+end_src

Then, we can load them at a given time - the following will only work if ~calendar-latitude~ and ~calendar-latitude~ are set correctly (which they are here up in Personal Details, because /of course/ emacs has a solar clock running in the background at all times, with the ~solar.el~ library.

<2020-10-14 Wed> stopped working after that dumb crash and reconstruction!
#+begin_src emacs-lisp
;; ;; making sure timer.el is enabled
;; (use-package timer
;;   :load-path "packages/timer")
  
;; ;; Light at sunrise
;; (load-theme 'modus-operandi t t)
;; (run-at-time (nth 1 (split-string (sunrise-sunset)))
;;              (* 60 60 24)
;;              (lambda () (enable-theme 'modus-operandi)))

;; ;; Dark at sunset
;; (load-theme 'modus-vivendi t t)
;; (run-at-time (nth 4 (split-string (sunrise-sunset)))
;;              (* 60 60 24)
;;              (lambda () (enable-theme 'modus-vivendi)))

#+end_src

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC
