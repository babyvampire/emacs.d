;; turns on debugging at the beginning, so if something breaks during init,
;; we get dumped into a debugger
(setq debug-on-error t)

;; Make all commands of the “package” module present.
(require 'package)

;; Internet repositories for new packages.
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives
	     '("org" . "https://orgmode.org/elpa/"))
(add-to-list 'package-archives	     
             '("gnu" . "https://elpa.gnu.org/packages/"))

;; Make sure `use-package' is available.
;; (unless (package-installed-p 'use-package)
;;   (package-refresh-contents)
;;   (package-install 'use-package))

;; Configure `use-package' prior to loading it.
;; (eval-and-compile
;;   (setq use-package-always-ensure nil)
;;   (setq use-package-always-defer nil)
;;   (setq use-package-always-demand nil)
;;   (setq use-package-expand-minimally nil)
;;   (setq use-package-enable-imenu-support t)
;;   (setq use-package-compute-statistics t)
;;   ;; The following is VERY IMPORTANT.  Write hooks using their real name
;;   ;; instead of a shorter version: after-init ==> `after-init-hook'.
;;   ;;
;;   ;; This is to empower help commands with their contextual awareness,
;;   ;; such as `describe-symbol'.
;;   (setq use-package-hook-name-suffix nil))

;; (eval-when-compile
;;   (require 'use-package))
;; (require 'diminish)
;; (require 'bind-key)

;; (let* ((conf "~/.emacs.d/config")
;;        (el (concat conf ".el"))
;;        (org (concat conf ".org")))
;;   (if (file-exists-p el)
;;       (load-file el)
;;     (use-package org)
;;     (org-babel-load-file org)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
)


(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
)
