#+OPTIONS: org-hide-emphasis-markers:t

# since these are just notes, I don't want to run the code blocks here
#+PROPERTY: header-args  :eval no



* I'll leave some LATEX and HTML formatting examples here, because I always get confused about these
** HTML

*** a basic combined latex and html prefix
#+ATTR_HTML: :width 40% :style float:right;
#+ATTR_LATEX: :width 0.75\textwidth :placement [H] :float nil
*** Putting in a video by lechten:
# @@html:<video controls width="400" height="300" src="https://archive.org/download/LinusTorvaldsOnGittechTalk/LinusTorvaldsOnGittechTalk.ogv#t=460"></video>@@
*** stretching to fill screen
#+REVEAL_HTML: <img class="stretch" src="img/whatever.jpg">
*** Here is the code I use for a Two Column slide with image on the right (you can change the width of each column) :
#+REVEAL_HTML: <div class="column" style="float:left; width:45%">
Blablablablabla
 * blablabl
 * more blabla
 #+REVEAL_HTML: </div>

 #+REVEAL_HTML: <div class="column" style="float:right; width:45%">
 #+ATTR_ORG: :width 150
 [[./images/image.jpg]]
 #+ATTR_ORG: :width 150
 [[./images/image.png]]
 #+REVEAL_HTML: </div>
*** If you want to include literal HTML in your org file, and have it exported only when you export to HTML, use an export block:

#+BEGIN_EXPORT html
<br>
<h2>This is the footer.</h2>
<p>You can put stuff here.</p>
<br>
#+END_EXPORT

*** <2020-07-18 Sat> 
- customized variable org-re-reveal-title-slide to nil
- which removed the title slide when generating to emacs-reveal
** LATEX

*** coralling floats
latex package ~placeins~
#+LATEX_HEADER: \usepackage{placeins}
\FloatBarrier
Which is supposed to keep the floats above that line


* Frankiesaurus project
** emacs-reveal notes
- After lots of flailing around, figured out how to get the images to scale right and fill the whole page on different viewports and devices.
  - Not sure why there isn't an equivalent foreground way to to do this (and there probably is, I just didn't find it), but the current answer is to use the reveal.js data-background attribute, with "contain" (rather than "cover"!).
  - Currently this sits in the :PROPERTIES: of each slide, here is an example:
#+begin_example emacs-lisp
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-background="./img/page001.png" data-background-size="contain"
:END:
#+end_example


* Template expansion 
** is now C-c C-,
* Yasnippets

* Emacs-reveal
** Reveal.js-toc-progress at bottom of slides
- This was driving me nuts for a while, because I couldn't figure out how to turn it off.  Once my files got to a certain size, it was autosizing down to unreadable levels anyway.
- Characteristics of this (font size, scrolling, background color) can be changed by customizing variable ~oer-reveal-toc-progress-dependency~
- Well, I figured out how to get rid of it, but now I can't figure out how I did that!  This is the importance of documenting as I go along, but sometimes I get into a bit of a frenzy.
- going back later, was able to eliminate it by customizing variable =Oer Reveal Plugins= and deleting =TOC progress=.
- But I hate going into Customize, I wish I could figure out a way to do it programmatically and perhaps per file.
- (also, only applied for current state, so the TOC progress will come back)
** revealimg

* Audio work
** Remastering sound files for Frankiesaurus
- Noise reduction with Audacity:
  1. Get noise profile
     - find a waveform that contains only noise - 0.05s minimum
     - Click Effect > Noise Reduction
     - Select an area of relative quiet
     - Click Get Noise Profile
     - You can preview the results of noise reduction on the sample you selected
     - I tried 10dB
     - *Sensitivity* controls how much of the audio will be considered noise - higher levels can remove some of the desired signal
     - (For Frankiesaurus, honestly I kind of liked it un-cleaned up
- My workflow:
  - pick beginning point
  - play until end of page
  - press ~]~ to mark right edge of selection (turns out the left boundary is automatically where you started playing
  - Press ~Shift-F7~ to listen to last bit of selection
  - If it's OK, then <command> + B to label and select it
  - Type name of page
* Olivetti mode
- Centred, focused text mode (olivetti-mode)
- from Protesilaos Stavrou
- at [[https://gitlab.com/protesilaos/dotfiles/-/blob/master/emacs/.emacs.d/emacs-init.org][his gitlab]]
** keybindings:
- =C-c o= activate olivetti mode
- =C-c L= activate scroll-centre-cursor-mode
- <f7> toggle display-line-numbers-mode
 
* Setting up a new server
** users
- Log in as =root=
- then, start adding your stuff:
  - =adduser nick=
  - add this user to the =sudo= group:
    - =usermod -aG sudo nick=
** securing SSH
- change things in =/etc/ssh/sshd_config=:
  - change =PermitRootLogin= to =prohibit-password= (this changed in 16.04 I think)
  - Above allows key-based root login, possibly not so secure but helps with moving things back and forth between servers.  Should probably turn this off when done setting up though!
  - change =PasswordAuthrntication= to =no=
  - restart ssh: =sudo service sshd restart=
  - check if configurations worked with =sudo sshd -T=
** Installing zsh and oh my zsh
*** Installing zsh:
#+begin_src bash
sudo apt-get install zsh -y
#+end_src
*** Installing oh-my-zsh:
#+begin_src bash
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
#+end_src
***** plugins:
- zsh-syntax-highlighting:
  - clone this repository in oh-my-zsh's plugins directory: =~/.oh-my-zsh/plugins=:
  - =git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting=
- zsh-autosuggestions:
  - clone this repository into oh-my-zsh's plugins directory:
  - =git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions=
- zsh-completions:
  - clone this repository inside oh-my-zsh repo:
  - =git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions=
  - add to plugin list and add this to .zshrc: =autoload -U compinit && compinit=
- autojump:
  - in Ubuntu repository:
  - =sudo apt install autojump=
- incidentally was having some problems setting this up once, and it turned out:
  - I had not yet made zsh my default shell, needed to run:
    - =chsh -s /bin/zsh=
** powerlevel10k
- =git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k=
** Setting up rclone and google drive
*** 
* org-journal
** key bindings
** setting up font and face
It kind of bugged me that the subheadings in org-journal were the color they turned out to be using Prot's faces.  I just wanted everything black and white in a journal.  I'm not even sure why.

So, using function =describe-text-properties= we find that the parts I want to change are ~org-level-2~ with a foreground of #5d3026.

Then, to change that (and we only want to do it locally, or we could mess up all kinds of things), we use =face-remap-add-relative=:

#+begin_src emacs-lisp
(face-remap-add-relative 'org-level-2
#+end_src
* emacs tips
** Change font size
- =C-x C-+= 
** Create new frame
- =C-x 5 2=
* video processing android --> mac
** ffmpeg concat
- make list.txt
  - list each file with this format:
    - =file './[file].mp4'=
- ffmpeg command format:
  - =ffmpeg -f concat -safe 0 -i list.txt -c copy output.mp4=
* Docker / Traefik
** Securing daemon socket
/The issue/: Docker connects with a socket on the host device, and Traefik accesses the socket (in default mode) insecurely.  This could theoretically mean that anyone compromising your Traefik install would be able to run things as root on the host.  What you want to do is use TLS encryption between Traefik and the docker socket.  This is *not* enabled by default in almost any configuration, and is a big security hole.

Docker has a section in its docs about securing the Docker socket, it is [[https://docs.docker.com/engine/security/https/][here]] and I follow this mostly throughout. Also some input from [[https://git.technerdonline.com/edwin/docker-traefik][Edwin's configuration]].

There is a lot for me to learn and think about with different cryptographic keys.  ECDSA is likely to become the new standard but I just didn't feel like sitting down and rooting around through all that new info right now, and the OpenSSL docs for creating ECDSA keys adds a whole new level of complexity what with choosing curves and such.  So I will just go through the Docker docs style and use an RSA key (aes256).
*** The words:
- =openssl genrsa -aes256 -out ca-key.pem 4096=
- passphrase =filene=
- Then make a Certificate Authority:
  - =openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem=
  - Rats Inc, my gmail, VA, Fairfax, frankiesaurus.com
- Now a server key and a certificate signing request (CSR):
  - =openssl genrsa -out server-key.pem 4096=
  - =openssl req -subj "/CN=$HOST" -sha256 -new -key server-key.pem -out server.csr=
- TLS connections go through IP addresses and DNS names, so need to specify the IP addresses.  I'm a little uncertain about this, so today on <2020-09-04 Fri> put down 127.0.0.1 and the ipv4 address I've designated for the Traefik container (192.168.50.254):
  - =echo subjectAltName = DNS:$HOST,IP:192.168.50.254,IP:127.0.0.1 >> extfile.cnf=
- Then set the Docker demon key's extended usage attributes so they can only be used for server authentication:
  - =echo extendedKeyUsage = serverAuth >> extfile.cnf=
- We generate the signed certificate:
  - =openssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server.pem -extfile extfile.cnf=
- I'm a little confused about the distinction made in the Docker documentation between /host/ and /client/ machines - since for me I think they are the same machine.  Edwin (cf above) seems to run the client and host keys and CSRs on the same machine so I guess I'll do that too.  Maybe these distinctions are for Docker Swarm or something?
  - =openssl genrsa -out client-key.pem 4096=
  - =openssl req -subj '/CN=client' -new -key key.pem -out client.csr=
- Then create a new extensions config file to make the key suitable for client authentication:
  - =echo extendedKeyUsage = clientAuth > extfile-client.cnf=
- Now the signed certificate:
  - =openssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out client.pem -extfile extfile-client.cnf=
- Then can remove the two CSRs and extensions config files:
  - =rm -v client.csr server.csr extfile.cnf extfile-client.cnf=
- Change permissions to make the keys only readable by me:
  - =chmod -v 0400 ca-key.pem key.pem server-key.pem=
- Remove write access to certificates to prevent damage:
  - =chmod -v 0444 ca.pem server-cert.pem cert.pem=
- The tricky stuff happens in the next step, but first we have to move all those key files and CSRs to their endpoints.  I will follow Edwin here and put them where he does, which makes things easier cuz then I can mimic his =ExecStart= settings in the next step.
  - code:
  #+begin_src bash
  mkdir /root/.docker
  mkdir /etc/docker/certs.d/
  #+end_src
  - and then (need to run most as root):
#+begin_src bash
cp ca.pem /etc/docker/certs.d/ca.crt
cp cert.pem /etc/docker/certs.d/client.pem
cp key.pem /etc/docker/certs.d/client.key
chmod -R 600 /etc/docker/certs.d/
chmod 444 /etc/docker/certs.d/ca.crt
chmod 444 /etc/docker/certs.d/client.pem
chmod 400 /etc/docker/certs.d/client.key
chown -R root:docker /etc/docker/certs.d/
chmod 400 ca-key.pem
chmod 444 ca.pem
chmod 400 server-key.pem
chmod 444 server.pem
chmod 400 client-key.pem
chmod 444 client.pem

cp ca.pem /usr/local/share/ca-certificates/localhost.crt
update-ca-certificates
#+end_src
- Turns out should have done all of the cert- and key-making in root; but to mkae things work can simply:
  - move ca.pem, server.pem, and server-key.pem to =/root/.docker=
- OK, scraping the outer edges of my Linux knowledge and into an area in which I am very unconfident:
  - (Using some Ubuntu man stuff but also an excellent answer [[https://askubuntu.com/questions/659267/how-do-i-override-or-configure-systemd-services][here]] in askubuntu.com)
  - Changing a systemd unit - you should *never* change the file in =/lib/systemd/system/=
  - What you do is, can create granular override in =/etc/systemd/system/=
  - so, example:
    - =sudo systemctl edit foo= creates a directory in =/etc/systemd/system= named after the unit, an =override.conf= file in that directory (=/etc/systemd/system/foo.service.d/override.conf=)
    - you can look inside the current systemd file by doing this:
      - =sudo systemctl cat docker | grep Exec= to see the ExecStart setting
    - and you can override it by doing:
      - =sudo systemctl edit docker=
      - Then in my particular use-case adding:
        #+begin_src bash
        [Service]
        ExecStart=
        ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 --tlsverify --tlscacert /root/.docker/ca.pem --tlscert /root/.docker/server.pem --tlskey /root/.docker/server-key.pem -H unix:///var/run/docker.sock
        #+end_src
        - [What's interesting here is that the first line explicitly *clears* =ExecStart=, then the next line replaces it]
    - =systemctl edit= automatically reloads the systemctl daemon
- Then need to, as root:
  #+begin_src bash
  echo 'export DOCKER_CERT_PATH=/etc/docker/certs.d/' >> /etc/profile
  echo 'export DOCKER_HOST=tcp://127.0.0.1:2376'>> /etc/profile 
  echo 'export DOCKER_TLS_VERIFY=1' >> /etc/profile
  #+end_src

*** I ended up not being able to make this work
- Mostly, ending up with a whole bunch of errors when I tried to enable it - some of the difficulty was trying to put two models together.  I may end up trying to integrate a container-based system such as [[https://github.com/Tecnativa/docker-socket-proxy][Tecnativa]] or [[https://github.com/qdm12/docker-proxy-acl-alpine][this]].
- I think the main, and simplest way to avoid this potential vulnerability for now is to avoid making the containers with access to the socket reachable in public.  So for now will restrict the Traefik and Portainer dashboards - I don't really need them at this point anyway.

