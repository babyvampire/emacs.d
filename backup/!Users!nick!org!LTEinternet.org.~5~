# -*- org-image-actual-width: nil; -*-
#+STARTUP: overview
#+OPTIONS: auto-id:t
#+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)
#+SPDX-FileCopyrightText:blah blah

* Basic steps:
1. Set up the device you will be using to communicate with the LTE modem
2. Set up your LTE modem
3. Set up the device you will be using as a router for your LTE modem
* Set up your Raspberry Pi

** Raspberry Pi 3B+

*** Set up SD card
**** Format
- RPi bootloader boots from FAT and not exFAT.  So format with FAT32
- in macos:
  - first make sure you get the correct disk name, could erase your system disk!
    - =diskutil list=
  - then format:
    - =sudo diskutil eraseDisk FAT32 <NAME> MBRFORMAT /dev/disk2=
**** then send the =.img= file over
  - basic:
    - =dd bs=4M if=<FILENAME>.img of=/[disk] conv=fsync=
  - using pipeviewer:
    - ~sudo dd if=[filename].img bs=1m | pv -s [size i.e. 2G or 300MB] | sudo dd of=/dev/disk2 bs=1m~
    - specific example (sending Raspbian):
      - =sudo dd if=2020-12-02-raspios-buster-armhf-lite.img bs=1m | pv -s 2G | sudo dd of=/dev/disk2 bs=1m=
    - specific example (sending the RPi3 Goldenorb image):
      =sudo dd if=openwrt-RaspberryPi3-GO2020-03-01.img bs=1m | pv -s 1G | sudo dd of=/dev/disk2 bs=1m=
  - if error "Resource busy" then unmount with ~diskutil unmountDisk <disk>~

**** Raspberry Pi imager

*** connect to Pi

**** can do directly from mac:
***** when it's running Raspi:
- connect ethernet cable from mac to Pi
- =ping raspberrypi.local= will usually give you the IP address
- it will likely have given itself an IP address in the 169.254.0.1 rage using APIPA because it could not find a DHCP server
- set up Internet Sharing
  - System Preferences --> Sharing
  - check "Internet Sharing" box
  - then check the box of the connection (in my case USB 10/100/1000 LAN)
- ping =raspberrypi.local= again to find its IP address, has probably been set up in the 192.168.2.x range - usually 192.168.2.2
- or, can just =ssh pi@raspberrypi.local=
***** when it's running OpenWRT:
- connect ethernet from mac to Pi
- if you can't find or remember the IP address, turn on wireshark and look for its DHCP requests
- what seems to work is:
  - in Luci, Network --> Interfaces --> LAN, change to DHCP client
  - then from mac, share Internet connection over USB
  - turn on WiFi
  - openWRT IP address will be in 192.168.2.x range, likely 192.168.2.2
- now the openWRT server has internet access and you can start updating and installing things


*** set up Pi:
**** set up new user
- =sudo adduser nick=
- get =groups= from user =pi=
- add nick to same groups as pi:
  - =usermod -a -G group1,group2,group3,[etc] nick=
  - sudo usermod -a -G pi,adm,dialout,cdrom,sudo,audio,video,plugdev,games,users,input,netdev,gpio,i2c,spi nick
- check to make sure =nick= is part of =sudo=
- erase user =pi= and their directories etc:
  - =# deluser --remove-home pi=
**** Config stuff
- =sudo raspi-config=
- change =hostname=
- under =Localisation Options=, =Change Locale= and add =en-us.UTF-8=
  - then select it as default locale
- change timezone under =Localisation Options=
- update raspi-config
- update Pi
**** Use Pi to work on modem
***** this time, using Sierra Wireless MC7354 - Mini PCI-E form factor,  U.FL connectors on modem
- good technical data on the Techship website [[https://techship.com/products/sierra-wireless-mc7354/][here]].
****** get the firmware
- link to Sierra Wireless page with MC7354 firmware: [[https://source.sierrawireless.com/resources/airprime/software/airprime-em73xx_mc73xx-fw-package-latest-release/][here]]
- latest build for this modem is 4837 dated Mar 20, 2019
- downloaded =Build4837-Approved-Only-7354-SPK.zip= at https://source.sierrawireless.com/-/media/support_downloads/airprime/software/minicard/em_mc73xx_fw_build4837/build4837-approved-only-7354-spk.ashx
****** install these packages:
- =sudo apt-get install libqmi-utils minicom libuuid-tiny-perl libipc-shareable-perl snapd bridge-utils libmbim-utils modem-manager=
****** see USB identification
- run =dmesg= after attaching modem enclosure / USB device, should see the new deice being registered along with name
- run =ttyUSB=$(dmesg | grep '.3: Qualcomm USB modem converter detected' -A1 | grep -Eo 'ttyUSB[0-9]$' | tail -1)= which will assign =$ttyUSB= to modem
  - =echo $ttyUSB= to check
  - in this case is =ttyUSB2=
- get =pid= and =vid= from =lsusb=
****** copy the spk file to the Pi
****** then run this to update firmware:
#+begin_src bash
sudo qmi-firmware-update \
     --update \
     -d 1199:68c0 \
9999999_9902574_SWI9X15C_05.05.58.00_00_GENNA-UMTS_005.025_002-field.spk
#+end_src
- (GENNA-UMTS is the generic carrier firmware)
- (also turns out that by using this version of =qmi-firmware-update= we don't have to use the whole =swi_setusbcomp.pl= thing anymore, because it is incorporated within =qmi-firmware-update= -- maybe??)
****** communicating with the modem
******* using minicom
- =minicom -o -D /dev/ttyUSB2 -b 9600=
******* AT commands
- some AT commands are different on the MC7354, there's a good compendium of all the AT commands for this modem [[https://poohyhoh.blogspot.com/2017/06/lte-mc7354-at-command-test.html][here]].
  #+begin_src bash
AT should return OK
(if AT returns nothing, try
ATE which should echo things to console    
at!entercnd="A710"     allows entering advanced commands
AT!SELACQ     select RAT acquisition order
AT!SELACQ=?
AT!SELACQ=LTE     put LTE first in acquisition order
AT!GETRAT?      Return the current active radio access technology (RAT)
at!reset     reset the modem
at!gstatus?      Return operational status
at+cpin?        SIM status
at!udusbcomp?   USB interface configuration; 8 = MBIM, 6 = QMI
at!udusbcomp=6  change to QMI [the 7354 uses a different format for this than the 7455]
ATI             device info, manufacturer etc
at!gobiimpref?    shows carrier firmware; should be GENNA-UMTS for generic
at!pcinfo?       Return power control status information
at!pctemp?       Return current temperature information
at!pcvolt?       Return current power supply voltage information


  #+end_src
******* using =mbimcli= - modem needs to be in MBIM mode, ModemManager stopped
******** script in /etc/mbim-network.conf:
#+begin_src bash
APN=fast.t-mobile.com
PROXY=yes
#+end_src
******** then,
- sudo systemctl stop ModemManager
- sudo mbim-network /dev/cdc-wdm0 start    Starts the network connection
- sudo mbim-network /dev/cdc-wdm0 status
- then restart ModemManager
******* using uqmi (if in qmi mode)
- uqmi -d /dev/cdc-wdm0 [command]
  - good overall info command:
    - uqmi -d /dev/cdc-wdm0 --get-data-status --get-current-settings --get-capabilities --get-signal-info --get-serving-system
******* using umbim (if in mbim mode)
- umbim -d /dev/cdc-wdm0 <caps|pinstate|unlock|registration|subscriber|attach|detach|connect|disconnect|config|radio|signal|status>
******* using socat
- socat - /dev/cdc-wdm0,crnl [assuming it ended up at cdc-wdm0]
* OpenWrt router
** initial setup:
*** copy Goldenorb .img to SD card
sudo dd if=openwrt-RaspberryPi3-GO2020-03-01.img bs=1m | pv -s 1G | sudo dd of=/dev/disk2 bs=1m
*** make ethernet connection between devices

*** Luci interface
- by default IP address will be 192.168.1.1
- So, for first communication will need to turn off WiFi, or any other connection to your LAN, as you probably already have a =192.168.1.1= somewhere
- Need to set up through LuCI, so in a web browser go to http://192.168.1.1 (will not be ready for ~https~)
*** initially, no password
- so, as prompted set up a new password in web interface (System --> Administration)
*** SSH access
- also in System --> Administration, set up Dropbear instance
*** reboot
** change IP address & turn off DHCP
so as to not conflict with your LAN router - we're going to want to connect this device to the internet *through* our LAN at first, so we don't want it to be 192.168.1.1 /or/ to be running DHCP.
*** through LuCI:
- change IP address & gateway so that it can coexist on our LAN
  - Network --> Interfaces --> LAN
  - IPv4 address: change this to what you will (I just changed it to 192.168.1.181, one more than my mac's static IP address)
  - change IPv4 gateway to the LAN router address (in this case 192.168.1.1)
- turn off DHCP
  - Network --> Interfaces --> LAN
    - DHCP server section, at bottom of page
    - click "ignore interface"
      now OpenWRT won't be trying to hand out IP addresses in the LAN
- *then*,
  - after hitting "Save and Apply" will get an error message as, since the IP address will change, it won't be able to reach the device.  Click "Apply unchecked" (the red box)
  - then log in with the new IP address
*** through CLI:
- =nano /etc/config/network=
- change IP address on interface 'lan'
- then =/etc/init.d/network restart=
or
- uci set network.lan.ipaddr='new-ip-address'
- uci set network.lan.gateway='your-gateway-address'
- uci set network.lan.dns='dns-address-here'
- uci commit && service network restart
** change TTL
- Network > Firewall > Custom TTL Settings (top of page).  Enable.  Set TTL value to 65.  Save and Apply.
- 65 seems to be the go-to number for TTL.  If the data starts showing up as hotspot data usage, try a TTL of 64
** attach external modem
- in Modem --> connection profile put =fast.t-mobile.com= as APN
** Was having trouble connecting to network
- got signal from tower, but no network.  Seemed to connect and disconnect.
*** following leads:
- in /usr/lib/rooter/initialize.sh
  uncommented lines 301 & 302 per remark in https://forums.whirlpool.net.au/archive/2689577
  #+begin_src bash
  echo "1199 68c0" > /sys/bus/usb-serial/drivers/option1/new_id
  echo "1199 68c0" > /sys/bus/usb/drivers/qmi_wwan/new_id
  #+end_src

** using prometheus in openWRT
*** =node_exporter= in openWRT
CLI:
 #+begin_src bash
opkg list *prometheus*
 #+end_src
 - this gets you a list of all the different extensions
 - let's try
   #+begin_src bash
opkg install prometheus-node-exporter-lua

then

    opkg install prometheus-node-exporter-lua-$MODULE

    or

    opkg install prometheus-node-exporter-lua-openwrt prometheus-node-exporter-lua-netstat prometheus-node-exporter-lua-wifi prometheus-node-exporter-lua-wifi_stations prometheus-node-exporter-lua-textfile
   #+end_src
*** following [[http://www.florentflament.com/blog/monitoring-with-prometheus-and-grafana.html][this guy]]:
- installed the =prometheus-node-exporter= plugins as in the last section
- in =/etc/config/prometheus-node-exporter-lua=:
  #+begin_src bash
config prometheus-node-exporter-lua 'main'
        option listen_address '127.0.0.1'
        option listen_port '9100'
  #+end_src
- open up port 9100 in firewall
  (in =/etc/config/firewall=):
  #+begin_src bash
config rule
        option enabled '1'
        option target 'ACCEPT'
        option src 'wan'
        option proto 'tcp udp'
        option dest_port '9100'
        option name 'node_exporter'
  #+end_src
- test that it's working:
  curl http://localhost:9100/metrics
  or use =tcpdump=:
  tcpdump -i wwan0 port 25826
- 

*** or we can try using =collectd=:
- using the [[https://github.com/prometheus/collectd_exporter][collectd_exporter]] for Prometheus, ultimately
**** first configure collectd on the openWRT router:
- install [[https://collectd.org/wiki/index.php/Plugin:Network][network]] plugin, which in openwrt is =collectd-mod-network=
  - opkg install collectd-mod-network
- let's try with the =write_http= plugin, which puts stuff in JSON format:
  - opkg install collectd-mod-write-http
  - configuration at =/var/etc/collectd.conf= on OpenWRT server
- full and good documentation on [[https://collectd.org/wiki/index.php/Networking_introduction][collectd networking]]

- can set up collectd export within luci - Statistics --> Setup --> Output plugins
  
- for temp:
  opkg install collectd-mod-thermal

- for monitoring ping:
  opkg install collectd-mod-ping
**** configure on Prometheus server
- using [[https://hub.docker.com/r/prom/collectd-exporter/][collectd_exporter]] docker image
  - slightly complicated in Traefik since this image needs to listen on UDP which is only partially implemented in Traefik right now
  - but this may be helped by using =write_http= since it looks like tbhis sends in TCP via HTTP POST
**** or, how about collectd --> telegraf?
**** or, how about setting up dynamic dns so that Prometheus can scrape the way it wants to?
- using Namecheap's dynamic DNS service as detailed [[https://www.namecheap.com/support/knowledgebase/article.aspx/43/11/how-do-i-set-up-a-host-for-dynamic-dns/][here]].

** Enabling statistics
*** Through LuCI:
- in System --> Software, UPDATE LISTS and then install =luci-app-statistics=.  Dependencies will also be installed.
*** Through CLI:
- opkg update 
- opkg install luci-app-statistics
*** install plugins
- =opkg list | grep collectd-mod=
- =opkg install collectd-mod-cpu collectd-mod-interface collectd-mod-memory collectd-mod-ping collectd-mod-rrdtool collectd-mod-wireless=
*** enable daemons
- =/etc/init.d/luci_statistics enable=
- =/etc/init.d/collectd enable=
