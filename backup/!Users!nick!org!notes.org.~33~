# -*- org-image-actual-width: nil; -*-
#+STARTUP: overview
#+OPTIONS: auto-id:t
#+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)
#+SPDX-FileCopyrightText:blah blah
* Applying as contact tracer
:PROPERTIES:
:CUSTOM_ID: h:A3049AAD-CC82-4290-BD06-5A127FC90EEF
:END:
** Different staffing agencies used by VA DOH:
:PROPERTIES:
:CUSTOM_ID: h:34D3A1E5-F4A7-4A1D-9C88-7CEDDE079040
:END:
*** 22nd Century - ended up not applying
:PROPERTIES:
:CUSTOM_ID: h:58280750-1903-4E6F-96C8-239C1822BA47
:END:
*** @WORK Medical & Personnel Services
:PROPERTIES:
:CUSTOM_ID: h:6D0BE838-21C9-489E-97B5-152809119110
:END:
**** @WORK Medical & Personnel Services - couldn't find way to apply on their website!
:PROPERTIES:
:CUSTOM_ID: h:EE580BC1-3F2A-4CE8-A52D-ECDBDDA57EAC
:END:
*** Abacus Corporation [[https://www.abacuscorporation.com/]]  but goes to [[https://secure.jobappnetwork.com/apply/c_abacus/l_en/#s][this]] for application
:PROPERTIES:
:CUSTOM_ID: h:9435EDE9-46F6-4F9B-8C8E-859C8E6F94EE
:END:
**** DONE <2020-06-09 Tue> Apply
:PROPERTIES:
:CUSTOM_ID: h:9A0C46AC-DFEC-4D00-82F4-B7032F82DC57
:END:
**** Applied for Case Investigator - Arlington
:PROPERTIES:
:CUSTOM_ID: h:E28FB4E2-0BD7-4E86-8A98-4FE3EFE8BCBE
:END:
**** Applied for Contact Tracing Supervisor - Arlington
:PROPERTIES:
:CUSTOM_ID: h:413A7860-7B7D-4FD6-ACB3-4030F6AE27AC
:END:
*** Ajilon - couldn't find any Virginia opportunities
:PROPERTIES:
:CUSTOM_ID: h:15B85DB7-E306-423E-92A1-DB02E591F4C0
:END:
*** Astyra - [[https://astyra.com]]
:PROPERTIES:
:CUSTOM_ID: h:55F42B5E-6126-402F-B046-6CB865CD1A4E
:END:
**** DONE <2020-06-09 Tue> Apply
:PROPERTIES:
:CUSTOM_ID: h:48565A8A-E516-4FCE-983F-CCA2E3E5558D
:END:
**** Applied for Contact tracer
:PROPERTIES:
:CUSTOM_ID: h:0ED3CA75-723A-4C8F-BE9B-0B03A67B18D6
:END:
**** Received confirmation email
:PROPERTIES:
:CUSTOM_ID: h:31DDA582-7709-4976-95D3-78668B3E8FEF
:END:
*** Athena Consulting https://athenaconsultingllc.com/
:PROPERTIES:
:CUSTOM_ID: h:117E0BF4-FEEA-4511-8B37-C115A747E42E
:END:
**** DONE Apply for Case Investigator <2020-06-10 Wed>
:PROPERTIES:
:CUSTOM_ID: h:8AC4390C-C2A7-461B-A26F-1D56127FF950
:END:
*** BizTek [[http://biztekpeople.com/]]
:PROPERTIES:
:CUSTOM_ID: h:83F3E4B8-7376-4B59-AB80-620D61D23436
:END:
**** Was partway through submission for Case Investigator, submitted resume but then they asked for the Right to Represent thing, which I already signed for Athena.  They very clearly stated that I could only work with *one* recruiting agency, and I already told Athena they were the ones.  Well, I passed the test for BizTek, but to go any further I had to do the right to represent form so I stopped.
:PROPERTIES:
:CUSTOM_ID: h:D6B51854-BB52-4D00-A8AD-01194E1F986E
:END:
*** Cor-Tech / Caliper [[https://jobs.cor-tech.net]] or [[http://www.cor-tech.net/]]
:PROPERTIES:
:CUSTOM_ID: h:20FE4169-6342-425B-83F4-254289529C62
:END:
**** DONE Apply for Case Investigator Manassass <2020-06-17 Wed>
:PROPERTIES:
:CUSTOM_ID: h:D9F7B504-BD13-44FD-98F8-BF4797DD20D6
:END:
*** Delta Group [[https://www.delta-tgroup.com/]] 
:PROPERTIES:
:CUSTOM_ID: h:0388669D-D778-4618-8B69-83C8D7ADF809
:END:
**** DONE Apply for Case investigator, Loudoun County <2020-06-17 Wed> 
:PROPERTIES:
:CUSTOM_ID: h:1292AFCC-2C36-47B2-A366-3F6E02D551F3
:END:
**** They did not ask me (yet) for one of those Right to Represent things
:PROPERTIES:
:CUSTOM_ID: h:FA400C08-0E2B-40E0-9BD1-1F99F492BC1E
:END:
**** Reveived email confirmation of submission
:PROPERTIES:
:CUSTOM_ID: h:AECE27AE-9C85-4241-BB87-8D0F475061E3
:END:
*** IPHI (Institute of Public Health Innovation (through TalentBoost at [[https://www.talentboost.cloud/iphi]]
:PROPERTIES:
:CUSTOM_ID: h:C0BAB6B5-8883-47CE-82F6-E039F183AEDE
:END:
**** DONE Apply for Community Health Worker Supervisor, Interviewer Supervisor, and Case Interviewer <2020-06-25 Thu>
:PROPERTIES:
:CUSTOM_ID: h:FC9B96B3-5F5B-4AF6-B1F2-EB6AAF000951
:END:
- <2020-06-26 Fri> Still have heard nothing
*** Premier Staffing Source [[https://www.premierstaffingsource.com][Premier Staffing Source]]
:PROPERTIES:
:CUSTOM_ID: h:8D6AEBD1-1EDF-4B17-B0A9-380ADA764EA4
:END:
**** DONE Apply to Premier Staffing <2020-06-26 Fri>
:PROPERTIES:
:CUSTOM_ID: h:0CA7E412-77FF-4DF3-9AF1-B0961A8210AF
:END:
- Received message on screen "A recruiter will be in touch with you shortly."

** Following up:
:PROPERTIES:
:CUSTOM_ID: h:1FFBEC81-FB42-46C5-8A2E-3685AD5E4FC9
:END:
*** TODO contact IPHI / TalentBoost
:PROPERTIES:
:CUSTOM_ID: h:52CDECE4-5A56-4B38-BC62-509B80D687B4
:END:
- To follow up on "Community Health Worker Supervisor with Institute for Public Health Innovation (IPHI)" application (Job # 618)
- IPHI contacts: 
  - phone: 202.747.3512 [[https://www.institutephi.org/contact-us/][contact page]]
  - email: info@institutephi.org - sent email <2020-06-26 Fri>
  - Haha who knows, here's their Twitter: @InstitutePHI
- Talentboost contact:
  - phone on main page: 617-542-1400
  - email: info@talentboost.us  - sent email <2020-06-26 Fri>
*** DONE Contact Athena Consulting 484-477-7747
:PROPERTIES:
:CUSTOM_ID: h:759CE402-B854-41C0-9CC8-FE27FA54B523
:END:
- State "DONE"       from "TODO"       [2020-06-29 Mon 15:06]
- email of contact on VDH staffing agency list ([[https://www.vdh.virginia.gov/content/uploads/sites/182/2020/05/Staffing-Agency-List.pdf][here]]): melvin@athenaconsultingllc.com -- sent email <2020-06-26 Fri>
- phone on same list: 484-477-7747
- Recieved response <2020-06-28 Sun> that my stuff had been forwarded to VDH.  Thanked them!

** Cover sentence
:PROPERTIES:
:CUSTOM_ID: h:3A768ADC-4A09-484A-94FB-863E82174C09
:END:
I am trained as a physician, and I have worked extensively in public mental health.  I have experience working with patients in the community, traveling to their homes for in-person interviews and care. I have led clinical teams in both inpatient and outpatient settings. I believe that patients should feel that they are partners in their own care.

** Cover letter
:PROPERTIES:
:CUSTOM_ID: h:D8AAFF12-7CC9-4A58-9A57-44F8DBCB2A5F
:END:

Dear Recruiting team at Athena Consulting,

My name is Nicholas Taintor, and I am a physician living in Fairfax, Virginia.  I am writing to express my interest in the position of Case Investigator, with the Commonwealth of Virginia COVID-19 contact tracing effort.  I found notification of this position through the VDH website.

I believe that my medical and personal background makes me a strong candidate for this position.  I have spent my career learning how to conduct diagnostic and therapeutic interviews in a way that is empathic, sensitive, and mindful of confidentiality.  I understood early in my training that without a person's trust, there was little chance that they would follow my suggestions, no matter how correct or well-meant they might be.

I have a strong interest in medical informatics and have worked with a number of different electronic health record systems. I have contributed code and knowledge to a program helping to promote the use of the Veterans Administration electronic health record (VistA / CPRS) around the world.  These skills will help me document and present all of my interactions with, and findings from, persons believed to be infected with COVID-19.

In my view, the best kind of medicine and care happen when colleagues work with and learn from each other.  Helping to put a team together and learning how to work as a cohesive unit has always been my favorite part of any new job, and I look forward to being able to practice those skills. 

Although my residency training was in psychiatry, at New York University we were granted some leeway in our training.  Unlike most of my psychiatric colleagues, I asked for clinical rotations in medicine, infectious diseases, and oncology.  I spent three months working in the ICU at Bellevue Hospital helping to treat patients in advanced phases of illness.  I was the primary physician for a patient with one of the first locally-acquired cases of fulminant malaria seen in New York for years, and worked with epidemiologists to clarify the origins of that case. 

I have spent much of my medical career working in public health, and usually with people who are underserved by existing medical systems.  Learning how to earn the trust and partnership of people who might have a natural and understandable mistrust of medicine and authority is not easy or simple.  But it is the most important part of the process.

I trained at Bellevue Hospital in New York City, which is (in my view) the most vital public health institution in that city.  This is a place where people come when they do not have health insurance and often lack many other types of social support.  I learned from the best, there, about how to bring people in from the community and help them realize the ways in which they could get better.  I worked in the Free Clinic at Bellevue during medical school and residency and began to understand how to work with a diverse community of people who were very different from me.

Helping people to change their behavior is the basis of any worthwhile medical intervention.  Sometimes this is something simple, such as getting people to stop doing something that is hurting them such as smoking or excessive alcohol consumption.  At other times this is more complex - getting people to do something difficult and unpleasant with an unclear and distant payoff.  

During this COVID-19 pandemic, and as part of the contact tracing program, we will be asking people to isolate or quarantine themselves for the good of others.  This will require ongoing care and relationship-building with people who will be in a difficult and frightening situation - in a crisis, to put it simply.  I believe that my previous experience, along with my desire and willingness to learn more, will make me a valuable part of this program.

I will be ready to put my skills to work for the Commonwealth of Virginia, and more importantly to learn how I can contribute best to the effort.  I look forward to being a part of this important project.

I would like to thank you for taking the time to look through my application materials.


Nicholas Taintor

** From job overview for case investigator:
:PROPERTIES:
:CUSTOM_ID: h:67B5AEBF-66AA-4CBC-A699-E5FD387E62D3
:END:
*** Core duties:
:PROPERTIES:
:CUSTOM_ID: h:FF16ECBB-B893-49CF-B7D2-23E41A75DE36
:END:
**** Interviewing and data collection
:PROPERTIES:
:CUSTOM_ID: h:0EC79724-EF23-403D-8D86-5DD026BB5B74
:END:
***** Communicates with contacts in professional and empathic manner
:PROPERTIES:
:CUSTOM_ID: h:1E2CDCA5-C03D-4ACC-B5B6-624C089D275B
:END:
***** Collects and records information into statewide database
:PROPERTIES:
:CUSTOM_ID: h:718216AE-1179-4BDF-AB3A-54FDF1DA0D39
:END:
**** Heath Education
:PROPERTIES:
:CUSTOM_ID: h:38FAFD83-0171-4416-891F-9B4936F77EED
:END:
***** Provides cases with approved information about state isolation procedures and monitors compliance
:PROPERTIES:
:CUSTOM_ID: h:3D331410-D410-4C5F-9118-E05CAEEECB63
:END:
***** Alerts epidemiologists if the case is associated with a congregate or other high-risk setting
:PROPERTIES:
:CUSTOM_ID: h:1D0DBA4C-CB11-48D0-BB02-1898027FF0E4
:END:
***** Providing ill person with resources 
:PROPERTIES:
:CUSTOM_ID: h:595DFD1C-E657-4ED2-B819-F9EDBB330CF8
:END:
**** Data entry and maintenance
:PROPERTIES:
:CUSTOM_ID: h:23B41D0D-79EB-4FFA-8F57-3A7F62FBF8B8
:END:
***** Uses established database(s) to identify newly diagnosed patients
:PROPERTIES:
:CUSTOM_ID: h:B15AE7D6-A6B7-40ED-A243-32B462ABA096
:END:
***** Inputs data collected into database and keeps database up to date
:PROPERTIES:
:CUSTOM_ID: h:3155EF09-2E20-47AA-ADA5-B8037D8BB6D4
:END:
***** Provides data from case investigation efforts to epidemiologists and / or Health Educators as necessary
:PROPERTIES:
:CUSTOM_ID: h:DC8A3DBA-7503-421A-A583-F1B75FCF2D30
:END:
*** KSAs
:PROPERTIES:
:CUSTOM_ID: h:BD03D751-351F-494F-8389-DED6BBAABE3F
:END:
**** Knowledge of public health practices, communicable diseases, disease control, epidemiologic methods
:PROPERTIES:
:CUSTOM_ID: h:9078931F-F110-4E37-9B24-A8C5F7C8F434
:END:
**** Ability to manage, compile, analyze, and present data
:PROPERTIES:
:CUSTOM_ID: h:78D97B6F-FD4D-4821-8C81-9D4ED0F615EE
:END:
**** Ability to communicate clearly both orally and in writing with diverse audiences
:PROPERTIES:
:CUSTOM_ID: h:B50AB57E-9F05-4A88-8ADF-B374B0D77178
:END:
**** Ability to work with a variety of computer packages
:PROPERTIES:
:CUSTOM_ID: h:7B14DAE6-1C71-4018-AA16-80065B4A6BB5
:END:
**** Understanding of patient confidentiality
:PROPERTIES:
:CUSTOM_ID: h:3268BCA2-892A-42E3-B404-5157BB0F0E0D
:END:
**** Excellent and sensitive interpersonal, cultural sensitivity, and interviewing skills to maintain trust with interviewees; judgement to refer cases if needed
:PROPERTIES:
:CUSTOM_ID: h:5A62DB93-7E6D-4FEF-8A5C-30C2B085DD80
:END:
* Messing with emacs-reveal
:PROPERTIES:
:CUSTOM_ID: h:8DFF024C-1E14-461A-BB3B-5DEAC5DEAFBE
:END:
** Looks like I need to find a way to add that configuring javascript at the end
:PROPERTIES:
:CUSTOM_ID: h:D1DA1996-448F-42F8-B80F-DDC5CD22CE82
:END:
** Audio:
:PROPERTIES:
:CUSTOM_ID: h:C9BB4186-BA8B-48B8-B758-48BC72676AAA
:END:
- Here's a way to change the audio config at the beginning:
#+begin_src 
# Set autoplay to true for audio plugin.
#+OER_REVEAL_AUDIO_SLIDESHOW_CONFIG: audioStartAtFragment: true, audio: { advance: -1, autoplay: true, defaultDuration: 0, defaultAudios: false, playerOpacity: 0.8, playerStyle: 'position: fixed; bottom: 9.5vh; left: 0%; width: 30%; height:30px; z-index: 33;' }

#+end_src

** Incorporating license data
:PROPERTIES:
:CUSTOM_ID: h:B09A18A1-281F-43A3-B721-C9B9476F93B4
:END:
**** Trying to figure out a way to:
:PROPERTIES:
:CUSTOM_ID: h:5608FAFD-2660-46C4-99E5-A41B02AA637B
:END:
Extract and put in license information in image metadata
   - Exiftool - FOSS, mac & Linux
   - mac CLI: [[https://exiftool.org/][exiftool]] - FOSS. =Brew install exiftool=
   - Ubuntu: =sudo apt install libimage-exiftool-perl=
   - Here's an example of how to put information into an image using =exiftool=:
#+begin_src bash
exiftool -ImageDescription="This is an image from the book Frankiesaurus and the Helpful Spider" -Artist="Nick Taintor" \
> -Copyright="This work is licensed under the Creative Commons Attribution ShareAlike 4.0 International License. \
dquote> To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/ or send a \
dquote> letter to Creative Commons, PO Box 1866, Mountain View, CA 94042 USA." \
-XMP-cc:License="http://creativecommons.org/licenses/by-sa/4.0/" okpops.png
#+end_src
**** Here's a package that could be useful:
:PROPERTIES:
:CUSTOM_ID: h:953913B2-6C23-4129-84E9-C8392A7CE721
:END:
[[https://github.com/emacsmirror/exiftool][exiftool.el]] is an elisp wrapper around ExifTool

**** emacs-reveal .meta file components:
:PROPERTIES:
:CUSTOM_ID: h:0CF9C3AB-E32D-4C4C-9A30-E4591E832DEC
:END:
example: 
((filename . "./figures/data-structures/block-chain.png")
 (licenseurl . "https://creativecommons.org/licenses/by-sa/4.0/")
 (licensetext . "CC BY-SA 4.0")
 (cc:attributionName . "Jens Lechtenbörger")
 (cc:attributionURL . "https://gitlab.com/lechten")
 (dc:source . "https://gitlab.com/oer/figures/blob/master/data-structures/tikz/block-chain.tex")
 (sourcetext . "GitLab")
 (dc:title . "Block chain of transactions")
 (texwidth . 0.9)
)



3) develop a workflow to put that information into an emacs-reveal .meta file
* Background checks
:PROPERTIES:
:CUSTOM_ID: h:DF8B4FC3-F99B-4851-8E13-26D5F2EE1A8A
:END:
** DONE hireright confirmation # 02328936 said 15 days
:PROPERTIES:
:CUSTOM_ID: h:9D4D71C8-FF29-4229-96D7-61344A4EFCA6
:END:
- State "DONE"       from "TODO"       [2020-07-07 Tue 11:37]
- Received response <2020-07-21 Tue> that they had no record of anyone requesting info from them, so nothing to give me
** Allegedly nothing at Empinfo
:PROPERTIES:
:CUSTOM_ID: h:88761205-8E4D-4BDF-9FCE-9E22D067F814
:END:
** Kept getting errors with Equifax
:PROPERTIES:
:CUSTOM_ID: h:167D1BE6-E840-4D05-9AB8-2EB299E64501
:END:
** DONE PeopleFacts
:PROPERTIES:
:CUSTOM_ID: h:1511B086-46C5-404A-AC41-AB93824AE5FB
:END:
- State "DONE"       from "TODO"       [2020-07-07 Tue 11:54]
- Response one week later - "unable to locate a report"
** DONE InfoCubic
:PROPERTIES:
:CUSTOM_ID: h:60B14E50-46A6-4E70-9DD5-ED302C5D2929
:END:
- State "DONE"       from "TODO"       [2020-07-07 Tue 12:00]

* CompTIA class site
:PROPERTIES:
:CUSTOM_ID: h:9C58F2BA-F088-43C2-BAEC-5CF74CC19685
:END:
- <2020-07-11 Sat> temporarily running it under frankie.monster, having some weird issues with my pepsidotcom.com url  **resolved**
- <2020-07-16 Thu> now living at *index.org* in *sessionone* directory, straight export to HTML
- 
* Eternal Terminal ([[https://eternalterminal.dev/][site]])
:PROPERTIES:
:CUSTOM_ID: h:1B584B32-E782-481C-B601-DC80DC7CFB08
:END:
(Remote terminal for the busy and impatient)
** Macos:
:PROPERTIES:
:CUSTOM_ID: h:1E83C956-1ABE-4794-9F8F-4A946A392257
:END:
- =brew install MisterTea/et/et=
** Ubuntu:
:PROPERTIES:
:CUSTOM_ID: h:3064E144-C049-4A32-A199-2016BA30573C
:END:
- =sudo apt-get install -y software-properties-common=
- =sudo add-apt-repository ppa:jgmath2000/et=
- =sudo apt-get update=
- =sudo apt-get install et=
  - open port 2022/TCP (default =et= port)
** Use:
:PROPERTIES:
:CUSTOM_ID: h:A8624276-9058-4A80-8DF4-7BE0DAF61743
:END:
=et user@hostname[:port]=
ET will automatically use the =ssh_config= file when making connections
** Then I started getting these errors (only when trying to connect to dudley, not falkie):
:PROPERTIES:
:CUSTOM_ID: h:956DF14E-BEDF-4AE6-9C6D-7C359DECD1E3
:END:
#+begin_src bash
[INFO 2020-10-15 06:47:21,575 client-main TerminalClientMain.cpp:172] Parsed ssh config file, connecting to brainsled.xyz
[V1 2020-10-15 06:47:21,575 client-main TerminalClientMain.cpp:11] Connecting
[INFO 2020-10-15 06:48:36,694 client-main TcpSocketHandler.cpp:59] Error connecting with brainsled.xyz: 60 Operation timed out
[ERROR 2020-10-15 06:48:36,841 client-main TcpSocketHandler.cpp:140] Stack Trace:
[0] 0x0000000101e06516 et::TcpSocketHandler::connect(et::SocketEndpoint const&)
[1] 0x0000000101da0c95 ping(et::SocketEndpoint, std::__1::shared_ptr<et::SocketHandler>)
[2] 0x0000000101da349e main
[3] 0x00007fff686e3cc9 start
[4] 0x0000000000000006 0x0
ERROR, no host found
[V1 2020-10-15 06:48:36,841 client-main TerminalClientMain.cpp:14] Could not connect to host
Could not reach the ET server: brainsled.xyz:2022
#+end_src
* Matrix/Jitsi
:PROPERTIES:
:CUSTOM_ID: h:6C7E7FEC-B58A-44FF-81AA-1BFFEBDCDAE5
:END:
** Jitsi on its own
:PROPERTIES:
:CUSTOM_ID: h:7895099D-6EFB-473E-9584-F9DA55F4DF46
:END:
*** [[https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-quickstart][Jitsi self-hosting guide]]
:PROPERTIES:
:CUSTOM_ID: h:74187B03-F5A6-4E1B-85F9-11A9A62D3209
:END:
*** updating Prosody - a bunch of features need Prosody 0.11.2+
- discussion of this: https://community.jitsi.org/t/how-to-how-do-i-update-prosody/72205
- find Prosody version: =apt list -a prosody=
- to update after Jitsi Meet has been installed:
  - add repo to =sources.list=:
     =echo deb http://packages.prosody.im/debian $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list=
  - get packages key:
    =wget https://prosody.im/files/prosody-debian-packages.key -O- | sudo apt-key add -=
  - update repositories:
    =sudo apt-get update=
  - update prosody:
    =sudo apt-get install prosody=
  - in =/etc/prosody/prosody.cfg.lua=:
    - comment out =VirtualHost "localhost"=
    - last line should be =Include "conf.d/*.cfg.lua"=
  - throughout =/etc/prosody/conf.avail/meet.fob.monster.cfg.lua=
    - replace =storage = "none"= with =storage = "memory"=
*** Good tutorial for setup and troubleshooting on jitsi forums [[https://community.jitsi.org/t/how-to-to-setup-integrated-jitsi-and-jibri-for-dummies-my-comprehensive-tutorial-for-the-beginner/35718/4][here]]
*** jitsi stats, grafana: [[https://tweenpath.net/install-grafna-influxdb-telegraf-jitsi-video-meet-monitoring-debian-10/][here]]
*** stress testing jitsi:
- [[https://github.com/jitsi/jxs][JXS]] - stress testing prosody and jicofo
- jitsi-hammer (outdated)
- malleus-jitsificus and a Selenium grid: [[https://community.jitsi.org/t/tutorial-loadtesting-jitsi-with-malleusjitsificus-on-a-selenium-grid/33302][this community discussion]]
*** changing logo
- logo is located at =/usr/share/jitsi-meet/images/watermark.png=
*** changing other things in interface
- Most aspects of the interface are defined in =/usr/share/jitsi-meet/interface_config.js=
*** Integrating calendar; sprucing up the welcome page; pre-join page
**** calendar integration:
- in =/etc/jitsi/meet/meet.fob.monster-config.js=:
  =enableCalendarIntegration: true=
- <2020-12-05 Sat> turned off calendar integration; value questionable, involved Google, also went throguh my calendar and applied a jitsi meet url for every meeting!
**** pre-join page
- pre-join page: in =/etc/jitsi/meet/meet.fob.monster-config.js= uncomment =// prejoinPageEnabled: false= and set it it =true=
  - then restart everything (=systemctl restart prosody nginx.service jicofo.service jitsi-videobridge2.service=)
  - or, can add =#config.prejoinPageEnabled=true= to the meeting link you send, i.e. =https://meet.fob.monster/pinegrove#config.prejoinPageEnabled=true=
  - community discussion here: https://community.jitsi.org/t/how-to-how-do-i-use-the-prejoin-page/73326
**** lobby:
- need to change prosody config at =/etc/prosody/conf.d/meet.fob.monster.cfg.lua=
- *important*: only do this change under =VirtualHost "guest.meet.fob.monster"= part of the config, not the main =meet.fob.monster= VirtualHost.
- put this in there
#+begin_src bash
VirtualHost "guest.meet.fob.monster"
    authentication = "anonymous"
    c2s_require_encryption = false
    modules_enabled = {
            "muc_lobby_rooms";
        }

    lobby_muc = "lobby.meet.fob.monster"
    main_muc = "conference.meet.fob.monster"

Component "lobby.meet.fob.monster" "muc"
    storage = "memory"
    restrict_room_creation = true
    muc_room_locking = false
    muc_room_default_public_jids = true
#+end_src
- then you need to remove all references to the =lobby= component from =VirtualHost "meet.fob.monster"= section, or things will crash
*** In =LXC=:
:PROPERTIES:
:CUSTOM_ID: h:18A28B1B-80DF-42DA-BF82-FC7CE558F4F7
:END:
**** put the FQDN in the =/etc/hosts= file, in the =jitsi= LXC container
:PROPERTIES:
:CUSTOM_ID: h:E8C38352-BF2A-4EF1-8754-3E4B9DFDB7CB
:END:
- and using =hostnamectl=: =sudo hostnamectl set-hostname jitsi=
**** <2020-10-14 Wed 16:31> trying to set up jitsi-meet on dudley with =jitsi.fob.monster=
:PROPERTIES:
:CUSTOM_ID: h:07B409D8-03DD-44A2-A7D2-F0AE7B79F363
:END:
1. FQDN defined in /etc/hosts and =hostnamectl=
2. Jitsi LXC installed with LXC profile jitsi-profile, which:
   1. has =gnupg2=, =build-essential=, =nginx=, =nginx-common=, and =apt-transport-https= already installed
3. Apache2 already installed:
   =apt install apache2=
4. /After/ Jitsi install, changed Apache config at =/etc/apache2/apache2.conf= (actually didn't have to change)
5. Put this in =/etc/jitsi/videobridge/sip-communicator.properties=:
   #+begin_src bash
org.ice4j.ice.harvest.NAT_HARVESTER_LOCAL_ADDRESS=10.215.36.63
org.ice4j.ice.harvest.NAT_HARVESTER_PUBLIC_ADDRESS=45.79.138.21
org.jitsi.videobridge.NAT_HARVESTER_LOCAL_ADDRESS=10.215.36.63
org.jitsi.videobridge.NAT_HARVESTER_PUBLIC_ADDRESS=45.79.138.21
   #+end_src
  *and* comment out =org.ice4j.ice.harvest.STUN_MAPPING_HARVESTER_ADDRESSES==blahblah
   (is supposed to be ~LOCAL_ADDRESS=[localip]~ and ~PUBLIC_ADDRESS=FQDN~, I /think/)
6. security through HAProxy, not the Jitsi nginx - but it needs you to set up a certificate in the install so I selected generate self-signed
7. ports 80 and 443 and 4443 through HAProxy but from haproxy goes to :80 - if I try to send it through :443 in haproxy.cfg, "server unavailable"
8. port 10000/udp through LXC device configure
   Issues: couldn't complete connection through firefox, error "the page isn't redirecting properly" - 301 with =curl=
   solution: add =http-response replace-value Set-Cookie (.*) 1; Secure= to frontend
     When testing with just an nginx server (before installing jitsi-meet), needed to have nginx listen on port 443 - set in =/etc/nginx/sites-available/jitsi.fob.monster.conf=

     looking at jitsi-meet.conf in =/usr/share/jitsi-meet-turnserver=

**** Steps from [[https://community.hetzner.com/tutorials/jitsi-meet-on-debian-ubuntu][Hetzner tutorial]]:
:PROPERTIES:
:CUSTOM_ID: h:1E1896EE-E0A9-4341-B898-16DC0F263CF7
:END:
1. add repository,update, install =apt-transport-https=
   - echo 'deb https://download.jitsi.org stable/' > /etc/apt/sources.list.d/jitsi-stable.list
   - wget -qO - https://download.jitsi.org/jitsi-key.gpg.key | apt-key add -
2. configure hostname - they say =hostnamectl set-hostname talk=, i.e. just the first part of the FQDN.  Also to put =talk.example.com= in =/etc/hosts=, i.e. the FQDN there
3. Install webserver first - they say =apt-get install nginx -y=, to avoid problems with the server Jitsi installs - nginx or jetty
4. [later note] update prosody *before* installing Jitsi Meet - from [[https://community.jitsi.org/t/how-to-how-do-i-update-prosody/72205][this community note]]:
   - Add repo to =sources.list=
     =echo deb http://packages.prosody.im/debian $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list=
   - get packages key
     =wget https://prosody.im/files/prosody-debian-packages.key -O- | sudo apt-key add -=
   - update
     =sudo apt-get update=
   - install latest
     =sudo apt-get install prosody=
   - then move on to install =jitis meet=
5. Install jitsi meet - =apt-get install jitsi-meet -y=, select self-signed certificate
6. Modify shipped nginx config - =/etc/nginx/sites-available/talk.example.conf=, for us =/etc/nginx/sites-available/meet.fob.monster.conf=
   - remove lines starting with =ssl_certificate= and =ssl_certificate_key=, replace with
     #+begin_src bash
ssl_certificate /etc/letsencrypt/live/meet.fob.monster/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/meet.fob.monster/privkey.pem;
ssl_trusted_certificate /etc/letsencrypt/live/meet.fob.monster/chain.pem;
     #+end_src
   - [could put in IPv6 support here]
   - Change TLS configuration - replace line starting with =ssl_protocols= with =ssl_protocols TLSv1.2 TLSv1.3;=
7. in =/etc/jitsi/meet/meet.fob.monster-config.js=:
   - uncomment and change =// disableThirdPartyRequests: false= to =true=
   - add more than one STUN server under =stunServers= (list available at this [[https://gist.github.com/mondain/b0ec1cf5f60ae726202e][Github gist]]).  (could someday host our own [[https://community.hetzner.com/tutorials/install-turn-stun-server-on-debian-ubuntu-with-coturn][coturn server]]) Suggested by Hetzner:
     #+begin_src bash
{ urls: 'stun:stun.nextcloud.com:443' },
{ urls: 'stun:stun.stunprotocol.org:3478' },
{ urls: 'stun:meet-jit-si-turnrelay.jitsi.net:3478' }
     #+end_src
8. Then restart everything =systemctl restart prosody nginx.service jicofo.service jitsi-videobridge2.service=

**** from this useful [[https://www.reddit.com/r/jitsi/comments/if5gdv/guide_to_installuse_jitsi_in_an_lxd_container/][reddit post]]:
:PROPERTIES:
:CUSTOM_ID: h:B0A7A3FF-EAD0-49B6-9BB7-962C8B2C3DC0
:END:
1. points out utility of =echo 'export EDITOR=nano' >> ~/.profile= in LXC host
2. make new LXD profile:
   - =lxc copy default jitsi-profile=
   - =lxc profile edit jitsi-profile=
   - His profile suggestion:
     #+begin_src yaml
config:
  user.network-config: |
    version: 2
    ethernets:
      eth0:
        addresses:
        - 192.168.1.200/32
        nameservers:
          addresses:
          - 8.8.8.8
          search: []
        routes:
        -   to: 0.0.0.0/0
            via: 169.254.0.1
            on-link: true
description: Default LXD profile
devices:
  eth0:
    ipv4.address: 192.168.1.200  # or whatever you choose (this will be the ip address of the container)
    nictype: routed
    parent: enp6s0  # change to name of host nic, i.e. eth0 or whatever it is
    type: nic
name: # [can't change this anyway]
used_by: # or this, either I think 
     #+end_src
3. Create new LXD container, can *add* the new profile to =default= - wow, I didn't know that!
4. So, could be:
   =lxc launch ubuntu:20.04 jitsi --profile default --profile jitsi-profile=
5. Look it over with =lxc list=
6. Then follow the [[https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-quickstart][same Jitsi guide]] I've been using, with these changes:
   - if behind a proxying server (which I guess HAProxy counts as?) remove =/etc/nginx/modules-enabled/60-jitsi-meet.conf=
   - Then go to /etc/nginx/sites-available/your-conf and change it to listen on 443 instead of 4444 and restart nginx
7. And there we go!     

     
**** <2020-10-14 Wed 20:18> trying this out of desperation and fatigue: https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-docker
:PROPERTIES:
:CUSTOM_ID: h:8783391A-53BF-408A-9AA3-157E66848F7E
:END:
(instead I couldn't get it to work - and used up my letsencrypt allowance! Problem seemed to have to do with jvb not making connections.  I think the docker implementation is still a bit of a mess, and honestly LXC really seems like a better choice.  Integrating those many parts may be beyond a pre-designed docker-compose setup.  I'm more of a fan of [[https://git.luddites.tech/ludd/deployments/src/branch/main/traefik/apps/jitsi/docker-compose.yml][this guy's]] docker-compose setup with Traefik v2.  If anything could work, maybe this - he said it did in Sept)

<2020-10-15 Thu 04:29>I think the key will be this guy's use of Apache with HAProxy instead of Nginx - [[https://forum.netgate.com/topic/152738/jitsi-ssl-offload-haproxy-not-working/3][here]].  Seems like all the redirects I was having might be due to the https redirection setup by the Jitsi install.  I'll try his tomorrow!

dealing with this: =Error binding encrypted port for https: No certificate present in SSL/TLS configuration for https port 5281= in prosody logs
- Dealt with that by uncommenting =https_ports = { }= in file =/etc/prosody/conf.d/jitsi.fob.monster.cfg.lua= - really just blocks the error messages, turns out they do not reflect an underlying problem as discussed [[https://community.jitsi.org/t/no-certificate-present-in-ssl-tls-configuration-for-https-port-5284/47836/6][here]].

added =xmpp= to this line ~JVB_OPTS="--apis=xmpp,"~ in =/etc/jitsi/videobridge/config= to address crashing when users join, mentioned [[https://wiki.archlinux.org/index.php/Jitsi-meet#Tips_and_tricks][here]]

BOSH check works - =https://jitsi.fob.monster/http-bind= - "It works!"

Did a =diff= of the example Apache conf file and =/etc/apache2/sites-available/jitsi.fob.monster.conf= - no differences, only in host names

**** Remove all jitsi-meet components:
:PROPERTIES:
:CUSTOM_ID: h:81699EAA-C8F8-42ED-A4EB-74E96D545BC4
:END:
apt-get purge jigasi jitsi-meet jitsi-meet-web-config jitsi-meet-prosody jitsi-meet-turnserver jitsi-meet-web jicofo jitsi-videobridge
- and =nginx=:
  sudo apt-get purge nginx nginx-common
** sources for build with Docker:
:PROPERTIES:
:CUSTOM_ID: h:07517AD3-92D4-40D8-B19F-B185C8C33F29
:END:
- using mostly [[https://dev.to/joenas/matrix-homeserver-synapse-v09911-with-traefik-35ja][Jon Neverland's build]], but his model was built with Traefik 1.0
- Also, I put all the various accompanying directories right off ~/docker/containers/matrix rather than off /opt/matrix the way he did
- will install ma1sd identity server from its [[https://github.com/ma1uta/ma1sd][Github repo]]
  - (but will do it later - will probably need to add =m.identity_server= in =./matrix/nginx/www/.well-known/matrix/client=)
** jitsi components to stop / restart:
:PROPERTIES:
:CUSTOM_ID: h:0165DA80-7EFC-4998-A9E1-446BBEC56A85
:END:
prosody
jicofo
jitsi-videobridge2
** trying a thing <2020-07-27 Mon>
:PROPERTIES:
:CUSTOM_ID: h:B0A5DF55-C44A-4ADC-AD3B-A5AA7127551E
:END:
- Trouble (seems) to be with videobridge.  When I exec'd into the container yesterday, ~/etc/init.d/jitsi-videobridge2 status~ returned FAIL
- I could restart it manually within the container, but what's the point?
- Followed various Github issues, including [[https://github.com/jitsi/docker-jitsi-meet/issues/573][this one]], but my issue still not resolved
- So I decided I would build the whole thing on metal on Dudley so that I can compare things.
- Using [[https://matrix.org/blog/2020/04/06/running-your-own-secure-communication-service-with-matrix-and-jitsi][this]] off the main matrix site, following their Debian installation guide
- following instructions [[https://github.com/matrix-org/synapse/blob/develop/docs/postgres.md][here]] to change synapse database to postgres
- seemed to work; had to put =server_name= in homeserver.yaml
** setting up secured site
:PROPERTIES:
:CUSTOM_ID: h:853CADDF-EB47-4665-9B03-7D84C98D55ED
:END:
- mostly from [[https://crosstalksolutions.com/how-to-enable-jitsi-server-authentication/][here]]
- edit ~lua~ file:  =sudo nano /etc/prosody/conf.d/meet.fob.monster.cfg.lua=
- change line =authentication = "anonymous"= to =authentication = "internal_plain"=
  - change it back to un-secure the server
- in =/etc/jitsi/meet/meet.fob.monster-config.js=, put in =anonymousdomain: 'guest.meet.fob.monster',= under line =// When using authentication, domain for guest users.=
  - then, comment that line if you want to remove authentication
- Put this line in =/etc/jitsi/jicofo/sip-communicator.properties=
  org.jitsi.jicofo.auth.URL=XMPP:meet.fob.monster
  - (take it out if removing authentication)
  - jicofo is the conference focus; this line means that Jicofo will accept conference allocation requests /only/ from the authenticated domain
    
- then register a user and password:
  - =sudo prosodyctl register nick jitsi.brainsled.xyz bannanablanketsmoke= (for example)
- bannanablanketsmoke
** Back to trying Jitsi with Docker
:PROPERTIES:
:CUSTOM_ID: h:A62A152E-9453-4B97-9AD2-17C9FAF637B3
:END:
- <2020-07-30 Thu> Based on [[https://community.jitsi.org/t/traefik-and-docker-install/23551/42][this jitsi.org thread]] (last post May 27th) a fundamental problem is getting jvb to work over UDP with Traefik
  - But keep looking at that thread and successors
** So the question that goes through my mind now is:
:PROPERTIES:
:CUSTOM_ID: h:0ED1DE6B-E3A5-45A1-AF70-A751EAD65180
:END:
- can we figure out a way to have matrix / jitsi baremetal and traefik live together?
** Trying to set it all up behind Traefik
:PROPERTIES:
:CUSTOM_ID: h:A5E28C95-6A0E-40B1-839E-5CD870E51096
:END:
*** Ports needed for jitsi:
:PROPERTIES:
:CUSTOM_ID: h:E94F956A-D928-4304-AB5F-DA114505E051
:END:
- (seem to no longer need whole UDP range 10000-20000)
- =80 TCP= - SSL certificate verification / LE renewal
- =443 TCP= - general access to Jitsi Meet
- =4443 TCP= - fallback network video / audio communications (i.e. when UDP is blocked)
- =10000 UDP= - general network video/audio communications
*** setting up port intercept / diversion in traefik dynamic conf:
:PROPERTIES:
:CUSTOM_ID: h:DE1D9FE1-4551-42CB-B34B-94F1146316CD
:END:
#+begin_src yaml
http:
  routers:
    jitsi_router:
      entryPoints:
        - "websecure"
      rule: "Host(`jitsi.brainsled.xyz`)"
      service: "jitsi_service"
      tls:
        certResolver: "letsencrypt"

  services:
    jitsi_service:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: "http:45.79.138.21:4444"
#+end_src
*** setting up custom port location in jitsi conf files
:PROPERTIES:
:CUSTOM_ID: h:DCAD9DC6-AB49-44AA-A444-21B056898ABE
:END:
**** in =/etc/nginx/sites-available/jitsi.brainsled.xyz.conf=
:PROPERTIES:
:CUSTOM_ID: h:9E44E3D9-008E-41D1-91C8-FB9BED8441B2
:END:
- /change all =80= to 4442/ - undone <2020-09-23 Wed>
- change all =443= to 44443
- server name is =jitsi.brainsled.xyz=
**** in =/etc/jitsi/meet/jitsi.brainsled.xyz-config.js=
:PROPERTIES:
:CUSTOM_ID: h:05858E95-AB9C-42B8-8763-C262D985DD63
:END:
- change =bosh= lines:
  - =bosh: '//jitsi.brainsled.xyz:44443/http-bind',=
  - =return 301 https://$host:44443/$request_uri;=
**** seeing what is listening to ports:
:PROPERTIES:
:CUSTOM_ID: h:9630640F-0853-46A8-A2D5-D20BF22690CC
:END:
- =sudo netstat -plnt=
- filter to things listening to port 80:
  - =sudo netstat -plnt | grep ':80'=
*** error: no valid ssl cert
:PROPERTIES:
:CUSTOM_ID: h:B4F36E9F-F682-4424-99F1-EC442B440D4C
:END:
- this cert problem seemed to be from Traefik trying to talk to jvb over HTTP.
- I put =insecureSkipVerify: true= into static config.
  - This is said to have security implications, namely that it leaves you open to MITM attacks.  But since both processes are in the same machine, I'm less worried about this.
  - However, will need to fix!
  - Presumably by figuring out how to give the jitsi stuff its own internal cert?
*** <2020-09-23 Wed> now running, sort of -
:PROPERTIES:
:CUSTOM_ID: h:65AB4B46-5CCE-46D2-BF94-8F17C83AB4AD
:END:
- stuff comes up but connection is dropped in a few minutes, no one can join
- This all looks oddly familiar, and I believe is due to no connection being made over port 10000 to jvb.
  - Will need to figure out how to forward port 10000 through Traefik.  Currently only 443 going through.

* LXC / LXD
:PROPERTIES:
:CUSTOM_ID: h:9F08CCFB-BB26-4BBA-B893-DBD9D72990D4
:END:
** cloud-init
:PROPERTIES:
:CUSTOM_ID: h:32CEED0C-7C7E-4325-8686-0E7F192EB915
:END:
- want to use an image that is set up for cloud-init, so we can set a custom network configuration - supposedly all the ones on =ubuntu:= are set up with =cloud-init= (i.e. not necessarily the ones on =images:=)
  - Though it looks like now the ones on =images:= have versions with =cloud-init= support, with the alias =/cloud=
  - so you can find them with =lxc image list images:ubuntu/focal/cloud= for example
- once again, using [[https://blog.simos.info/how-to-preconfigure-lxd-containers-with-cloud-init/][Simos' blog]] to help with this
** first, set up a cloud-init profile
:PROPERTIES:
:CUSTOM_ID: h:B9F1B9DB-4110-4E8D-A15C-321ECA8D0DD8
:END:
*** look at pre-existing profiles:
:PROPERTIES:
:CUSTOM_ID: h:E1E659C5-3FC2-4701-AD36-CEB49CD4B163
:END:
=lxc profile list=
*** probably only default, so
:PROPERTIES:
:CUSTOM_ID: h:AB62C64A-586D-4B0C-8DEC-EA9DF7A463D8
:END:
=lxc profile copy default [new profile]=
or,
=lxc profile copy default jitsi-profile=
*** (don't forget =export EDITOR=nano=)
:PROPERTIES:
:CUSTOM_ID: h:364C1DC9-C0F6-4359-BC1A-843E99D0A9E9
:END:
*** then,
:PROPERTIES:
:CUSTOM_ID: h:08A48E8C-A72D-4FCA-B698-F70BEDE7E40D
:END:
=lxc profile edit jitsi-profile=
- change the =description=
- for now, leave =devices= as it is
  - (can't change =name=)
*** Here's a profile file:
:PROPERTIES:
:CUSTOM_ID: h:3A9436F8-0D57-44A4-8FAB-8034428BCB0B
:END:
#+begin_src yaml
config:
  user.user-data: |
    #cloud-config
    package_upgrade: true
    packages:
      - build-essential
      - nginx
      - nginx-common
      - gnupg2
      - apt-transport-https
      - net-tools
    locale: es_ES.UTF-8
    timezone: America/New_York
    runcmd:
      - [touch, /tmp/nick_was_here]
description: Jitsi-Meet profile
devices:
  eth0:
    name: eth0
    network: lxdbr0
    type: nic
  root:
    path: /
    pool: lxc_pool
    type: disk
name: jitsi-profile
used_by: []
#+end_src
* HAProxy & LXD
:PROPERTIES:
:CUSTOM_ID: h:E6276073-9930-48E5-8AD8-3DF3E8233271
:END:
- Since I feel like Jitsi & Matrix work better (for me, anyway) as a non-Dockerized service and I'm having trouble setting them up behind Traefik that way, and it's hard to figure out how to share ports 80 and 443, how about running Jitsi / Matrix in a linux container and having HAproxy decide which packets go where?  Why not indeed?
*** Installing LXD
:PROPERTIES:
:CUSTOM_ID: h:68108AC7-FB08-4AD9-8394-ADE583925134
:END:
- [[https://blog.simos.info/how-to-initialize-lxd-again/][This]] is a helpful website for dealing with some of the errors I had.
- [[https://linuxcontainers.org/lxd/][The main pages for LXD and LXC]]
- LXD = container hypervisor
  - /install: =sudo apt install lxd= - (select 4.0)/
  - <2020-09-27 Sun> now using snap instead - don't use the PPA!
    - turns out need to install 4.0 channel specifically, and more specificaly 4.6):
      - =snap install lxd --channel=4.6/stable=
        - and to update from earlier channels if you installed them, =sudo snap refresh --channel=4.6/stable lxd=
    - remove any *non-snap* versions of =lxc=: =sudo apt remove lxc lxc-utils lxcfs liblxc1 liblxc-common lxd lxd-client=
  - Need to enable swap accounting, done by:
    - appending =swapaccount=1= to =GRUB_CMDLINE_LINUX_DEFAULT= variable in =/etc/default/grub=
    - Had to check around exactly what they meant by "append," seems to work as this but will check after:
      - ~GRUB_CMDLINE_LINUX_DEFAULT="quiet splash swapaccount=1"~
      - ("quiet" and "splash" have to do with the first screens shown by GRUB, and are not germane to any of this)
      - After making that change, =sudo update-grub= and =reboot=
- =lxd init= must be run by root, =lxc= commands can be run by anyone who is a member of the group =lxd=
  - =sudo usermod -a -G group1,group2,group3 username= to make a user part of a group
  - =sudo usermod -a -G lxd nick= to make /me/ part of =lxd=
- checking on versions installed:
  - =lxc --version=
  - =lxd --version=
- An error that came up one of the first times I tried this: =sudo dd if=/dev/zero of=/dev/sdc4 count=64 bs=1024= when error creating zfs pool, =device or resource busy= and =one or more vdevs refer to the same device, or one of the devices is part of an active md or lvm device=.
- Actually, the key to that error seems to have been that I can /create/ the partition but not format it.  LXD wants to format it.  If I had already formatted it, it is seen as "in use."  They could have explained /that/ better!
- Looking at the zpool drives: =sudo zpool status=
*** Putting up an instance
:PROPERTIES:
:CUSTOM_ID: h:E246EB31-BAE7-444F-8D16-127E86261A97
:END:
1. ~instances~ based on ~images~
2. find a 64-bit debian 10 image (for example):
   - =lxc image list images: debian/10 amd64=
3. Launching the instance: =lxc launch images:debian/10 debian=
*** Using [[https://autoize.com/lxc-lxd-containers-with-haproxy/][these instructions]] as a base to set up a practice session on =dudley=
:PROPERTIES:
:CUSTOM_ID: h:9B4054CB-CF45-4FB2-9FFE-7BD9AEDC38DD
:END:
**** start with =snap install lxd=
:PROPERTIES:
:CUSTOM_ID: h:B5800C3E-6A5A-4197-AF6D-0BFBD72E9054
:END:
**** add user to lxd user group:
:PROPERTIES:
:CUSTOM_ID: h:090F3EE8-A924-4349-98B8-643C1B6ACD71
:END:
=usermod -aG lxd [user]=
**** set up lxd:
:PROPERTIES:
:CUSTOM_ID: h:36464050-361D-4C14-96F7-ACC07CDA3393
:END:
=sudo lxd init=
[in this case, will use a zfs loop device (on =falkie= will use a block device)
**** set up web containers
:PROPERTIES:
:CUSTOM_ID: h:12E17D62-F214-465E-8177-77ABCD032AAB
:END:
=lxc launch ubuntu:20.04 web1=
=lxc launch ubuntu:20.04 web2=
=lxc launch ubuntu:20.04 haproxy=
**** point Linode DNS provider to FQDN of test containers (in this case used =web1= and =web2=)
:PROPERTIES:
:CUSTOM_ID: h:FEC4A236-A1CC-402A-9ED3-4DDC75764893
:END:
**** set up =nginx= in each web container
:PROPERTIES:
:CUSTOM_ID: h:75244E73-2FF4-4725-8EE7-5BA66FC3A284
:END:
- drop into first container =web1=
  - =lxc exec web1 /bin/bash=
  - =apt update && apt dist-upgrade && apt-get install nginx-common libnginx-mod-rtmp -y=
  - =apt-get install nginx -y=
  - =systemctl enable nginx=
  - =systemctl start nginx=
  - edit =/var/www/html/index.nginx-debian.html=
    - =nano -c /var/www/html/index.nginx-debian.html=
    - change line 4 to =web1= (or web2) =works!=
- do the same for =web2=
**** forward :80 and :443 and udp :10000 from host to =haproxy= container
:PROPERTIES:
:CUSTOM_ID: h:6ACF80A0-B664-4455-B051-4D99C097832B
:END:
- =lxc config device add haproxy http proxy listen=tcp:0.0.0.0:80 connect=tcp:127.0.0.1:80=
- =lxc config device add haproxy https proxy listen=tcp:0.0.0.0:443 connect=tcp:127.0.0.1:443=
[this creates a TCP to TCP proxy device]
- here's a format for UDP proxy (needed for port 10000 in Jitsi):
  - =lxc config device add jitsi jitsiudp10000 proxy listen=udp:0.0.0.0:10000 connect=udp:127.0.0.1:10000=
  - =listen=udp:0.0.0.0:10000= /listens/ on the host on all network interfaces with UDP port 10000
  - =connect=tcp:127.0.0.1:10000= /connects/ to the container to existing port 10000 on localhost
  - However, I think would need to forward the udp to the /jitsi/ container rather than the haproxy - haproxy wouldn't know what to do with udp packets.
    - so would probably be =...device add jitsi...= instead
  - [[https://blog.simos.info/how-to-use-the-lxd-proxy-device-to-map-ports-between-the-host-and-the-containers/][reference I used for this]]
- stuff about haproxy and =proxy_protocol= [[https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt][here]]
- [[https://www.linode.com/docs/applications/containers/beginners-guide-to-lxd-reverse-proxy/][this]] is also a good guide from Linode, setting up multiple websites on LXD without using HAProxy, using LXD and nginx as reverse proxy to apache websites
**** set up the =haproxy= container:
:PROPERTIES:
:CUSTOM_ID: h:3360B972-4F62-4AAE-AFB4-F0B8ECBC47E8
:END:
- =lxc exec haproxy /bin/bash=
- root@haproxy:~# =apt update && apt upgrade=
- (staying in =haproxy= container)
- =apt install haproxy=
- =systemctl enable haproxy=
- =systemctl start haproxy=
(installing certbot for nginx)
- =snap install --classic certbot=
- =sudo certbot --nginx=
(though, may want to use [[https://github.com/go-acme/lego#installation][lego]]? Above two options won't let me install wildcard certificates yet)
- <2020-09-27 Sun> stopped here, <2020-09-27 Sun 20:57> stopped here again (about to install =lego=, didn't try certbot)

** using LXD container hostnames - a kind of local DNS
:PROPERTIES:
:CUSTOM_ID: h:E857EC2F-E0A9-46A3-8825-F711CEB79EB8
:END:
- =ip addr show dev lxdbr0= (to show the data for the LXD bridge set up during =lxd init=)
- =dnsmasq= in LXD needs to understand that it is the authoritative DNS server for the LXD domain
- but we want to avoid a DNS loop!
  - so we add =dns-loop-detect= which dtects DNS loops by sendng TXT queries to each server; if they boomerang then the upstream server is disabled.  Test runs each time bridge is enabled; in this case at LXD startup.
  - =echo -e "auth-zone=lxd\ndns-loop-detect" | lxc network set lxdbr0 raw.dnsmasq -=
- =sudo systemd-resolve --interface lxdbr0 --set-dns 10.215.36.1 --set-domain lxd=
  - this sets the DNS server for =lxdbr0= to the ip address of =lxdbr0=
  - specifies domain as =lxd=
  - check that it worked with =systemd-resolve --status lxdbr0=
- There is more to look at here - [[https://blog.simos.info/how-to-use-lxd-container-hostnames-on-the-host-in-ubuntu-18-04/][using LXD hostnames]]
- I'm not sure I need this ability yet
** Static IPs for containers
:PROPERTIES:
:CUSTOM_ID: h:2A8B1474-FF7F-4BA6-BFCD-916E2BFDCDC3
:END:
- see [[https://github.com/lxc/lxd/issues/2083][here]], last reply, for reference to setting up static IPs - will need cloud-init ready images though.
* Getting letsencrypt certs for HAProxy
:PROPERTIES:
:CUSTOM_ID: h:F292DA3C-5095-4AEF-80BA-D2929F6D7B94
:END:
** using =certbot=:
:PROPERTIES:
:CUSTOM_ID: h:8DADFA6C-E74E-4FA1-ABEE-0A805DC4BF15
:END:
*** setting up certbot:
:PROPERTIES:
:CUSTOM_ID: h:6B173FC0-311B-466A-82AC-3E02825725D5
:END:
- =service haproxy stop= (need to free up :80 and :443)
- =add-apt-repository ppa:certbot/certbot=
- =apt update=
- =apt install certbot=
*** obtaining certificates:
:PROPERTIES:
:CUSTOM_ID: h:F97554A2-E434-4EEE-AA03-E9BDB7F824B6
:END:
- (do all this in the HAProxy LXC container, if using that)
- (will need to stop anything using ports :80 or :443, i.e. =systemctl stop haproxy=)
- =certbot certonly=
- select (1) - spin up temporary webserver
- enter FQDNs, separated by comma and space
- will tell you where the certs are stored
  - in this case, at
    - certificate and chain at =/etc/letsencrypt/live/jitsi.brainsled.xyz/fullchain.pem= and
    - keyfile at =/etc/letsencrypt/live/jitsi.brainsled.xyz/privkey.pem=
- then combine the two files =fullchain.pem= and =privkey.pem= into single file at =/etc/haproxy/certs=
  - =mkdir -p /etc/haproxy/certs=
  - =cat /etc/letsencrypt/live/jitsi.brainsled.xyz/fullchain.pem /etc/letsencrypt/live/jitsi.brainsled.xyz/privkey.pem > /etc/haproxy/certs/jitsi.brainsled.xyz.pem=
  - <2020-10-09 Fri> also put in certs for =brainsled.xyz=

** run this to download and extract =golang= and install =lego=
:PROPERTIES:
:CUSTOM_ID: h:E81B98E0-D6A1-425E-B11D-4798E7D0B7AD
:END:
- don't mess around with the =go= installation, easiest and most reliable way seems to be:
  - downloading the correct package from [[https://github.com/go-acme/lego/releases][the lego releases page]], which in this particular case on <2020-09-28 Mon> is:
  - =wget https://github.com/go-acme/lego/releases/download/v4.0.1/lego_v4.0.1_linux_amd64.tar.gz=
  - then =tar -xzvf lego_v4.0.1_linux_amd64.tar.gz= (or whatever the filename turns out to be 
**  put =LINODE_TOKEN= in =/etc/environment= /in/ HAProxy LXC, since that's where we'll be getting certs from
:PROPERTIES:
:CUSTOM_ID: h:75927324-23A7-4157-915A-FC5C3D55E394
:END:
- But then for some reason storing the variable in =/etc/environment= wasn't working, so I did this:
  - ~LINODE_TOKEN=[LINODE token]~ to get it in for that session
  - ~LINODE_TOKEN=$LINODE_TOKEN ./lego --email="nick.taintor@gmail.com" --domains="*.frankiesaurus.com" --dns="linode" run --run-hook="./myscript.sh"~
    - (but couldn't get =myscript.sh= to take - that's where =lego= is supposed to record some things)
    - certificate is at =root/.lego/accounts=
** Turns out HAProxy has its own mechanism for this?
:PROPERTIES:
:CUSTOM_ID: h:91325DBE-469D-4DDA-B505-DA790CF7AF1F
:END:
*** Looking [[https://www.haproxy.com/blog/lets-encrypt-acme2-for-haproxy/][here]]
:PROPERTIES:
:CUSTOM_ID: h:73C4B1F1-247D-4F4F-BE28-7A63531F20E2
:END:
*** Well, maybe some other time.
:PROPERTIES:
:CUSTOM_ID: h:9B7D9F36-8624-4BFC-A6AA-1D86B1793EFC
:END:
*** use ~proxy_protocol~!
:PROPERTIES:
:CUSTOM_ID: h:A91D8E00-BCDE-4259-B155-916FC91464C9
:END:
** Trying =certbot= again:
:PROPERTIES:
:CUSTOM_ID: h:34DD831A-D718-4683-83FC-4D1C00AC822C
:END:
*** =snap install --classic certbot=
:PROPERTIES:
:CUSTOM_ID: h:28CEF09A-398E-4550-9C19-682EFC96C4B6
:END:
*** =certbot certonly --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory --manual-public-ip-logging-ok -d '*.<your.domain>' -d <your.domain>=
:PROPERTIES:
:CUSTOM_ID: h:517A8ADC-AFB4-46C8-B09B-B4170662A5EF
:END:
** Then, 
:PROPERTIES:
:CUSTOM_ID: h:02BA3CDF-A7BD-477E-9874-488845CC53BA
:END:
- put the code in the DNS server (Linode, for me) under the hostname =_acme-challenge.brainsled.xyz=
- Wait 5 minutes, assuming you remembered to put 5 min TTL!
** Success!  stored at
:PROPERTIES:
:CUSTOM_ID: h:7ED4A879-62E8-4649-A201-8A98410C5047
:END:
- =/etc/letsencrypt/live/brainsled.xyz/fullchain.pem=
- =/etc/letsencrypt/live/brainsled.xyz/privkey.pem=
** Then concatenate the results into something that HAProxy can understand:
:PROPERTIES:
:CUSTOM_ID: h:8E244183-E1FC-41DF-B29C-477D8E116AD9
:END:
- =cat fullchain.pem privkey.pem > brainsled.xyz.pem=
** =nano /etc/haproxy/haproxy.cfg=
:PROPERTIES:
:CUSTOM_ID: h:9F4260B5-FB10-4E0D-BDEF-9F84067117D0
:END:
** edit this in:
:PROPERTIES:
:CUSTOM_ID: h:03067CB5-2F7A-462C-B03B-9F04AAE723DE
:END:
#+begin_src bash
global
	maxconn	1000
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
#	ca-base /etc/ssl/certs
#	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
#        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
#        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
#        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
	option	forwardfor
	option	http-server-close
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

listen stats
	bind *:8404
	mode http
	stats enable
	stats show-legends
	stats uri /stats
	stats refresh 10s

frontend www_frontend
    mode http
    bind *:80
    bind *:443 ssl crt /etc/haproxy/certs/
    http-request redirect scheme https unless { ssl_fc }
    http-request set-header X-Forwarded-For %[src]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    option http-server-close

    acl host_jitsi hdr(host) -i jitsi.brainsled.xyz
    acl host_web2 hdr(host) -i web2.brainsled.xyz
    acl haproxy_stats hdr(host) -i haproxy.brainsled.xyz

    use_backend haproxy_stats if haproxy_stats
    use_backend jitsi_cluster if host_jitsi
    use_backend web2_cluster if host_web2

backend jitsi_cluster
    balance leastconn
    # We set the X-Client-IP HTTP header. This is useful if we want the web server to know the real client IP.
    http-request set-header X-Client-IP %[src]
    # This backend, named here "jitsi", directs to container "jitsi.lxd" (hostname).
    server jitsi jitsi.lxd:80 check

backend web2_cluster
    balance leastconn
    http-request set-header X-Client-IP %[src]
    server web2 web2.lxd:80 check

backend haproxy_stats
    balance leastconn
    http-request set-header X-Client-IP %[src]
    server haproxy haproxy.lxd:8404 check
#+end_src
** Then,
:PROPERTIES:
:CUSTOM_ID: h:0533E465-152B-4E70-8C57-2A0BC1A40425
:END:
- save and close, restart HAProxy:
- =# systemctl restart haproxy=
** =http://web1.brainsled.xyz= should work
:PROPERTIES:
:CUSTOM_ID: h:346F898B-E227-47D2-8A3A-88D66B30ACE2
:END:

* HAProxy again
:PROPERTIES:
:CUSTOM_ID: h:F5910148-F740-46FB-95C2-0D8C660FA361
:END:
** LXD Proxy Device to map ports between the host and the containers
:PROPERTIES:
:CUSTOM_ID: h:2C72B910-00A9-463E-8578-9CBB24CCB025
:END:
*** this seems important:
:PROPERTIES:
:CUSTOM_ID: h:BCD8DF10-05BD-47F4-8847-5FB360305C1E
:END:
- [[https://blog.simos.info/how-to-use-the-lxd-proxy-device-to-map-ports-between-the-host-and-the-containers/][from Simos' blog]] - connecting TCP to TCP, UDP to UDP, etc /without/ using =iptables=
** Trying through [[https://kifarunix.com/install-and-setup-haproxy-on-ubuntu-20-04/][this set of instructions]]
:PROPERTIES:
:CUSTOM_ID: h:15EEB22D-B81F-41B9-8994-40A96AB4A451
:END:
- there is an "SSL pass through" - which is documented [[https://www.haproxy.com/documentation/haproxy/deployment-guides/tls-infrastructure/#ssl-tls-offloading][here]] and a discussion of it on this [[https://scriptthe.net/2015/02/08/pass-through-ssl-with-haproxy/][blog]]
  - HAProxy runs in =tcp= mode, passes through SSL/TLS requests
- update to latest version
  - =add-apt-repository ppa:vbernat/haproxy-2.2 --yes=
** in =dudley=:
:PROPERTIES:
:CUSTOM_ID: h:5FB492A9-8960-4592-B368-274A44E6C40C
:END:
- (could use =lxc config=, I think, to do this as well, but will try with =iptables= first)
- using iptables to forward ports from host to HAProxy container (using ip address from =lxc list=:
  - =sudo iptables -t nat -I PREROUTING -i eth0 -p TCP -d 45.79.138.21/32 --dport 80 -j DNAT --to-destination 10.215.36.245:80=
  - =sudo iptables -t nat -I PREROUTING -i eth0 -p TCP -d 45.79.138.21/32 --dport 443 -j DNAT --to-destination 10.215.36.245:443=
  - to keep persistent: =sudo apt-get install iptables-persistent=
    - (keeps persistent through reboots but still need to update them after change)
- <2020-10-06 Tue> removing iptables, found out how to use lxc configure to proxy udp ports
** this seems to work so far <2020-10-02 Fri 15:56>, but /no/ security yet enabled
:PROPERTIES:
:CUSTOM_ID: h:59A6A77A-3624-4D40-B119-194B48A0245B
:END:
** enabling stats
:PROPERTIES:
:CUSTOM_ID: h:72602081-9297-4E67-93D8-36DAAE827362
:END:
- don't need nginx installed to serve - tested first /with/ nginx but then purged it
- add this to =/etc/haproxy/haproxy.cfg=:
#+begin_src bash
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if LOCALHOST
#+end_src
- access stats from command line /if/ in haproxy container:
  - =echo "show info" | socat stdio /run/haproxy/admin.sock=
- access in browser with =http://haproxy.brainsled.xyz/stats=
** <2020-10-09 Fri 19:24> current haproxy.cfg on =dudley= SSL working
:PROPERTIES:
:CUSTOM_ID: h:93B3DE60-5447-47F0-A2A5-DE6F7882C93B
:END:
#+begin_src bash
global
	maxconn	1000
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
#	ca-base /etc/ssl/certs
#	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
#        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
#        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
#        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
	option	forwardfor
	option	http-server-close
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

listen stats
	bind *:8404
	mode http
	stats enable
	stats show-legends
	stats uri /stats
	stats refresh 10s

frontend www_frontend
    mode http
    bind *:80
    bind *:443 ssl crt /etc/haproxy/certs/
    http-request redirect scheme https unless { ssl_fc }
    http-request set-header X-Forwarded-For %[src]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    option http-server-close

    acl host_jitsi hdr(host) -i jitsi.brainsled.xyz
    acl host_web2 hdr(host) -i web2.brainsled.xyz
    acl haproxy_stats hdr(host) -i haproxy.brainsled.xyz

    use_backend haproxy_stats if haproxy_stats
    use_backend jitsi_cluster if host_jitsi
    use_backend web2_cluster if host_web2

backend jitsi_cluster
    balance leastconn
    # We set the X-Client-IP HTTP header. This is useful if we want the web server to know the real client IP.
    http-request set-header X-Client-IP %[src]
    # This backend, named here "jitsi", directs to container "jitsi.lxd" (hostname).
    server jitsi jitsi.lxd:80 check

backend web2_cluster
    balance leastconn
    http-request set-header X-Client-IP %[src]
    server web2 web2.lxd:80 check

backend haproxy_stats
    balance leastconn
    http-request set-header X-Client-IP %[src]
    server haproxy haproxy.lxd:8404 check
#+end_src
** validate =haproxy.cfg= file:
:PROPERTIES:
:CUSTOM_ID: h:1F71B88E-3161-486F-8C19-0BDD56DA9B16
:END:
=sudo haproxy -f /etc/haproxy/haproxy.cfg -c=
** Mixing SSL termination and pass-through in HAProxy
:PROPERTIES:
:CUSTOM_ID: h:720571D6-04D0-4B96-9016-12D64CCB7576
:END:
*** Found what looks like an elegant solution to this [[https://discourse.haproxy.org/t/mixing-mode-tcp-and-http-ssl-termination-and-passthrough/2698/16][here]].
:PROPERTIES:
:CUSTOM_ID: h:EDF0AEF7-724B-4805-A577-927FCB1EA48B
:END:
- concatenating a backend and a frontend
**** Here's what he said:
:PROPERTIES:
:CUSTOM_ID: h:A8E0D9C3-7F3B-40F4-9331-67B7789731B0
:END:
- 
#+begin_src bash
#######haproxy.cfg_BEGIN##################
…
…
frontend SSL_PassThrough
mode tcp
bind *:80
bind *:443
tcp-request inspect-delay 5s
tcp-request content accept if { req_ssl_hello_type 1 }

use_backend backend1 if { req_ssl_sni -i aaa.bbb.com }
use_backend backend2 if { req_ssl_sni -i ccc.ddd.com }
use_backend bbackend3 if { req_ssl_sni -i eee.fff.com }
default_backend bk_tcp_to_https

backend bk_tcp_to_https
mode tcp
server haproxy-https 127.0.0.1:8443 check

frontend SSL_Termination
mode http
bind *:8443 ssl crt /etc/haproxy/certs/ggg.hhh.com.pem crt /etc/haproxy/certs/iii.kkk.com.pem

use_backend     backend4  if { hdr(host) -i ggg.hhh.com }
use_backend     backend5  if { hdr(host) -i iii.kkk.com }

#SSL Passthrough Backends (every backend manage their own SSL termiantion)
backend backend1
mode tcp
server server1 192.168.0.100:443 check

backend backend2
mode tcp
server server2 192.168.0.101:443 check

backend backend3
mode tcp
server server3 192.168.0.102:443 check

#SSL Terminated by HAProxy Backends (plain http traffic between HAProxy and these backends)
backend backend4
mode http
server server4 192.168.0.104:80 check
http-request set-header X-Forwarded-Port %[dst_port]
http-request add-header X-Forwarded-Proto https if { ssl_fc }

backend backend5
mode http
server server5 192.168.0.105:80 check
http-request set-header X-Forwarded-Port %[dst_port]
http-request add-header X-Forwarded-Proto https if { ssl_fc }
#########haproxy.cfg_END#################

The Trick here is “default_backend bk_tcp_to_https” in frontend1 that concatenates all the requests that are not going to be passthrough, to the “backend bk_tcp_to_https”.
It is basically telling if the request is not for aaa.bbb.com or ccc.ddd.com or eee.fff.com, then send it to the default backend, which is himself: 127.0.0.1 but in other port: 8443, and then, Frontend2 is listening in 8443 to take care of the termination of the SSL.

This is the mixed TCP/HTTP combination to passthrough some SSL and terminate others using one single configuration.
#+end_src
* LTE internet
:PROPERTIES:
:CUSTOM_ID: h:D2C05AB6-B4BF-4139-9CB2-0DBD799795CB
:END:
** Resources I've been using:
:PROPERTIES:
:CUSTOM_ID: h:E236BF9B-23BD-451D-B646-F7D3FF7B9953
:END:
- this thread on LTEhacks: [[https://ltehacks.com/viewtopic.php?f=37&p=12451][here]], a guy building an LTE router with OpenWRT and a Raspberry Pi 4
- this GitHub gist, seems to be almost exactly what I am trying to do, just wish it would work as well!  [[https://gist.github.com/Juul/e42c5b6ec71ce11923526b36d3f1cb2c][here]].
** future:
- WAN bonding with ROOter and OpenMPTC Router discussed in detail [[https://ltehacks.com/viewtopic.php?t=1078][here]] on the =ltehacks= forum
- Dual ISP load balancing with EdgeRouter: [[https://lostdomain.org/2018/04/11/doing-dual-isp-load-balancing-with-ubiquiti-edgerouter/][article]]
  - another article about this: [[https://www.australtech.net/isp-load-balancing-with-ubiquiti-edgerouter-x/][here]]
** Parts of the device:
:PROPERTIES:
:CUSTOM_ID: h:396B3614-C715-4907-BD73-9812C52A4024
:END:
*** [[https://ltefix.com/shop/pcie-m-2/mini-pci-e/usb3-0-to-mini-pci-e-adapter-enclosure-with-sim-card-slot/][This guy]] -  USB3.0 To Mini PCI-E Adapter Enclosure With SIM Card Slot
:PROPERTIES:
:CUSTOM_ID: h:1D10D4E0-4D28-494F-8193-140C8808C34D
:END:
*** [[https://www.sierrawireless.com/products-and-solutions/embedded-solutions/products/em7455/][this modem]] - Dell Sierra Wireless Airprime EM7455 Qualcomm 4G WWAN Ngff Card KF1W5 1103518 DW5811e
:PROPERTIES:
:CUSTOM_ID: h:79F5FD64-E694-4413-9EE4-AD575360C7D6
:END:
   - Problem with this - turns out to be Dell branded (I did *not* know that made a difference - though it does now explain why it was so cheap!) so there are things to work on and reset.
   - So how do we make it generic?
     - From [[https://zukota.com/sierra-wireless-em7455-how-to-enable-com-ports/][here]], advice is to (from linux) enable the COM ports so that we can rewrite the firmware and do diagnostics. Need to run a tool to change this - =swi_setusbcomp.pl -usbcomp=8=. So where is this tool?
     - [[https://www.thinkpenguin.com/gnu-linux/em7455-switching-modes-qmi-mbim][this guy's]] got it!  Here's a download link: [[https://www.thinkpenguin.com/files/em7455-modem-software/swi_setusbcomp.pl][link]]. =wget= this from an Ubuntu distro - a server, since it'll be small and we're only doing CLI anyway.
**** packages to download at the beginning (but may need more!):
:PROPERTIES:
:CUSTOM_ID: h:1F862C4F-2A8F-44FA-B774-F739AF3E9D27
:END:
- (getting some info from [[https://www.embeddedpi.com/documentation/3g-4g-modems/raspberry-pi-sierra-wireless-mc7304-modem-qmi-interface-setup][this site]])
- =apt-get install libqmi-utils minicom libuuid-tiny-perl libipc-shareable-perl snapd bridge-utils=
  - (=libqmi-utils= installs two main utilities, =qmi-cli= tool and =qmi-network= helper script)
**** Create accessible COM port - Here's the script in case we lose it =swi_setusbcomp.pl=:
:PROPERTIES:
:CUSTOM_ID: h:C1EA1A6C-7F2C-4A79-B2BA-AD81BB9FBE7F
:END:
- before running need to install:
  libuuid-tiny-perl
  libipc-shareable-perl
  (they /are/ in the RPi repositories)
***** script:
:PROPERTIES:
:CUSTOM_ID: h:4A655930-E2A1-4FB1-AB2A-B86C8BB4B6FD
:END:
:PROPERTIES:
:VISIBILITY: folded  ;; folded, children, content, all
#+begin_src perl
#!/usr/bin/perl
# swi_setusbcomp.pl
# Copyright (c) 2015  Bjørn Mork <bjorn@mork.no>
# GPLv2

use strict;
use warnings;
use Getopt::Long;
use UUID::Tiny ':std';
use IPC::Shareable;
use Fcntl ':mode';
use File::Basename;
use Time::HiRes qw (sleep);
use Data::Dumper;

my $maxctrl = 4096; # default, will be overridden by ioctl if supported
my $mgmt = "/dev/cdc-wdm0";
my $reset;
my $usbreset;
my $qdl;
my $debug;
my $verbose = 1;
my $usbcomp;

# a few global variables
my $msgs;
my $dmscid;
my $tid = 1;

# defaulting to MBIM mode
my $mbim = 1;

GetOptions(
    'usbcomp=i' => \$usbcomp,
    'device=s' => \$mgmt,
    'reset!' => \$reset,
    'usbreset!' => \$usbreset,
    'qdl!' => \$qdl,
    'debug!' => \$debug,
    'verbose!' => \$verbose,
    'help|h|?' => \&usage,
    ) || &usage;


### MBIM helpers ###
sub _push {
    my ($buf, $format, @vars) = @_;

    my $add = pack($format, @vars);
    $buf .= $add;

    # update length
    my $len = unpack("V", substr($buf, 4, 4));
    $len += length($add);
    substr($buf, 4, 4) = pack("V", $len);
    return $buf;
}

sub _pop {
    my ($buf, $format, @vars) = @_;

    (@vars) = unpack($format, $buf);
    my $x = pack($format, @vars);
    return $buf .= pack($format, @vars);
}

my %msg = (
# Table 9‐3: Control messages sent from the host to the function 
    'MBIM_OPEN_MSG' => 1,
    'MBIM_CLOSE_MSG' => 2,
    'MBIM_COMMAND_MSG' => 3,
    'MBIM_HOST_ERROR_MSG' => 4, 

# Table 9‐9: Control Messages sent from function to host 
    'MBIM_OPEN_DONE' => 0x80000001,
    'MBIM_CLOSE_DONE' => 0x80000002,
    'MBIM_COMMAND_DONE' => 0x80000003,
    'MBIM_FUNCTION_ERROR_MSG' => 0x80000004,
    'MBIM_INDICATE_STATUS_MSG' => 0x80000007, 
    );

# Table 10‐3: Services Defined by MBIM 
my %uuid = (
    UUID_BASIC_CONNECT => 'a289cc33-bcbb-8b4f-b6b0-133ec2aae6df',
    UUID_SMS           => '533fbeeb-14fe-4467-9f90-33a223e56c3f',
    UUID_USSD          => 'e550a0c8-5e82-479e-82f7-10abf4c3351f',
    UUID_PHONEBOOK     => '4bf38476-1e6a-41db-b1d8-bed289c25bdb',
    UUID_STK           => 'd8f20131-fcb5-4e17-8602-d6ed3816164c',
    UUID_AUTH          => '1d2b5ff7-0aa1-48b2-aa52-50f15767174e',
    UUID_DSS           => 'c08a26dd-7718-4382-8482-6e0d583c4d0e',

# "well known" vendor specific services
    UUID_EXT_QMUX      => 'd1a30bc2-f97a-6e43-bf65-c7e24fb0f0d3', # ref unknown...
    UUID_MULTICARRIER  => '8b569648-628d-4653-9b9f-1025404424e1', # ref http://feishare.com/attachments/article/252/implementing-multimode-multicarrier-devices.pdf
    UUID_MSFWID        => 'e9f7dea2-feaf-4009-93ce-90a3694103b6', # http://msdn.microsoft.com/en-us/library/windows/hardware/jj248721.aspx
    UUID_MS_HOSTSHUTDOWN => '883b7c26-985f-43fa-9804-27d7fb80959c', # http://msdn.microsoft.com/en-us/library/windows/hardware/jj248720.aspx

    );

sub uuid_to_service {
    my $uuid = shift;
    my ($service) = grep { $uuid{$_} eq $uuid } keys %uuid;
    return 'UNKNOWN' unless $service;
    $service =~ s/^UUID_//;
    return $service;
}

# MBIM_MESSAGE_HEADER 
sub init_msg_header {
    my $type = shift;
    return &_push('', "VVV", $type, 0, $tid++);
}

# MBIM_FRAGMENT_HEADER 
sub push_fragment_header {
    my ($buf, $total, $current) = @_;
    return $buf = &_push($buf, "VV", $total, $current);
}

# MBIM_OPEN_MSG
sub mk_open_msg {
    my $buf = &init_msg_header(1); # MBIM_OPEN_MSG  
    $buf = &_push($buf, "V", $maxctrl); # MaxControlTransfer 

    printf "MBIM>: " . "%02x " x length($buf) . "\n", unpack("C*", $buf) if $debug;
    return $buf;
}

# MBIM_CLOSE_MSG
sub mk_close_msg {
    my $buf = &init_msg_header(2); # MBIM_CLOSE_MSG  

    printf "MBIM>: " . "%02x " x length($buf) . "\n", unpack("C*", $buf) if $debug;
    return $buf;
}

# MBIM_COMMAND_MSG  
sub mk_command_msg {
    my ($service, $cid, $type, $info) = @_;

    my $uuid = string_to_uuid($uuid{"UUID_$service"} || $service) || return '';
    my $buf = &init_msg_header(3); # MBIM_COMMAND_MSG  
    $buf = &push_fragment_header($buf, 1, 0);
    $uuid =~ tr/-//d;
    $buf = &_push($buf, "a*", $uuid); # DeviceServiceId  
    $buf = &_push($buf, "VVV",
		  $cid,    # CID
		  $type,   # 0 for a query operation, 1 for a Set operation. 
		  length($info), # InformationBufferLength  
	);
    $buf = &_push($buf, "a*", $info);  # InformationBuffer  
    printf "MBIM>: " . "%02x " x length($buf) . "\n", unpack("C*", $buf) if $debug;
    return $buf;
}

sub decode_mbim {
    my $msg = shift;
    my ($type, $len, $tid) = unpack("VVV", $msg);

    if ($debug) {
	print "MBIM_MESSAGE_HEADER\n";
	printf "  MessageType:\t0x%08x\n", $type;
	printf "  MessageLength:\t%d\n", $len;
	printf "  TransactionId:\t%d\n", $tid;
    }
    if ($type == 0x80000001 || $type == 0x80000002) { # MBIM_OPEN_DONE ||  MBIM_CLOSE_DONE 
	my $status = unpack("V", substr($msg, 12));
	printf "  Status:\t0x%08x\n", $status if $debug;
	# save message type
	push(@$msgs, { status => $type, index => scalar @$msgs, });
    } elsif ($type == 0x80000003) { # MBIM_COMMAND_DONE 
	my ($total, $current) = unpack("VV", substr($msg, 12)); # FragmentHeader  
	if ($debug) {
	    print "MBIM_FRAGMENT_HEADER\n";
	    printf "  TotalFragments:\t0x%08x\n", $total;
	    printf "  CurrentFragment:\t0x%08x\n", $current;
	}
	my $uuid = uuid_to_string(substr($msg, 20, 16));
	my $service = &uuid_to_service($uuid);
	print "$service ($uuid)\n"  if $debug;

	my ($cid, $status, $infolen) = unpack("VVV", substr($msg, 36));
	my $info = substr($msg, 48);
	if ($debug) {
	    printf "  CID:\t\t0x%08x\n", $cid;
	    printf "  Status:\t0x%08x\n", $status;
	    print "InformationBuffer [$infolen]:\n";
	}
	if ($infolen != length($info)) {
	    print "Fragmented MBIM transactions are not supported\n";
	} elsif ($service eq "EXT_QMUX") {
	    # save the decoded QMI message
	    my $lastqmi = &decode_qmi($info);
	    # save message
	    push(@$msgs, { status => 0, index => scalar @$msgs, qmi => $lastqmi}) if $lastqmi;
	}
	# silently ignoring InformationBuffer payload of other services
    }
    # ignoring all other types of MBIM messages
}

# read from F until timeout
sub reader {
    my $timeout = shift || 0;

    eval {
	local $SIG{ALRM} = sub { die "timeout\n" };
	local $SIG{TERM} = sub { die "close\n" };
	my $raw = '';
	my $msglen = 0;
	alarm $timeout;
	do {
	    my $len = 0;
	    if ($len < 3 || $len < $msglen) {
		my $tmp;
		my $n = sysread(F, $tmp, $maxctrl);
		if ($n) {
		    $len = $n;
		    $raw = $tmp;
		    printf "%s<: " . "%02x " x $n . "\n", $mbim ? "MBIM" : "QMI", unpack("C*", $tmp) if $debug;
		} else {
		    die "eof\n";
		}
	    }

	    # get expected message length
	    if ($mbim) {
		$msglen = unpack("V", substr($raw, 4, 4));
	    } else {
		$msglen = unpack("v", substr($raw, 1, 2)) + 1;
	    }

	    if ($len >= $msglen) {
		$len -= $msglen;

		if ($mbim) {
		    &decode_mbim(substr($raw, 0, $msglen));
		    die "close\n" if (grep { $_->{status} == 0x80000002 } @$msgs); # exit on CLOSE_DONE
		} else {
		    my $lastqmi = &decode_qmi(substr($raw, 0, $msglen));
		    push(@$msgs, { status => 0, index => scalar @$msgs, qmi => $lastqmi}) if $lastqmi;
		}
		$raw = substr($raw, $msglen);
		$msglen = 0;
	    } else {
		warn "$len < $msglen\n";
	    }
	} while (1);
	alarm 0;
    };
    if ($@) {
	die unless $@ =~ /^close/;   # propagate unexpected errors
    }
}

### QMI helpers ###

my %sysname = (
	0x00 => "QMI_CTL",	# Control service
	0x01 => "QMI_WDS",	# Wireless data service
	0x02 => "QMI_DMS",	# Device management service
	0x03 => "QMI_NAS",	# Network access service
	0x04 => "QMI_QOS",	# Quality of service, err, service 
	0x05 => "QMI_WMS",	# Wireless messaging service
	0x06 => "QMI_PDS",	# Position determination service
	0x07 => "QMI_AUTH",	# Authentication service
	0x08 => "QMI_AT",	# AT command processor service
	0x09 => "QMI_VOICE",	# Voice service
	0x0a => "QMI_CAT2",	# Card application toolkit service (new)
	0x0b => "QMI_UIM",	# UIM service
	0x0c => "QMI_PBM",	# Phonebook service
	0x0d => "QMI_QCHAT",	# QCHAT Service
	0x0e => "QMI_RMTFS",	# Remote file system service
	0x0f => "QMI_TEST",	# Test service
	0x10 => "QMI_LOC",	# Location service 
	0x11 => "QMI_SAR",	# Specific absorption rate service
	0x12 => "QMI_IMSS",	# IMS settings service
	0x13 => "QMI_ADC",	# Analog to digital converter driver service
	0x14 => "QMI_CSD",	# Core sound driver service
	0x15 => "QMI_MFS",	# Modem embedded file system service
	0x16 => "QMI_TIME",	# Time service
	0x17 => "QMI_TS",	# Thermal sensors service
	0x18 => "QMI_TMD",	# Thermal mitigation device service
	0x19 => "QMI_SAP",	# Service access proxy service
	0x1a => "QMI_WDA",	# Wireless data administrative service
	0x1b => "QMI_TSYNC",	# TSYNC control service 
	0x1c => "QMI_RFSA",	# Remote file system access service
	0x1d => "QMI_CSVT",	# Circuit switched videotelephony service
	0x1e => "QMI_QCMAP",	# Qualcomm mobile access point service
	0x1f => "QMI_IMSP",	# IMS presence service
	0x20 => "QMI_IMSVT",	# IMS videotelephony service
	0x21 => "QMI_IMSA",	# IMS application service
	0x22 => "QMI_COEX",	# Coexistence service
	0x23 => "QMI_RESERVED_35",	# Reserved
	0x24 => "QMI_PDC",	# Persistent device configuration service
	0x25 => "QMI_RESERVED_37",	# Reserved
	0x26 => "QMI_STX",	# Simultaneous transmit service
	0x27 => "QMI_BIT",	# Bearer independent transport service
	0x28 => "QMI_IMSRTP",	# IMS RTP service
	0x29 => "QMI_RFRPE",	# RF radiated performance enhancement service
	0x2a => "QMI_DSD",	# Data system determination service
	0x2b => "QMI_SSCTL",	# Subsystem control service
	0xe0 => "QMI_CAT",	# Card application toolkit service
	0xe1 => "QMI_RMS",	# Remote management service
    );

# dumped from GobiAPI_2013-07-31-1347/GobiConnectionMgmt/GobiConnectionMgmtAPIEnums.h
# using
# perl -e 'while (<>){ if (m!eQMI_SVC_([^,]*),\s*//\s*(\d+)\s(.*)!) { my $svc = $1; $svc = "CTL" if ($svc eq "CONTROL"); my $num = $2; my $descr = $3; printf "\t0x%02x => \"$descr\",\n", $num; } }' < /tmp/xx
my %sysdescr = (
	0x00 => "Control service",
	0x01 => "Wireless data service",
	0x02 => "Device management service",
	0x03 => "Network access service",
	0x04 => "Quality of service, err, service ",
	0x05 => "Wireless messaging service",
	0x06 => "Position determination service",
	0x07 => "Authentication service",
	0x08 => "AT command processor service",
	0x09 => "Voice service",
	0x0a => "Card application toolkit service (new)",
	0x0b => "UIM service",
	0x0c => "Phonebook service",
	0x0d => "QCHAT Service",
	0x0e => "Remote file system service",
	0x0f => "Test service",
	0x10 => "Location service ",
	0x11 => "Specific absorption rate service",
	0x12 => "IMS settings service",
	0x13 => "Analog to digital converter driver service",
	0x14 => "Core sound driver service",
	0x15 => "Modem embedded file system service",
	0x16 => "Time service",
	0x17 => "Thermal sensors service",
	0x18 => "Thermal mitigation device service",
	0x19 => "Service access proxy service",
	0x1a => "Wireless data administrative service",
	0x1b => "TSYNC control service ",
	0x1c => "Remote file system access service",
	0x1d => "Circuit switched videotelephony service",
	0x1e => "Qualcomm mobile access point service",
	0x1f => "IMS presence service",
	0x20 => "IMS videotelephony service",
	0x21 => "IMS application service",
	0x22 => "Coexistence service",
	0x23 => "Reserved",
	0x24 => "Persistent device configuration service",
	0x25 => "Reserved",
	0x26 => "Simultaneous transmit service",
	0x27 => "Bearer independent transport service",
	0x28 => "IMS RTP service",
	0x29 => "RF radiated performance enhancement service",
	0x2a => "Data system determination service",
	0x2b => "Subsystem control service",
	0xe0 => "Card application toolkit service",
	0xe1 => "Remote management service",
    );

# $tlvs = { type1 => packdata, type2 => packdata, .. 
sub mk_qmi {
    my ($sys, $cid, $msgid, $tlvs) = @_;

    # create tlvbytes
    my $tlvbytes = '';
    foreach my $tlv (keys %$tlvs) {
	$tlvbytes .= pack("Cv", $tlv, length($tlvs->{$tlv})) . $tlvs->{$tlv};
    }
    my $tlvlen = length($tlvbytes);
    if ($sys != 0) {
	return pack("CvCCCCvvv", 1, 12 + $tlvlen, 0, $sys, $cid, 0, $tid++, $msgid, $tlvlen) . $tlvbytes;
    } else {
	return pack("CvCCCCCvv", 1, 11 + $tlvlen, 0, 0, 0, 0, $tid++, $msgid, $tlvlen) . $tlvbytes;
    }
}

sub decode_qmi {
    my $packet = shift;
    return {} unless $packet;

    #    printf "%02x " x length($packet) . "\n", unpack("C*", $packet) if $debug;

    my $ret = {};
    @$ret{'tf','len','ctrl','sys','cid'} = unpack("CvCCC", $packet);
    return {} unless ($ret->{tf} == 1);

    # tid is 1 byte for QMI_CTL and 2 bytes for the others...
    @$ret{'flags','tid','msgid','tlvlen'} = unpack($ret->{sys} == 0 ? "CCvv" : "Cvvv" , substr($packet, 6));
    my $tlvlen = $ret->{'tlvlen'};
    my $tlvs = substr($packet, $ret->{'sys'} == 0 ? 12 : 13 );

    # add the tlvs
     while ($tlvlen > 0) {
	my ($tlv, $len) = unpack("Cv", $tlvs);
	$ret->{'tlvs'}{$tlv} = [ unpack("C*", substr($tlvs, 3, $len)) ];
	$tlvlen -= $len + 3;
	$tlvs = substr($tlvs, $len + 3);
     }
    return $ret;
}

sub qmiver {
    my $qmi = shift;

    # decode the list of supported systems in TLV 0x01
    my @data = @{$qmi->{'tlvs'}{0x01}};
    my $n = shift(@data);
    my $data = pack("C*", @data);
    print "supports $n QMI subsystems:\n";
    for (my $i = 0; $i < $n; $i++) {
	my ($sys, $maj, $min) = unpack("Cvv", $data);
	printf "  0x%02x ($maj.$min)\t'%s'\t- %s\n", $sys, $sysname{$sys} || 'unknown', $sysdescr{$sys} || '';
	$data = substr($data, 5);
    }
}

sub qmiok {
    my $qmi = shift;
    return exists($qmi->{tlvs}{0x02}) && (unpack("v", pack("C*", @{$qmi->{tlvs}{0x02}}[2..3])) == 0);
}

sub do_qmi {
    my $msgid = shift;
    my $qmi = shift;
    my $timeout = shift || 15;
    
    printf "QMI>: " . "%02x " x length($qmi) . "\n", unpack("C*", $qmi) if $debug;

    if ($mbim) {
	print F &mk_command_msg('EXT_QMUX', 1, 1, $qmi);
    } else {
	print F $qmi;
    }
    my $count = 10 * $timeout; # seconds timeout
    my $msg;

    # wait for a reply, leaving all messages in the queue
    for (my $i = $timeout; $i > 0; $i--) {
	($msg) = grep { !$_->{status} && $_->{qmi}->{msgid} == $msgid } @$msgs;
	last if $msg;
	sleep(0.1);
    }
    return unless $msg;
    
    my $status = &qmiok($msg->{qmi});
    printf "QMI msg '0x%04x' returned status = $status\n", $msgid if $verbose;
    return $status ? $msg->{qmi} : undef;
}


## Sierra USB comp
my %comps = (
    0  => 'HIP  DM    NMEA  AT    MDM1  MDM2  MDM3  MS',
    1  => 'HIP  DM    NMEA  AT    MDM1  MS',
    2  => 'HIP  DM    NMEA  AT    NIC1  MS',
    3  => 'HIP  DM    NMEA  AT    MDM1  NIC1  MS',
    4  => 'HIP  DM    NMEA  AT    NIC1  NIC2  NIC3  MS',
    5  => 'HIP  DM    NMEA  AT    ECM1  MS',
    6  => 'DM   NMEA  AT    QMI',
    7  => 'DM   NMEA  AT    RMNET1 RMNET2 RMNET3',
    8  => 'DM   NMEA  AT    MBIM',
    9  => 'MBIM',
    10 => 'NMEA MBIM',
    11 => 'DM   MBIM',
    12 => 'DM   NMEA  MBIM',
    13 => 'Config1: comp6    Config2: comp8',
    14 => 'Config1: comp6    Config2: comp9',
    15 => 'Config1: comp6    Config2: comp10',
    16 => 'Config1: comp6    Config2: comp11',
    17 => 'Config1: comp6    Config2: comp12',
    18 => 'Config1: comp7    Config2: comp8',
    19 => 'Config1: comp7    Config2: comp9',
    20 => 'Config1: comp7    Config2: comp10',
    21 => 'Config1: comp7    Config2: comp11',
    22 => 'Config1: comp7    Config2: comp12',
);

### main ###


# verify that the $mgmt device is a chardev provided by the cdc_mbim driver
my ($mode, $rdev) = (stat($mgmt))[2,6];
die "'$mgmt' is not a character device\n" unless S_ISCHR($mode);
my $driver = basename(readlink(sprintf("/sys/dev/char/%u:%u/device/driver",  &major($rdev), &minor($rdev))));
if ($driver eq "qmi_wwan") {
    $mbim = undef;
} elsif ($driver ne "cdc_mbim") {
    die "'$mgmt' is provided by '$driver' - only MBIM or QMI devices are supported\n";
}

print "Running in ", $mbim ? "MBIM" : "QMI", " mode (driver=$driver)\n";

# open device now and keep it open until exit
open(F, "+<", $mgmt) || die "open $mgmt: $!\n";
autoflush F 1;
autoflush STDOUT 1;

# check message size
require 'sys/ioctl.ph';
eval 'sub IOCTL_WDM_MAX_COMMAND () { &_IOC( &_IOC_READ, ord(\'H\'), 0xa0, 2); }' unless defined(&IOCTL_WDM_MAX_COMMAND);
my $foo = '';
my $r = ioctl(F, &IOCTL_WDM_MAX_COMMAND, $foo);
if ($r) {
    $maxctrl = unpack("s", $foo);
} else {
    warn("ioctl failed: $!\n") if $debug;
}
print "MaxMessageSize=$maxctrl\n"  if $debug;

# fork the reader
my $pid = fork();
if ($pid == 0) { # child
    # shared rx message queue
    tie $msgs, 'IPC::Shareable', 'msgs', { create => 1, destroy => 0 } || die "tie failed\n";
    $msgs = [];
    &reader(60); # allow up to 60 seconds for the whole transaction
    print "exiting reader\n" if $debug;
    exit 0;
} elsif (!$pid) {
    die "fork() failed: $!\n";
}

# watch reader status
tie $msgs, 'IPC::Shareable', 'msgs', { create => 1, destroy => 1 } || die "tie failed\n";
$msgs = [];

if ($mbim) {
    # send OPEN and wait until reader has seen the OPEN_DONE message
    print F &mk_open_msg;

    # flushing all messages until OPEN_DONE
    while (!grep { $_->{status} == 0x80000001 } @$msgs) {
	$msgs = [];
	sleep(1);
    }
    print "MBIM OPEN succeeded\n" if $verbose;
}

my $lastqmi;

# verify QMI channel support with QMI_CTL_MESSAGE_GET_VERSION_INFO
unless ($lastqmi = &do_qmi(0x0021, &mk_qmi(0, 0, 0x0021, { 0x01 => pack("C", 255), }))) {
    print "Failed to verify QMI ", $mbim ? "vendor specific MBIM service" : "", "\n";
    &quit;
}
print $mbim ? "MBIM " : "", "QMI support verified\n";

&qmiver($lastqmi) if $verbose;

# allocate a DMS CID (or just reuse the one allocated by the MBIM firmware application?)
# QMI_CTL_GET_CLIENT_ID, TLV 0x01 => 2 (DMS)
unless ($lastqmi = &do_qmi(0x0022, &mk_qmi(0, 0, 0x0022, { 0x01 => pack("C", 2), }))) {
    print "Failed to get QMI DMS client ID\n";
    &quit;
}
$dmscid = $lastqmi->{'tlvs'}{0x01}[1]; # save the DMS CID
print "Got QMI DMS client ID '$dmscid'\n" if $verbose;


# Bootloader mode trumps the rest of this script....
if ($qdl) {
    $lastqmi = &do_qmi(0x003e, &mk_qmi(2, $dmscid, 0x003e, {}));
    &quit;
}

#QMI_DMS_SWI_SETUSBCOMP (or whatever)
# get USB comp = 0x555B
# set USB comp = 0x555C
# "Set FCC Authentication" =  0x555F
##print F &mk_command_msg('EXT_QMUX', 1, 1,  &mk_qmi(2, $dmscid, 0x555c, { 0x01 => $usbcomp}));
# wait for response and decode

# always get first.  We need the list of supported settings to allow set
$lastqmi = &do_qmi(0x555b, &mk_qmi(2, $dmscid, 0x555b, {}));
&quit unless $lastqmi;
my $current = $lastqmi->{'tlvs'}{0x10}[0];
my @supported = @{$lastqmi->{'tlvs'}{0x11}};
my $count = shift(@supported);

# basic sanity:
if ($count != $#supported + 1) {
    print "ERROR: array length mismatch, $count != $#supported\n";
    print to_json(\@supported),"\n";
    &quit;
}

&quit unless (grep { $current == $_ } @supported); # verify that the current comp is supported

# dump current settings
printf "Current USB composition: %d\n", $current;
if ($verbose) {
    print "USB compositions:\n";
    for my $i (sort { $a <=> $b } keys %comps) {
	printf "%s %2i - %-48s %sSUPPORTED\n", $i == $current ? '*' : ' ', $i, $comps{$i}, (grep { $i == $_ } @supported) ? '' : 'NOT ';
    }
}

# want a new setting?
&quit unless defined($usbcomp);

# no need to change to the current setting
if ($usbcomp == $current) {
    print "Current setting is already '$usbcomp'\n";
    &quit;
}

# verify that the new setting is supported
unless (grep { $usbcomp == $_ } @supported) {
    print "USB composition '$usbcomp' is not supported\n";
    &quit;
}

# attempt to change USB comp
if (!&do_qmi(0x555c, &mk_qmi(2, $dmscid, 0x555c, { 0x01 => pack("C", $usbcomp)}))) {
    print "Failed to change USB composition to '$usbcomp'\n";
}

&quit;

sub _slurp {
    my $f = shift;
    local $/ = undef;
    open(X, $f) || return '';
    my $ret = <X>;
    close(X);
    $ret =~ tr/\n//d;
    return $ret;
}

sub major
{
    my $dev = shift;
    return ($dev & 0xfff00) >> 8;
}

sub minor
{
    my $dev = shift;
    return ($dev & 0xff) | (($dev >> 12) & 0xfff00);
}

# attempt to reset USB device using devio ioctl
sub usbreset {
    require 'sys/ioctl.ph';
    eval 'sub IOCTL_USBDEVFS_RESET () { &_IO(ord(\'U\'), 20); }' unless defined(&IOCTL_USBDEVFS_RESET);

    # need to find the correct usbdevfs device - this is a bit awkward
    my $rdev = (stat($mgmt))[6];
    my $dev = sprintf("/sys/dev/char/%u:%u/device/..", &major($rdev), &minor($rdev));
    my $devnode = sprintf("/dev/bus/usb/%03u/%03u", &_slurp("$dev/busnum"), &_slurp("$dev/devnum"));

    # this is another one!
    $rdev = (stat($devnode))[6];

    # something wrong
    unless ($rdev) {
	print "ERROR: unable to stat '$devnode'\n";
	return;
    }

    # verify that we got the right one
    if (&_slurp("$dev/dev") ne sprintf("%u:%u", &major($rdev), &minor($rdev))) {
	print "ERROR: '$devnode' and '$mgmt' belong to different devices!\n";
	return;
    }

    my $foo = 0;
    unless (open(X, ">$devnode")) {
	print "ERROR: cannot open '$devnode': $!\n";
	return;
    }
    if (!ioctl(X, &IOCTL_USBDEVFS_RESET, $foo)) {
	print "USBDEVFS_RESET ioctl failed: $!\n";
    }
    close(X);
}

sub quit {
    if ($dmscid) {
	# reset device? DMS_SET_OPERATING_MODE => RESET
	if ($reset) {
	    &do_qmi(0x002e, &mk_qmi(2, $dmscid, 0x002e, { 0x01 =>  pack("C", 4)}));
	}

	# release DMS CID
	# QMI_CTL_RELEASE_CLIENT_ID
	&do_qmi(0x0023, &mk_qmi(0, 0, 0x0023, { 0x01 =>  pack("C*", 2, $dmscid)}));
    }

    if ($mbim) {
	# send CLOSE
	print F &mk_close_msg;
    } else {
	# simply signal reader to quit
	kill 'TERM', $pid;
    }

    # wait for the reader to exit (on CLOSE_DONE)
    waitpid($pid, 0);

    close(F);

    # dump all messages received
##    print Dumper($msgs) if $debug;

    # attempt to reset USB device
    &usbreset if ($usbreset);

    exit 0; # will exit parent
}
    
sub usage {
    print STDERR <<EOH
Usage: $0 [options]  

Where [options] are
  --device=<dev>        use <dev> for MBIM or QMI commands (default: '$mgmt')
  --usbcomp=<num>	change USB composition setting
  --reset		issue a QMI reset request
  --usbreset		USB device reset - might be necessary for MC74xx
  --qdl                 reboot modem into bootloader QDL mode
  --debug		enable verbose debug output
  --help		this help text

  The current setting and supported modes will always be displayed
  

EOH
    ;
    exit;
}

#+end_src
***** Using the script
:PROPERTIES:
:CUSTOM_ID: h:18452ED1-6286-4BF5-8490-4D10DD163A84
:END:
- To put the modem into QMI mode for use with routers and embedded devices, run this command:
  =sudo perl swi_setusbcomp.pl --usbcomp=6=
- To put the modem into MBIM mode for use with desktop GNU/Linux, run this command:
  =sudo perl swi_setusbcomp.pl --usbcomp=8=
- after, do =./swi_usbcomp.pl –reset= (might or might not be necessary but can't hurt!)
****** using QMI mode (confirmed =Current USB composition: 6=) - QMI seemed preferable in this case
:PROPERTIES:
:CUSTOM_ID: h:0846A782-D4F9-4435-A9EB-394073D24E65
:END:
****** downloading Sierra firmware:
:PROPERTIES:
:CUSTOM_ID: h:721B19D5-A648-403E-BF98-20A14504B7FA
:END:
- =curl -o swi9x30c_02.33.03.00_generic_002.072_000.zip https://source.sierrawireless.com/\~/media/support_downloads/airprime/74xx/fw/7455/swi9x30c_02.33.03.00_generic_002.072_000.zip=
- (check that the link and file are valid):
  - =curl -sI https://source.sierrawireless.com/\~/media/support_downloads/airprime/74xx/fw/7455/swi9x30c_02.33.03.00_generic_002.072_000.zip=
- unzip firmware: =unzip swi9x30c_02.33.03.00_generic_002.072_000.zip=
  - this will unzip to two files: a =.cwe= and an =.nvu= file
****** resetting firmware done in root (=sudo -i=), and in firmware download directory
:PROPERTIES:
:CUSTOM_ID: h:3FEB5679-3A48-467E-8AA0-C19390E98444
:END:
- need to stop ModemManager first! =sudo systemctl stop ModemManager=
- (restart at end =sudo systemctl start ModemManager && sudo systemctl enable ModemManager=)
******* set =deviceid=:
:PROPERTIES:
:CUSTOM_ID: h:C4A6F66A-51A5-4885-B235-6B014D908DD0
:END:
- =deviceid=`lsusb | grep -i -E '1199:9071|1199:9079|413C:81B6' | awk '{print $6}'`=
  - (for MC7354 would be =deviceid=`lsusb | grep -i -E '1199:9071|1199:68c0|413C:81B6' | awk '{print $6}'`=
 
- make sure you got it: =echo $deviceid=
******* then install firmware:
:PROPERTIES:
:CUSTOM_ID: h:7B3C6F04-F442-418C-A222-E50A469C7FF5
:END:
- =qmi-firmware-update --update -d "$deviceid" SWI9X30C_02.33.03.00.cwe SWI9X30C_02.33.03.00_GENERIC_002.072_000.nvu=
- will take a few minutes, with a few reboots of modem, if works will end with message =firmware update operation finished successfully=
**** Communicating with modem
:PROPERTIES:
:CUSTOM_ID: h:A61D432F-1F32-4368-92A2-33E00ACE8536
:END:
***** ways to see if the modem is available / status
****** =rfkill=
- =rfkill list all= (but deprecated)
- =rfkill= by itself lists all
- if blocked, unblock with =rfkill unblock=
- (=rfkill= needs to be run as =sudo=)
****** =mmcli= control and monitor ModemManager
- =mmcli -L= list modem details
- this showed for the EM7455 on <2020-11-01 Sun>:
- =/org/freedesktop/ModemManager1/Modem/0 [Sierra Wireless, Incorporated] EM7455B=
- the number at the end of the path is the ID of the modem, in this case =0=
- get details:
  =mmcli -m 0=
****** using =mbimcli= - "control MBIM devices"
- modem needs to be in MBIM mode!
- =sudo mbimcli --device=/dev/cdc-wdm0  --query-device-caps= query device capabilities
- =sudo mbimcli --device=/dev/cdc-wdm0  --query-subscriber-ready-status= does what you imagine it does
- =sudo mbimcli -p -d /dev/cdc-wdm0 --query-radio-state= function also not surprising!
****** =mbim-network= - "Simple network management of MBIM devices"
- again, needs to be in =MBIM= mode
- needs to have a script written in =/etc/mbim-network.conf=; on <2020-11-01 Sun> this script was:
  #+begin_src bash
APN=fast.t-mobile.com
PROXY=yes
  #+end_src
- =sudo mbim-network /dev/cdc-wdm0 start= - starts the network connection
- =sudo mbim-network /dev/cdc-wdm0 status= - status of the network connection
- after =start=, restart =ModemManager=: =sudo systemctl restart ModemManager=
- then restart =NetworkManager=: =sudo systemctl restart NetworkManager=
- follow the process: =journalctl --follow -u ModemManager -u NetworkManager=
- ask =mbimcli= which IP, gateway, DNS we can use:
  =sudo mbimcli -d /dev/cdc-wdm0 -p --query-ip-configuration=
- we got an IPv4 IP and subnet =6.146.149.185/30=
- and a gateway of =6.146.149.186=
- so to set it up, =sudo ip link set dev wwan0 up=
- and =sudo ip addr add 6.146.149.185/30 dev wwan0=
- set gateway: =sudo ip route add default via 6.146.149.186 dev wwan0=
****** in =minicom=
- =at+cpin?= - gets status of SIM card - for example will tell you if it is not inserted, is locked, etc. (this gave me =READY= on <2020-11-01 Sun 01:04> which I think means the SIM is unlocked and ready to go?)
- =at+CMEE=2= - sets extended error codes for a verbose format
- =at!gstatus?= - current connection info
***** identify USB designation:
:PROPERTIES:
:CUSTOM_ID: h:7FB23184-54BE-434E-87BD-57DC7ABC729E
:END:
- ttyUSB=$(dmesg | grep '.3: Qualcomm USB modem converter detected' -A1 | grep -Eo 'ttyUSB[0-9]$' | tail -1)
    devpath=$(find /dev -maxdepth 1 -regex '/dev/cdc-wdm[0-9]' -o -regex '/dev/qcqmi[0-9]')
- =echo $ttyUSB= should give you the current address to which modem is connected (was =ttyUSB2= the first time I did this)
***** consistent naming with UDEV
:PROPERTIES:
:CUSTOM_ID: h:F0CD75F8-A905-42C2-9CA7-3B197389ED19
:END:
- [[https://www.domoticz.com/wiki/Assign_fixed_device_name_to_USB_port][this]] seems like a good resource (from domoticz wiki), also [[http://hintshop.ludvig.co.nz/show/persistent-names-usb-serial-devices/][this]]
- the problem is that the device attached to USB can change its name with each reboot.  We want a way to be able to consistently refer to the USB device through multiple reboots.  This can be done using =udev=.
- get the various IDs of the USB device, note them down (these IDs will also show up in =dmesg=):
  - =sudo lsusb -v | grep 'idVendor\|idProduct\|iProduct\|iSerial'=
  - just find serial =udevadm info -a -n /dev/ttyUSB2 | grep '{serial}' | head -n1=
   
- put them in a rules file
  - =sudo nano /etc/udev/rules.d/99-usb-serial.rules=
    - contents of this file:
      SUBSYSTEM=="tty", ATTRS{idVendor}=="1199", ATTRS{idProduct}=="9071", ATTRS{serial}=="LF84664161031026", SYMLINK+="ttyUSB-modem"
    - load the rule =sudo udevadm trigger=
    - check that it worked:
      - =ls -l /dev/ttyUSB*=
      - with output:
        #+begin_src bash
❯ ls -l /dev/ttyUSB*
lrwxrwxrwx 1 root root         7 Oct 28 20:11 /dev/ttyUSB-modem -> ttyUSB2
crw-rw---- 1 root dialout 188, 0 Oct 28 20:11 /dev/ttyUSB0
crw-rw---- 1 root dialout 188, 1 Oct 28 20:11 /dev/ttyUSB1
crw-rw---- 1 root dialout 188, 2 Oct 28 20:11 /dev/ttyUSB2
        #+end_src
***** Trying with Pi
:PROPERTIES:
:CUSTOM_ID: h:32C60FD9-5C20-47DF-A267-8DFB362744BE
:END:
- good AT command guide at [[https://ltehacks.com/viewtopic.php?t=33][LTE Hacks]]
- need to stop ModemManager first! (otherwise it can AT command spam)
  =sudo systemctl stop ModemManager=
  =sudo systemctl disable ModemManager=
  
- =sudo minicom -b 115200 -D /dev/ttyUSB2=
  - first, check that =AT= returns =OK=. If text is not echoing to minicom console, enter =ATE=
- commands and explanations (from [[https://github.com/danielewood/sierra-wireless-modems#basic-setup][here]])
  1. Enable advanced commands
     - ~AT!ENTERCND="A710"~       
  2. Set preferred image to GENERIC (will error if Generic does not exist)
     - ~AT!IMPREF="GENERIC"~
  3. Set LTE only (disables UMTS/HSPDA/3G fallback)
     -~AT!SELRAT=06~
  4. Set modem to use all available bands (don't hide any bands)
     - ~AT!BAND=00~
  5. Save settings and reboot modem to apply
     - ~AT!RESET~
** setting up OpenWRT in LXC container, on RPi4, now using Ubuntu 20.10
:PROPERTIES:
:CUSTOM_ID: h:52B1328E-65EB-4275-8532-92E1B0BFCEB3
:END:
*** <2020-10-29 Thu> - while I was messing around with all the stuff below, Canonical released a version of Ubuntu 20.10 with direct support for the Raspberry Pi 4.  Things got a lot easier, keeping below stuff for now for archival purposes
:PROPERTIES:
:CUSTOM_ID: h:1E7F0A75-99C8-454F-953D-B8B9EBA86AAB
:END:
- for one thing, LXD comes pre-installed along with native ARM stuff
**** install with =Raspberry Pi imager=
- if ip assigned by DHCP, run =nmap -p 22 192.168.1.1/24= to find the device with an open port 22
- initial user / pass is =ubuntu/ubuntu=
*** uninstalled netplan, replaced with =ifupdown=, =/etc/network/interfaces=
:PROPERTIES:
:CUSTOM_ID: h:7A0C42F7-5505-4540-9F7C-4190C448CB31
:END:
shown [[#h:89058F12-F0AB-4319-9197-AFE5FA1695DA][here]]
*** install necessary things for bridge (and removing netplan):
:PROPERTIES:
:CUSTOM_ID: h:38EC11EC-55E1-4173-AE7D-823D21CF978B
:END:
- sudo apt-get install bridge-utils ifupdown net-tools resolvconf
*** refigure =/etc/network/interfaces=
- replaced with this:
  #+begin_src bash
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).
source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

# Bridge
auto br0
iface br0 inet static
  address 192.168.1.145
  netmask 255.255.255.0
  gateway 192.168.1.1
  bridge_ports eth0
  bridge_stp off
  bridge_fd 0
  bridge_maxwait 0
  #+end_src
  
- then =sudo ifup br0=
- when it all comes up, =eth0= is now attached to =br0=, gets the same static ip address
- verify all these things: =ip a show=, =ip r=
- then we want =lxc= to use this bridge
*** LXD init
**** make sure zfs is installed:
- =sudo apt install zfsutils-linux=
- if =zfs= is installed then the =LXD init= choices include it
**** default answers to everything.  ZFS pool = =lxdpool=
*** making an OpenWrt container:
- we're going to use =lxc image import= after putting all this together
**** download and process OpenWrt rootfs:
- trying 64 bit ARM located [[https://downloads.openwrt.org/releases/19.07.4/targets/armvirt/64/openwrt-19.07.4-armvirt-64-default-rootfs.tar.gz][here]]:
  - =wget https://downloads.openwrt.org/releases/19.07.4/targets/armvirt/64/openwrt-19.07.4-armvirt-64-default-rootfs.tar.gz=
- then create =metadata.yaml= file, containing this:
  =architecture: "armhf"=
  =creation_date: 1604007023= (get unix time [[https://www.epochconverter.com/][here]])
- tar the =metadata.yaml= file:
  =tar cvf openwrt-meta.tar metadata.yml=
- import the image to =lxc=:
  - =lxc image import openwrt-meta.tar default-root.tar.gz  --alias openwrt_armhf=
**** Create the OpenWrt container
- =lxc init local:openwrt_armhf router=
- =lxc config set router security.privileged true=
**** Add USB enclosure to container (having previously made persistent name with =udev)=
- =lxc config device add router usbmodem unix-char path=/dev/ttyUSB-modem=
  - in this case =usbmodem= is just what I decided the name would be; =router= is the name of the container as it was set up above
**** Make a profile for this container
- =lxc profile create openwrtrouter=
- =lxc profile edit openwrtrouter=
- put in this file:
  #+begin_src bash
config: {}
description: Profile for OpenWRT router image
devices:
  eth0:
    name: eth0
    nictype: bridged
    parent: lxdbr0
    type: nic
  eth1:
    name: eth1
    nictype: bridged
    parent: br0
    type: nic
  root:
    path: /
    pool: lxdpool
    type: disk
  usbmodem:
    path: /dev/ttyUSB-modem
    type: unix-char
name: openwrtrouter
used_by: []
  #+end_src
**** Edit container to have two interfaces
- =lxc config edit router=
- added only =eth1= line, simply incremented =eth0= MAC:
   =volatile.eth0.hwaddr: 00:16:3e:31:72:d8=
   =volatile.eth1.hwaddr: 00:16:3e:31:72:d9=
**** assign profile to router
- =lxc profile assign router openwrtrouter=
- =lxc profile remove router default= (if =default= profile is assigned to =router=, which it probably isn't)
**** start the cntainer!
- =lxc start router=
**** configure openwrt firewall
The LuCI web interface will be our primary way of talking to the router, and it is blocked by default.  So we have to go in and change the firewall rules in there (and we have to use =vi= because it's the only editor in there!)
- get in the container: =lxc exec router sh=
- open the firewall config: =vi /etc/config/firewall=
- add this to end of file:
  #+begin_src bash
...
config rule                      
        option target 'ACCEPT'   
        option src 'wan'         
        option proto 'tcp'    
        option dest_port '80'    
        option name 'ext_web'
  #+end_src
- remember, =i= to enter insert mode, quit and write file by =ESC= to enter command mode, then =:wq=   Just quitting (without saving) is =q!=
- restart firewall =/etc/init.d/firewall restart=
**** after all that,
***** can reach openwrt web page from Pi (using lynx) but not from outside the Pi
- which I thought was the whole point of setting up all the network stuff above
- the container /does/ seem to get its own ip on the LAN, assigned by the router's DHCP, but can't reach the openwrt webpage
- perhaps, port 80 needs to be explicitly sent out of the container, as Simos talks about [[https://blog.simos.info/how-to-use-the-lxd-proxy-device-to-map-ports-between-the-host-and-the-containers/][here]].
- so, =lxc config device add router port80 proxy listen=tcp:0.0.0.0:80 connect=tcp:127.0.0.1:80=?
- it worked! but slightly weirdly, through the ip address of the container host (192.168.1.135) and not through the ip of the container (192.168.1.138) that I had worked so hard to get out on the LAN (and which /is/ there!)
*** install LXD
:PROPERTIES:
:CUSTOM_ID: h:D0266F3E-EB24-4804-825D-C8DC7051E0AE
:END:
**** first, install snap
:PROPERTIES:
:CUSTOM_ID: h:F80A1F48-6945-4495-B709-0D8469E774D3
:END:
- =sudo apt-get install snapd bridge-utils=
- =sudo snap install core lxd=
- add snap to PATH
  - I added this to =.zshrc=: ~export PATH="/usr/bin/snap:/snap/bin:$PATH"~ but I think there are less clumsy ways to do this <2020-10-24 Sat>
**** add user to =lxd= group
:PROPERTIES:
:CUSTOM_ID: h:EA8714F8-5DFF-4A69-A82A-D46C0FDD4DD5
:END:
- =sudo usermod -aG lxd nick=
**** Making a bridge
:PROPERTIES:
:CUSTOM_ID: h:97816FDA-6A4F-43A5-B7BF-73E295551946
:END:
***** in current version of Raspbian, =/etc/network/interfaces= isn't used anymore - it's all through =/etc/dhcpcd.conf=
:PROPERTIES:
:CUSTOM_ID: h:740AB6D6-662B-4C47-B964-FBCEFE3171FF
:END:
- but there are some things we can't do in =dhcpcd.conf=
- so, we disable =dhcpcd.conf= by replacing the whole thing with
  =denyinterfaces [all your active interfaces, i.e. eth0 eth1 etc]=
- then =/etc/network/interfaces= has:
  #+begin_src bash
auto lo

iface lo inet loopback

#built-in ethernet
iface eth0 inet static
        address 192.168.1.200
        netmask 255.255.255.0
        gateway 192.168.1.1
        broadcast 192.168.1.1
        dns-nameservers 192.168.1.1

# Include files from /etc/network/interfaces.d:
source-directory /etc/network/interfaces.d
  #+end_src

**** working from "Preparing the LXC host" on [[http://www.makikiweb.com/Pi/lxc_on_the_pi.html][this great guide]]
:PROPERTIES:
:CUSTOM_ID: h:4EAF3BF4-3510-46F9-B229-4C22B70A1A17
:END:
***** setting up an external bridge on the host
:PROPERTIES:
:CUSTOM_ID: h:28999971-901E-4D11-AEDA-5B8635244E2A
:END:
****** configure a bridge =br0= which will be attached to the =eth0= interface and later to the LXC containers
:PROPERTIES:
:CUSTOM_ID: h:7FB490BC-94E8-4664-B23A-AD28C711C456
:END:
- install =brctl= utility (controls / creatres linux bridges) and =ifupdown= package
  - =sudo apt-get install bridge-utils ifupdown= (already installed for me)
- edit the =/etc/network/interfaces= file to automatically set up =br0= and attach ethernet device.  Add these lines:
  #+begin_src bash
iface br0 inet dhcp
    bridge_ports eth0
    bridge_stp off
    bridge_fd 0
    bridge_maxwait 0
iface br0 inet6 dhcp
  #+end_src
- create / edit =/etc/systemd/network/br0.network=, add:
  #+begin_src bash
[Match]
Name=br0

[Network]
DHCP=yes
  #+end_src
- bring bridge up at boot:
  - create / edit =/etc/rc.local= and add:
    #+begin_src bash
#!/bin/bash
#
## put hacks here

# fix for br0 interface
/sbin/ifup br0
# kick networkd as well
/bin/systemctl restart systemd-networkd
echo "Bridge is up"
exit 0
    #+end_src
  - make it executable: =sudo chmod +x /etc/rc.local=
** Waterford
*** How to set up the network with /two/ ISP inputs
- would like to have both LTE and DSL available to users, but how to do it?
* side note: having consistent errors trying to run lxd (on RPi):
:PROPERTIES:
:CUSTOM_ID: h:14D9770D-AC3F-477D-85D6-25CB98FDD7FD
:END:
- ~ERROR: ld.so: object '/usr/lib/arm-linux-gnueabihf/libarmmem-${PLATFORM}.so' from /etc/ld.so.preload cannot be preloaded (cannot open shared object file): ignored.~
  - per things I found, this will not actually affect the running of LXD, but it sure is annoying!
  - has to do with the contents of =/etc/ld.so.preload=, which on the Pi is only =/usr/lib/arm-linux-gnueabihf/libarmmem-${PLATFORM}.so=, which seems to have to do with some kind of backwards compatibility blah blah blah.  Commenting out that line in =/etc/ld.so.preload= for now <2020-10-24 Sat> This worked OK, suppressed errors
- next error - when executing LXD with =sudo= kept getting =command not found=
  - seemed to be that, since =sudo= strips the path, it couldn't find LXD
  - this seemed hacky but couldn't find anything else:
  - added =/usr/bin/snap:/snap/bin= to send of =secure_path= in =sudo visudo= file; this worked.  <2020-10-24 Sat>

* side note - how to install VirtualBox Guest Additions in Ubuntu 18.04 server - nice rundown [[https://linuxize.com/post/how-to-install-virtualbox-guest-additions-in-ubuntu/][here]].
:PROPERTIES:
:CUSTOM_ID: h:CC1BFCCC-8DE1-40EB-B706-BE71C8FDA6FC
:END:
- has to be done on the virtual machine
* side note - best way to handle a server VM is honestly to ssh into it!
:PROPERTIES:
:CUSTOM_ID: h:187C4EAE-B290-451F-924E-50547F37AE62
:END:
- do all the below *on* the virtual machine
         - =sudo apt install openssh-server=
         - =sudo systemctl enable ssh=
         - =sudo systemctl start ssh=
         - =sudo systemctl status ssh= to be sure it's up
           then of course:
         - =sudo ufw allow ssh=
         - =sudo ufw enable=
         - =sudo ufw status= to check
         - enable port forwarding in VirtualBox settings:
           - rule name = ssh ; protocol = TCP ; Host port = 2222 ; Guest port = 22 ; Guest IP from VM
         - then can =ssh -p 2222 nick@127.0.0.1=
         - good summary of all this [[https://dev.to/yassineselllami/how-to-ssh-into-ubuntu-vm-virtualbox-from-host-machine-1kii][here]].

** Router to handle the connection
:PROPERTIES:
:CUSTOM_ID: h:4DFFF49A-5AFB-4D63-8386-508AC64A5755
:END:
- in an ideal world, would just be able to connect the LTE modem to a device, but - there seem to be issues with drivers and compatibility so it might be easier to have something in front.  Also better if other devices will attach to that signal.  /Also/ because we want to get some kind of info back from the modem, stats on connection etc.  [[https://ofmodemsandmen.com/][GoldenOrb / ROOter]] would be best, but need a compatible router which I don't have right now.  DO have a Raspberry Pi though!  Since GoldenOrb is based on OpenWrt, how about OpenWrt for RPi?
*** *OpenWrt for RPi4*, community build.  Here is the [[https://forum.openwrt.org/t/rpi4-community-build/69998][thread]] for the community build of OpenWrt for RPi4, leading to [[https://github.com/wulfy23/rpi4][this]] Github.
:PROPERTIES:
:CUSTOM_ID: h:C4C19522-9AA4-476A-B11E-6ACBDC943DD6
:END:
**** Installing:
:PROPERTIES:
:CUSTOM_ID: h:A3B4ED38-0F76-44DA-BA09-1D0C3A1E70CB
:END:
- download, put factory version on flash drive:
  =gzcat rpi4.64-snapshot-23290-1.9.15-29-r14315-ext4-fac.img.gz | dd of=/dev/disk2; sync=
** ancillary info:  
:PROPERTIES:
:CUSTOM_ID: h:3977A65A-8C7E-4325-8875-D470979CC2EE
:END:
*** [[https://www.reddit.com/r/Rural_Internet/comments/ih0ynx/questions_about_lte_plans/][Reddit thread]] with costs, options, equipment for rural LTE internet
:PROPERTIES:
:CUSTOM_ID: h:344C904F-37BC-4F2E-8017-A0F7867C5BE9
:END:
* Prometheus, InfluxDB, Grafana, and monitoring
** web resources:
- Dockerized Prometheus, Grafana, cAdvisor, NodeExporter, and AlertManager in [[https://github.com/stefanprodan/dockprom][stefanprodan's Github]]
- How-to set up Grafana dashboards to monitor Jitsi, a [[https://community.jitsi.org/t/how-to-to-setup-grafana-dashboards-to-monitor-jitsi-my-comprehensive-tutorial-for-the-beginner/38696][tutorial]] on the Jitsi community forums
- [[https://dev.to/project42/install-grafana-influxdb-telegraf-using-docker-compose-56e9][Install Grafana/InfluxDB/Telegraf using Docker Compose]]
- [[https://grafana.com/grafana/dashboards/11969][a Jitsi Metrics Grafana dashboard]]
- [[https://github.com/prometheus/node_exporter][Prometheus - node_exporter Github]]
- a [[https://yetiops.net/posts/prometheus-monitoring-other-os/][how-to]] on using Prometheus and ~node_exporter~ to monitor OpenWRT
- [[https://medium.com/platform-engineering/monitoring-traefik-with-grafana-1d037af5b952][using Prometheus and Grafana to monitor Traefik]]
- [[https://nwmichl.net/2020/07/14/telegraf-influxdb-grafana-on-raspberrypi-from-scratch/][Telegraf / InfluxDB / Grafana on RaspberryPi – From Scratch]]
** Setting it up on Falkie
- first steps in Docker on Falkie taken from [[https://blog.christophersmart.com/2019/09/08/setting-up-a-monitoring-host-with-prometheus-influxdb-and-grafana/][here]] - *Setting up a monitoring host with Prometheus, InfluxDB and Grafana*
  - they go on to talk about monitoring [[https://blog.christophersmart.com/2019/09/09/monitoring-openwrt-with-collectd-influxdb-and-grafana/][OpenWRT]]
- Also good stuff on [[https://medium.com/platform-engineering/monitoring-traefik-with-grafana-1d037af5b952][this]] - *Monitoring Traefik With Grafana* - scrapes data from Traefik into Prometheus, visualizes with Grafana apotheosis
** setting it up on dudley to monitor Jitsi
*** installing some things native rather than docker at first - telegraf in particular seems pretty insecure in Docker
**** on Jitsi server, set Jitsi config to expose stats
- in =/etc/jitsi/videobridge/config=, change
  - ~JVB_OPTS="--apis=rest,xmpp"~
- in =/etc/jitsi/videobridge/sip-communicator.properties=, change line to:
  - =org.jitsi.videobridge.STATISTICS_TRANSPORT=muc,colibri=
  - =sudo service jitsi-videobridge2 restart=
  - check the output
    - =curl -v http://127.0.0.1:8080/colibri/stats=
- then =sudo ufw allow 8080/tcp comment "so colibri rest endpoint can be reached by telegraf"=
**** on monitoring server (the one with prometheus / grafana etc:
***** install InfluxDB in docker
- image: influxdb:1.7.10
- through Traefik, port 8086
***** Install Telegraf in docker
- is insecure, but trying it for now <2020-12-24 Thu>
- IP 192.168.50.248 behind Traefik

* Wireguard
:PROPERTIES:
:CUSTOM_ID: h:9E595F6F-AA29-4100-8D4F-32FC35F832DE
:END:
** <2020-10-26 Mon> we'll be using 10.10.3.1/24 on the server (on falkie)
:PROPERTIES:
:CUSTOM_ID: h:8B7A7BF5-F921-414B-B616-EE21B44C1EF0
:END:
** Using /wireguard-vanity-address/ at [[https://github.com/warner/wireguard-vanity-address][this Github]] to make more legible public keys that can be vaguely linked to the device
- =cargo install wireguard-vanity-address=
- =wireguard-vanity-address <desired name> --in <range>= <range> - found within the first <range> characters of key
- then you watch the stuff run, generating public and private keys until you see the one you want. Stop with =ctrl-C= and copy your keys.
* mounting RPi SD card on mac
:PROPERTIES:
:CUSTOM_ID: h:20A3DA30-3AD2-4BC4-B2F4-F7C659A4DD49
:END:
** from [[https://medium.com/@iamalleksy/how-to-mount-raspberry-pi-sd-card-using-mac-3046abc2059a][here]]
:PROPERTIES:
:CUSTOM_ID: h:DF550C64-2198-4F59-9B15-32A67F7CF025
:END:
** all the stuff below /works/ but it's easier to do this:
:PROPERTIES:
:CUSTOM_ID: h:B1D45232-06B5-441E-91EF-ECE76877FEE7
:END:
1. shutdown Pi, put SD card in reader, attach to mac
2. load up VirtualBox Ubuntu server
3. attach the USB card reader to the VM
4. in Ubuntu, =lsblk= to see the device
5. it will be in =/dev/whatever=
6. mount it in a directory you make, or - again - wherever
7. by =sudo mount /dev/sdb2 /mnt/usb=
8. assuming it *is* ext4 that is
9. what tripped me up for a bit is that you mount =/dev/sdb2= rather than =/dev/sdb= for example
** issue is that ext4 FS is not readable by macOS - but we can install some helpers!
:PROPERTIES:
:CUSTOM_ID: h:90A254A9-908E-4ECC-A909-31F724BBD39A
:END:
*** install osxfuse and ext4fuse
:PROPERTIES:
:CUSTOM_ID: h:9105A953-7465-4608-902B-D939B70F34F9
:END:
- =brew cask install osxfuse=
- =brew install ext4fuse=
- restart mac
- make a mount point: =sudo mkdir /Volumes/raspberry=
- get partition identifier: =diskutil list=
- mount SD card: =sudo ext4fuse /dev/disk2s2 /Volumes/raspberry -o allow_other=
- =sudo umount /Volumes/raspberry= when done
*** probably better, since allegedly /writing/ to ext4 is not so great with above packages
:PROPERTIES:
:CUSTOM_ID: h:3A0C4448-B4CD-4210-9A4D-7F34FD056187
:END:
**** using Ubuntu VM:
:PROPERTIES:
:CUSTOM_ID: h:EA3CC548-B60A-4D80-9CA3-CDCAE6BB95B6
:END:
***** convert disk image .img to .vdi
:PROPERTIES:
:CUSTOM_ID: h:180B32B7-DC02-4A85-B427-D3921F7A320A
:END:
- vbox cannot read .img, so we convert to a =.vdi=
- in macos, VBoxManage is hidden in the application package, so we
  - ~alias vboxmanage='/Applications/VirtualBox.app/Contents/MacOS/VBoxManage'~ just to make this easier - don't need to!
- then =sudo vboxmanage convertdd raspberry.img raspberry.vdi=
- will need to change permissions of resulting file
***** mount to VM
:PROPERTIES:
:CUSTOM_ID: h:A6E01158-F49A-4788-8C18-79D5BFB14CC8
:END:
- in vbox, attach .vdi as additional storage to ubuntu server VM
- start up VM
- =fdisk -l= or whatever
- =sudo mkdir /mnt/pi=
- =sudo mount <drive> /mnt/pi=
- do stuff to files
- when done, =sudo umount /mnt/pi=
***** convert image back when done: .vdi to .img
:PROPERTIES:
:CUSTOM_ID: h:763FBA10-A80B-45E2-84F7-0F9E03E64CE9
:END:
- using same alias as above
- ~vboxmanage clonehd <nameofVDI>.vdi <nameOfNewImage>.img --format RAW~
  
* Resizing (shrinking) a partition - linux
:PROPERTIES:
:CUSTOM_ID: h:959BE653-B33A-4959-955F-C151FD21A617
:END:
** resize2fs first
:PROPERTIES:
:CUSTOM_ID: h:3A05A209-8E3E-42A1-A01E-BEFCFD433568
:END:
- boot on USB or something
  - (for Hetzner, boot in rescue mode)
- =lsblk= to make sure you know what's what
- =e2fsck= the partition first to make sure it's OK
- then (example) =resize2fs -p /dev/sdb3 120G=
** then =parted= / =resizepart=
:PROPERTIES:
:CUSTOM_ID: h:2CDB5B58-BD1C-4C82-93FA-B846C70F00AE
:END:
- =parted /dev/sdb=
  - find partition numbers with =print=
  - (parted) =resizepart=
    - partition number? 3
    - End?  [256GB]? 120
* making a new partition with the space that's left
:PROPERTIES:
:CUSTOM_ID: h:D5C0C411-9FDD-4ECF-A325-7A3CD4E1CD79
:END:
** =parted /dev/sdb print unit MB print free=
:PROPERTIES:
:CUSTOM_ID: h:BEEA2717-8905-480B-A6EE-80B07CFE235E
:END:
- starts at =140000MB=
** can run =gparted= through x11 by =sudo -E gparted= (after logging in with =-X= obvs)
:PROPERTIES:
:CUSTOM_ID: h:0AA5F0E5-4B16-4FEB-BC28-7DA858C7E979
:END:
* Backing up
:PROPERTIES:
:CUSTOM_ID: h:312223CC-B8F5-4377-82F9-D2CB015F40E2
:END:
** <2020-09-24 Thu> Not the best long-term thing, but
:PROPERTIES:
:CUSTOM_ID: h:C8F58BD6-333B-4FF6-867D-550E3207F2E5
:END:
- for a quick incremental image using =rsnapshot=.
- NOTE: in rsnapshot.conf, /need/ to use TABs
- To avoid backing up mounted drives as well, in =/etc/rsnapshot.conf= changed line to:
  - =backup  /             localhost/rootfs one_fs=1=
  - (this backs up the root directory but stays in the same filesystem)
- check configuration: (needs to be =sudo= if backing up root fs):
  - =sudo rsnapshot configtest=
- Dry run:
  - =rsnapshot -t daily=
- As long as daily has been set up in config, then back up with
  - =sudo rsnapshot daily=
- Maybe this little tidbit in the man page was why it kept copying my mounted media files anyway:
  - a ’*’ matches any path component, but it stops at slashes
    use ’**’ to match anything, including slashes.
- in =rsnapshot.conf= put in line: =exclude         /mnt/**=
* Traefik
:PROPERTIES:
:CUSTOM_ID: h:0AA9F953-8499-451B-AE8F-5C346B6B3F3B
:END:
** generating password to go into =.htpasswd=:
:PROPERTIES:
:CUSTOM_ID: h:254B93B3-0CBA-4A57-A3D4-FD17AEB23A04
:END:
#+begin_src bash
echo $(htpasswd -nb user password) | sed -e s/\\$/\\$\\$/g

htpasswd -b -c ~/temp/password admin test101

#+end_src

* serious DNS problems which led to being unable to use torrents, update jellyfin, etc
- <2020-11-11 Wed 18:33> not sure how it happened, could have been during an update of Ubuntu 20.04, or certainly could have been something I did without realizing it, but:
  - all of my Docker containers could no longer resolve DNS from inside
  - the Docker daemon seems to take the =/etc/resolv.conf= file from the host and divvy it out to the containers, but because of the way Ubuntu 20.04 sets up its own DNS using =resolved= the host =/etc/resolv.conf= file had useless IP addresses in it.  So from within a container, could not ping anything.
- solution, after hours of messing around, was to edit (=sudo nano /etc/docker/daemon.json=) the docker daemon config file and insert: ="dns": ["8.8.8.8", "8.8.4.4"]= into it.
- Perhaps not-so-coincidentally, also took out ="iptables": false= which I think I had put in there much earlier to try to mitigate the weird and self-serving stuff Docker does to iptables
  - I'll have to return to that issue later, I guess.
* Pelican
A static site generator, written in Python.  [[https://docs.getpelican.com/en/stable/index.html][documentation]].
** =m.css= - These days, this is the CSS framework and Pelican theme I'm using for general stuff.  [[https://mcss.mosra.cz/][site]].
- a bunch of things in this css do not seem to be working with Pelican 4.5.x, so it looks like the solution for now is to stay on 4.2 based on [[https://github.com/mosra/m.css/issues/181][this]] Github issue.
- Haha did not realize that pip can be used to downgrade as well, but good thing it can: =pip install --upgrade pelican==4.2.0= downgraded from 4.5.2.
** Setting up
- I'm using =pyenv= and lots of things are installed already, so this is more of an in-the-middle-of-things guide
- if you're making a new site, make that a new directory for it
- inside the new directory, set up the pyenv:
  pyenv local 3.7.3
- (I'm using 3.7.3 for Pelican at the moment, I think I had some weird trouble with 3.8 that may already be straightened out for all I know!)
- =pip install pelican=, though it's probably already installed for that pyenv
- =pelican-quickstart= runs the basic setup script
- the key files to copy over / change slightly if you have already been working on a different site, are =pelicanconf.py=, =publishconf.py=, =Makefile=, and =tasks.py=
** Writing pages
*** serving pages locally to look them over
- make your pages in the appropriate directories in =content=
- then =pelican -Dlr= to serve them up at http://localhost:8000
*** blog posts
- for the first time, I'm actually making quasi-blog posts instead of simply static pages, since I'm envisioning a set of different things that I would like to have inter-linked and related to each other.  Eventually I'd like to have more of a =readthedocs= kind of format.
- 
* Dual boot macos and ubuntu
:PROPERTIES:
:CUSTOM_ID: h:FC9CA4DB-A90C-4082-9DD2-7605C0EC44B8
:END:
** <2020-10-21 Wed> Had a bunch of problems before, so now starting again with [[https://help.ubuntu.com/community/How%20to%20install%20Ubuntu%20on%20MacBook%20using%20USB%20Stick][this guide from Ubuntu]]: Had tried with UNetbootin and R... boot
:PROPERTIES:
:CUSTOM_ID: h:5906CE34-C674-48AC-B7B9-15787510B6FF
:END:
*** (manual approach)
:PROPERTIES:
:CUSTOM_ID: h:64419066-6A97-40BD-9482-97664ACD0A23
:END:
1. download Ubuntu iso from [[https://ubuntu.com/download/desktop][ubuntu]] - I went for 20.04.1 LTS
2. in terminal, convert .iso to .img using =hdiutil=
   - =hdiutil convert /path/to/ubuntu.iso -format UDRW -o /path/to/target.img=
3. Run =diskutil list= to find current list
   a. insert the flash media (I'm still trying with an SD card in an adapter since I don't have a USB-C drive)
   b. run =diskutil list= again to determine the device node assigned to flash media (e.g. =/dev/disk2=) - note this.
4. run =diskutil unmountDisk /dev/diskN=
   (replace *N* with what you found in *3b*.
5. Execute =sudo dd if=/path/to/downloaded.img of=/dev/diskN bs=1m=
6. 
* macos stuff
:PROPERTIES:
:CUSTOM_ID: h:427420CF-80ED-4349-B662-062AE4604948
:END:
** pyenv
:PROPERTIES:
:CUSTOM_ID: h:96F45BD1-C3E8-4860-8F17-64B27BEFC85D
:END:
*** [[https://realpython.com/intro-to-pyenv/][this]] is a great primer on pyenv, thank goodness
:PROPERTIES:
:CUSTOM_ID: h:1E5A312C-87CF-41DF-9201-3E1044DE12C3
:END:
*** fixing homebrew's confusion about pyenv (from [[https://binx.io/blog/2019/04/12/installing-pyenv-on-macos/][here]]) <2020-10-21 Wed>
:PROPERTIES:
:CUSTOM_ID: h:21FE3C94-15A4-4247-A1AA-02390AEB3722
:END:
- create this wrapper for =brew= executable, so that it doesn't get so confused by =pyenv=.
- This needs to be placed in a directory that is a higher priority in the $PATH than =brew=.
- =brew= is at =/usr/local/bin/brew=, so will place at =/Users/nick/bin=
#+begin_src bash
#!/bin/sh
# check if pyenv is available
# edit: fixed redirect issue in earlier version
if which pyenv >/dev/null 2>&1; then
  # assumes default location of brew in `/usr/local/bin/brew`
  /usr/bin/env PATH="${PATH//$(pyenv root)\/shims:/}" /usr/local/bin/brew "$@"
else
  /usr/local/bin/brew "$@"
fi
#+end_src
- see also https://github.com/pyenv/pyenv/issues/106
* Securing email: Protonmail / Linode
:PROPERTIES:
:CUSTOM_ID: h:3E4D05D6-AA3F-49C4-BAE5-D8F0D85961CD
:END:
** DKIM
:PROPERTIES:
:CUSTOM_ID: h:92EFF3AD-D7F2-4459-9F56-263359607164
:END:
*** the dilemma:
:PROPERTIES:
:CUSTOM_ID: h:D56006C0-8535-4479-9100-2B2156441A5E
:END:
- for pm DKIM, needed to add CNAME to DNS records, but I couldn't figure out how to do what =pm= wanted in the Linode web GUI, os I turned to the =linode-cli= (which is at [[https://github.com/linode/linode-cli][this GitHub]])
*** the solution:
:PROPERTIES:
:CUSTOM_ID: h:6D8A369C-9A60-4DC1-A756-B582B2570EFC
:END:
**** used linode-cli to access the api
:PROPERTIES:
:CUSTOM_ID: h:DC7812D5-A334-45DD-B488-860A36342A7A
:END:
- on mac, installed linode-cli by =pip3 install linode-cli=. Then, install a personal token.
- then spent a while looking through the documentation (minimal) and finally found a format to mimic in the issues section on the GitHub
- this command worked:
  - ~linode-cli domains records-create 1310801 --type CNAME --name protonmail._domainkey --target="protonmail.domainkey.df32r4c5vqmpn3ofc5lbx2zpf7s7nitj2hcek6dch5swftnipoega.domains.proton.ch"~
  - (of course you have to put in three different versions, with the =--name= incrementing)
  - =1310801= is the id for =fob.monster= obtained through =linode-cli domains list=
  - the =--name= and the =--target= are from the variables that ProtonMail gives you
  - put in the =--debug= flag to get more verbose errors (or successes!)
  - An important thing here that kept screwing me up: PM gives you a value for the CNAME that ends in a =.= -- this is what kept getting rejected by the Linode API.  Strip the period.
* Looking around for new dedicated server
:PROPERTIES:
:CUSTOM_ID: h:56464DE6-8E4A-41A3-802A-AD68B253B11F
:END:
** Hetzner:
:PROPERTIES:
:CUSTOM_ID: h:0D162BF8-7EBC-4B53-ABD6-F4494BAB8E16
:END:
*** speeds over MTR from VA to Nuremberg center (10 pkts)
:PROPERTIES:
:CUSTOM_ID: h:5D8D260C-F5EE-4C4E-91D2-426F065410FE
:END:

| time    | server               | Loss% | Snt | Last | Avg  | Best |  Wrst | StDev |
|---------+----------------------+-------+-----+------+------+------+-------+-------|
| 3pm     | nbg.icmp.hetzner.com |  0.0% |  10 |  7.0 | *19.6* |  4.6 | 110.7 |  32.4 |
| 11pm    | nbg.icmp.hetzner.com |  0.0% |  10 | 10.8 | *8.3*  |  5.1 |  11.7 |   2.5 |
| 11:30pm | nbg.icmp.hetzner.com |  0.0% |  10 | 13.4 | *10.9* |  5.8 |  27.9 |   6.6 |
|---------+----------------------+-------+-----+------+------+------+-------+-------|


*** speeds over MTR from VA to Falkenstein:(10 pkts)
:PROPERTIES:
:CUSTOM_ID: h:B1B51300-A101-450A-A95C-FB404E66EAE2
:END:

| time    | server               | Loss% | Snt | Last | Avg  | Best |  Wrst | StDev |
|---------+----------------------+-------+-----+------+------+------+-------+-------|
| 3pm     | fsn.icmp.hetzner.com |  0.0% |  10 | 13.5 | *22.8* |  7.3 | 104.9 |  29.4 |
| 11pm    | fsn.icmp.hetzner.com |  0.0% |  10 | 11.3 | *9.6*  |  4.5 |  14.3 |   2.8 |
| 11:30pm | fsn.icmp.hetzner.com |  0.0% |  10 |  2.8 | *13.6* |  2.8 |  61.7 |  17.5 |
|---------+----------------------+-------+-----+------+------+------+-------+-------|


*** speeds over MTR from VA to Helsinki:(10 pkts)
:PROPERTIES:
:CUSTOM_ID: h:C1ADF9D8-D221-46CF-ADA2-3F7B979238EA
:END:

| time    | server               | Loss% | Snt | Last | Avg  | Best | Wrst | StDev |
|---------+----------------------+-------+-----+------+------+------+------+-------|
| 3pm     | hel.icmp.hetzner.com |  0.0% |  10 | 12.3 | *10.4* |  6.1 | 20.0 |   3.8 |
| 11pm    | hel.icmp.hetzner.com |  0.0% |  10 |  4.2 | *9.1*  |  3.3 | 19.9 |   5.9 |
| 11:30pm | hel.icmp.hetzner.com |  0.0% |  10 |  7.2 | *11.2* |  3.1 | 42.8 |  11.6 |
|---------+----------------------+-------+-----+------+------+------+------+-------|

** Reprise hosting:
:PROPERTIES:
:CUSTOM_ID: h:E7AFE2C9-EE1B-4978-B914-53BD986AC768
:END:
*** speeds over MTR from VA to Reprise (10 pkts avg)
:PROPERTIES:
:CUSTOM_ID: h:811D7924-B2A6-4371-8202-46F9F29CA4C9
:END:

| time    |          server | Loss% | Snt | Last | Avg  | Best | Wrst | StDev |
|---------+-----------------+-------+-----+------+------+------+------+-------|
| 3pm     | 162.253.153.104 |  0.0% |  10 | 11.9 | *14.5* |  6.9 | 37.2 |   8.5 |
| 11:30pm | 163.253.153.104 |  0.0% |  10 | 12.3 | *16.3* |  9.0 | 33.7 |   8.4 |
| 12:30am | 164.253.153.104 |  0.0% |  10 |  9.2 | *8.0*  |  3.1 | 13.9 |   3.0 |
|---------+-----------------+-------+-----+------+------+------+------+-------|

* Hetzner server
:PROPERTIES:
:CUSTOM_ID: h:0AC7C2FD-226F-446B-8004-5779C471B161
:END:
** [[https://robot.your-server.de/server][Robot address]]
:PROPERTIES:
:CUSTOM_ID: h:69E370BB-A5EB-47B2-92B6-671A00870BA9
:END:
** SSD and HDD
:PROPERTIES:
:CUSTOM_ID: h:B18E34AC-433A-4373-B9D3-71664E3E7C15
:END:
Eventually figured out how to put OS on SSD.  On first =installimage= comment out all drives but SSD, change SSD name to =DISK1=
*** However,
:PROPERTIES:
:CUSTOM_ID: h:27079A5F-6E20-4ACF-89B8-ECAA116E850A
:END:
- doesn't boot right. What I would like is to have the OS boot off of the SSD. I want the HDDs to just be file storage.  Working from [[https://hostedtalk.net/t/hetzner-setting-additional-ssd-as-boot/1865/13][this]] discussion, started over.
- The issue with my server is that the SSD is locared at sdc instead of sda, so you gotta do all kinds of tricky things to tget it to boot first.  Which are detailed here:
*** remove all partitions using =parted=
:PROPERTIES:
:CUSTOM_ID: h:2E11BD12-DA63-416B-9005-37DD192446FC
:END:
- all you need to do is make a new partition table, and everything prior is erased
*** using =installimage=, commented out HDDs and changed SSD name to DISK1
:PROPERTIES:
:CUSTOM_ID: h:095C0287-EB47-49AE-AC8B-BFDD41D0D432
:END:
- so, installed ubuntu to SSD
- (changed SWRAID to 0)
*** first steps:
:PROPERTIES:
:CUSTOM_ID: h:D6327BA2-AB39-48E7-9F24-2E6AB70D6290
:END:
- create a small (~10MB) partition on each 3TB disk, type set to bios boot:
  - using =gdisk=:
    - for bios-boot partition
      - =<n>= - new partition
      - =<enter>= - first available sector
      - =+10M= - 10MiB in size
      - type: =ef02= - bios boot
    - for rest
      - =<n>= - new partition
      - =<enter>= - first available sector
      - =-0= - to end
      - type: =8300= - linux file system
  - =w= to write and quit when done
*** then, root partition appears to be =/dev/sdc3=
:PROPERTIES:
:CUSTOM_ID: h:4E47CF91-C45A-4CDB-9D4D-C534ABF79D88
:END:
- boot partition appears to be =/dev/sdc2/=
- so:
  1. =mount /dev/sdc3 /mnt=
  2. =mount /dev/sdc2 /mnt/boot=
- this way both root and boot partitions are mounted
*** bind mount dev/proc/sys into root-partition
:PROPERTIES:
:CUSTOM_ID: h:EA7BE75D-2ECD-4EEF-9005-B10FE2FF23AA
:END:
- =for f in proc sys dev ; do mount --bind /$f /mnt/$f ; done=
- =chroot /mnt /bin/bash=
- =grub-install /dev/sda=
- =grub-install /dev/sdb=
- =update-grub=
- =reboot=
*** Holy shit that worked!
:PROPERTIES:
:CUSTOM_ID: h:146EF8EF-5803-44BC-87E7-7D9A5E505DA7
:END:
*** However, still no file system
:PROPERTIES:
:CUSTOM_ID: h:11C3702B-2CE1-497F-BA39-FFE2E01BA85A
:END:
- In both fdisk and gdisk, partitions are made without file systems, so
  - =mkfs.ext4 /dev/sdb2= for example
  - This worked for both of them
*** Setting up mount points and fstab:
:PROPERTIES:
:CUSTOM_ID: h:7E12DDAC-87D3-4163-95E1-56F69CEE7860
:END:
- mounted sda2 at /mnt/driveA, sdb2 at /mnt/driveB
- made a =data= group to own them
- =sudo usermod -aG data USERNAME= to add users to the group
- used =chmod g+s .;= to (hopefully) sets the group id (setgid) on the current directory, which should mean that new files will inherit the ownership - even if copied (but not if moved)
filebot -rename . --db TheTVDB  --lang en --order DVD --mode interactive=
** setting up a virtual desktop
:PROPERTIES:
:CUSTOM_ID: h:BF372600-B038-48FA-9954-29D08EC2550E
:END:
- [[https://www.reddit.com/r/Ubuntu/comments/9s2yo3/reliable_vnc_or_rdp_to_ubuntu_1804_or_1810/][this]] timely Reddit thread!
- installing xrdp from [[https://linuxize.com/post/how-to-install-xrdp-on-ubuntu-20-04/][this]] guide
** running =gparted= with X11
:PROPERTIES:
:CUSTOM_ID: h:DC4E4F3B-A2AC-4AB0-9E42-A7E9E7B8E5AD
:END:
- when trying to run graphical =sudo gparted= got error =X11 connection rejected because of wrong authentication=; need to run gparted as =sudo=
- the problem is that the su doesn't have the magic-cookie; do this by
  - under normal user run =xauth list $DISPLAY=, which shows the mgic-cookie for the display
  - copy that (i.e. =frankiesaurus.com:11 mit-magic-cookie-1 4d22408aga55sad1ccd165723g77923ae=) and
  - switch to =su= and =xauth add frankiesaurus.com:11 mit-magic-cookie-1 4d22408aga55sad1ccd165723g77923ae=
  - if =xauth:  file root/.Xauthority does not exist= then =touch /​root/.Xauthority=
- done!
** using =timeshift= for snapshotting: [[https://github.com/teejee2008/timeshift][GitHub]]
:PROPERTIES:
:CUSTOM_ID: h:B4631D8A-1020-48BF-B4E6-321633FF0538
:END:
- just for system files, analogous to =System Restore= or =Time Machine=
- =sudo add-apt-repository -y ppa:teejee2008/timeshift=
- =sudo apt-get update=
- =sudo apt-get install timeshift=
- to run in gui, =timeshift-gtk=
** ramdisk
*** filesystem should be =tmpfs= - there is an older =ramdisk= filesystem
*** howto:
- *make the directory*  I decided to put it in =/mnt= because that's where all my other bespoke directories are, but you can put it anywhere in the file structure.
  =sudo mkdir /mnt/ramdisk=
- *mount the directory* This will mount an 8G ramdisk
  =sudo mount -t tmpfs -o size=8192M tmpfs /mnt/ramdisk=
- *automount it at boot* Put this entry in =/etc/fstab=
  =tmpfs /mnt/ramdisk tmpfs nodev,nosuid,noexec,nodiratime,size=8192M 0 0=
* Helping with mom's computer
:PROPERTIES:
:CUSTOM_ID: h:2976841D-FB46-4028-899D-6655BF4D347E
:END:
** (Lenovo X1) Fixed:
:PROPERTIES:
:CUSTOM_ID: h:8FDD6D03-731C-489B-97EB-5E626636BF29
:DATE: <2020-09-07 Mon>
:END:
- Showed her how to put bookmarks in bookmarks bar, worked on those
- Cleaned up notification bar pinned apps
- Now, the Vhrome that is pinned there will open up signed into her account (or should!)
- Jumbled-looking text on Google Chrome but fine in other browsers (tried Firefox and Edge)
  - tried:
    - Turning on / off hardware acceleration in Google Chrome
    - Turning on / off TrueText
  - worked: For some reason, signing her back into her Google account fixed the problem
- Updated: Still on 1909, 2004 update not yet available and per people in Reddit worth skipping
  - Allowed Windows Update to do its thing, there were things that it was updating within 1909
  - Waiting to see how that worked
- Pending: For some reason, her desktop is not the nice blank slate I would want it to be - it's almost like some of the start button options are always on top.  Also her wallpaper keeps disappearing (though that might have to do with me signing in with TeamViewer)
** HP desktop
:PROPERTIES:
:DATE: <2020-11-04 Wed>
:END:
*** - Main issue described: sound not working
- it appears that, in fact, there are no speakers in her monitor, fairly common for high-grade monitors
- plugging headphones into jack on /monitor/ leads to disorted sound - but not if you plug them into the audio jack on the computer
- still getting distorted sound from headphone plug on monitor even with repeated updates of drivers, and trying different ones
*** disabling autoupdates: [[https://www.reddit.com/r/windows/comments/jpm4n1/permanently_turn_off_all_updates/][this reddit link]]
<2020-11-13 Fri> - done
** Printer - Brother HL-2280DW
- <2020-11-17 Tue>
- was not printing - had connection to network, but paper seeminlgy was not being picked up from tray.  Could hear some clicking indicating that it was trying, but could not pick up paper from full tray, indicated "no paper" error.
- Cleaned all pickup rollers as one usually does, no effect
- Finally found reference to the issue and a fix: [[https://www.ifixit.com/Answers/View/425107/HL-2280DW+paper+feed+not+working][here, answer at bottom]]
- Issue was a small plastic part (LY2579001) originally designed to part of a safey system I suppose? which did not allow the paper pickup rollers to engage if the paper tray was open
- part was $4.50 but after finding some other solutions and thinking it through, easier to just disable the system by permanently engaging that piece (could take the piece out completely if spring on one of the gears was replaced with a bigger, stronger one) - glued in a piece cut off of one of Frankie's wooden letter T's
- pictures
  - part with spring removed, disengaged
#+ATTR_ORG: :width 400
  [[file:/Users/nick/pictures/brother_printer_pickup_gears.jpg]]
  - block put in to permanently engage gear
#+ATTR_ORG: :width 400#+ATTR_ORG: :width 400
[[file:/Users/nick/pictures/brother_printer_gear_jammed_open1.jpg]]
#+ATTR_ORG: :width 400
[[file:/Users/nick/pictures/brother_printer_gear_jammed_open2.jpg]]
* Setting up advance directives in Virginia
:PROPERTIES:
:CUSTOM_ID: h:8E54A376-A8B3-415C-898F-B198DCA1C54F
:END:
** Some things to think about at the beginning:
:PROPERTIES:
:CUSTOM_ID: h:94BD3D79-BCB8-4220-9EDC-08AB46EFF75C
:END:
- So, you want to put something together so that you might have some degree of control over the things that happen to you in a hospital if you are unable to communicate or express your wants or needs.  That is a pretty good idea!  Here are some suggestions for how to go about this.

  The document you want to have produced at the end of all this goes by a bunch of different names, depending on where you live and depending on what your exact use of it will be.  It is most commonly called a "living will" or "health care advance directive."  It is sometimes called a "durable power of attorney for health care."  As the American Bar Association (ABA) says in its [[https://www.americanbar.org/groups/law_aging/resources/health_care_decision_making/consumer_s_toolkit_for_health_care_advance_planning/][discussion of this topic]]:

  #+begin_quote
  "Studies have shown that standard advance directive forms do little to influence end-of-life decisions without: (1) informed, thoughtful reflection about your wishes and values, and (2) personal communication between you and your likely decision-makers before a crisis occurs."
  #+end_quote

- In other words, it is important and good to have a piece of paper or electronic document that clearly states your wishes and desires for the kind of medical treatment you would like to receive when you are unable to express that choice.  It is also important to remember that this will only be a piece of paper (or a collection of 1s and 0s) - it can be and sometimes is ignored by medical practitioners.
  
  This means: the most important part of the advance directive that you fill out will be the very first section, the one that designates your health care proxy.  It is important to designate a health care proxy, and to have a thorough discussion with that person about the things that you would like or not like to have done during a health care crisis.  Your health care proxy could be anyone, but they should be a person that you trust to be able to carry out this role.  If you have family members who might get involved in making a health care decision for you, it is important to inform them that you have a health care proxy who will be formally designated to make those decisions for you.  In fact, you should tell the important people in your life about this the moment you do it!

  A quick aside - most people associate these documents and discussions and preparations with "end-of-life" things.  You know, deciding who will "pull the plug" on you or other morbid considerations.  Please remember that there can be plenty of situations in which you might be hospitalized, unable to communicate, but with every chance of recovery.  This is stil la situation in which having a health care proxy and a set of written advance directives will be useful.

  OK, those are just some preamble-type suggestions.  Keep them in mind.
** Starting with the process:
:PROPERTIES:
:CUSTOM_ID: h:4A3EC45D-8B09-4913-895A-304DF83D366A
:END:
- A good place to begin is the American Bar Association's Tool Kit for Health Care Advance Planning (found [[https://www.americanbar.org/groups/law_aging/resources/health_care_decision_making/consumer_s_toolkit_for_health_care_advance_planning/][here]]).  This walks you through some of the steps you need to think through when you are starting down this road.  This is a good place to start reading if you might still have some un certainty about what exactly you are getting yourself into.
** Then,
:PROPERTIES:
:CUSTOM_ID: h:FA5A0BD0-9E01-4578-8E06-6AEBF8865A1A
:END:
Once you've looked that over (or if you already think you know what you are doing!), the best place to get started with the specifics starts on the Virginia State Bar's page on healthcare decision-making (which is [[https://www.vsb.org/site/public/healthcare-decisions-day][right here]]).
  - That page has links to the most current versions of the forms you need to fill out, in PDF form (and with the fields set up in the PDF, so easier to fill out on your computer).
    - There are "short" and "full" versions of these forms - it doesn't look to me like the "full" versions add anything important, so I'd stick with the short versions.
    - Remember that as long as you have signed the form and had that signature witnessed, you can fill out as much or as little of the form as you want.  If all you want to do is designate a health care proxy, then fill out that part.  That's all you need.
  - Part C, on the second page of the short form, can be a little confusing for people.  It is the only part of the document in which you would need the signature of a licensed professional, but it only covers a particular situation: one in which you might object to a needed medical treatment, an objection you might not make in a better, healthier frame of mind.  *Section C* allows your health care proxy to make a health care decision for you over your explicit objection.  If you want to cover this situation in your advance directive, then get a licensed professional to sign this part for you.
  - The Virginia State Bar page also has a link to the [[https://connectvirginia.org/adr][Virginia Advance Health Care Directives Registry]] (VAHCDR) which is where you are able to securely store your directive forms.
    - Once you have created an account on the VAHDCR and stored your documents there, you can print out a wallet card to carry with you, which will allow people to access the VAHDCR and look up your stuff.
** So here's an outline of the process you might follow:
:PROPERTIES:
:CUSTOM_ID: h:E51A9164-739C-44A8-BC03-C32839A1ECF9
:END:
1) Read the ABA's tool kit [[https://www.americanbar.org/groups/law_aging/resources/health_care_decision_making/consumer_s_toolkit_for_health_care_advance_planning/][here]].
2) Think about who you would like to choose as your health care proxy.
3) Talk to that person, and plan to have a full and honest discussion about the kinds of medical care you want / don't want.  Be specific!  This is not a conversation in which you want to avoid talking about painful, awful things.  This is a conversation about painful and awful things, so just do that.
4) Download one of the forms from the [[https://www.vsb.org/site/public/healthcare-decisions-day][Virginia State Bar's Healthcare Decisions page]].  I suggest the [[https://www.vsb.org/sections/hl/Virginia_AD_Medical_Mental_End-of-Life_Healthcare_short.pdf][short version]] (<-- you can *right click* on that link, and "save as" a document to your computer).
5) Read the gray column on the left of each page of the form, as it has a pretty good explanation of the stuff you are filling out.
6) Remember that you can fill out as much or as little as you want - as long as you sign it and have the signature witnessed, the document is good.  Some people might, at the beginning, only want to designate a health care proxy.  That's fine!
7) Print out multiple copies and sign them.  Multiple copies, because it is good to have a few around, and you should be distributing them to (at least) your primary care physician and your health care proxy, as well as (possibly) some family members.  The important thing is that, if you were to end up in the hospital, it should not be too difficult to convey a copy of that form to the people caring for you in the hospital.  To that end, the next few steps will help:
8) Make an account at the [[https://connectvirginia.org/adr][Virginia Advance Health Care Directives Registry]] (VAHCDR).
9) Scan a signed copy of you advance directive, or electronically sign the digital version, and upload it to the VAHDCR.
10) Print out a wallet card to carry with you - this will allow people to access the electronic version of your advance directive.  This means that, even if you cannot communicate, there is a good chance the hospital will be able to find out who your health care proxy is and what your health care desires are.

I think that's pretty much it!

* Environment
** articles
*** [[https://www.cbc.ca/documentaries/the-passionate-eye/recycling-was-a-lie-a-big-lie-to-sell-more-plastic-industry-experts-say-1.5735618][CBC -  Recycling was a lie — a big lie — to sell more plastic, industry experts say]] - about documentary /Plastic Wars/
** videos
*** [[file:/Users/nick/Movies/PlasticWars.mkv][Plastic Wars (2020)]]
* Volvo
:PROPERTIES:
:CUSTOM_ID: h:F61880C2-4297-427A-8221-23EE49949594
:END:
** Gas
:PROPERTIES:
:CUSTOM_ID: h:8BB4F8D5-ADAC-4C6C-A47C-D4EFFD501162
:END:

#+NAME: mileage
| date             | mileage | gallons filled | miles travelled |       mpg |
|------------------+---------+----------------+-----------------+-----------|
| <2020-09-27 Sun> |  204940 |         10.932 |                 |           |
| <2020-10-04 Sun> |  205255 |         12.657 |             315 | 24.887414 |
| <2020-10-30 Fri> |  205564 |         12.257 |             309 | 25.210084 |
| <2020-11-15 Sun> |  205861 |         12.398 |                 |           |
| <2020-11-28 Sat> |  206173 |         12.652 |                 |           |
| <2020-12-19 Sat> |  206424 |         10.367 |                 |           |

#+TBLFM: $4=(@$-2)-(@-1$-2)::$5=(((@$-3-(@-1$-3))/(@$-2)::@3$4=(@$-2)-(@-1$-2)
#+TBLFM: @3$5=((@$-3)-(@-1$-3))/(@$-2)
#+TBLFM: @4$4=(@$-2)-(@-1$-2)
#+TBLFM: @4$5=((@$-3)-(@-1$-3))/(@$-2)

* COVID-19
:PROPERTIES:
:CUSTOM_ID: h:B073B230-C191-477A-803E-7F5F13D4D193
:END:
** lay articles
:PROPERTIES:
:CUSTOM_ID: h:DD924DDD-9632-4683-BD78-85801432FDD5
:END:
*** [[https://www.sciencemag.org/news/2020/05/why-do-some-covid-19-patients-infect-many-others-whereas-most-don-t-spread-virus-all][AAAS - /Science/ magazine]] <2020-05-19 Tue> - one of the first discussions of clustering, bringing some reports together.  Discusses /k/ vs R.  Discussion of what characteristics of particular individuals might cause them to become super-spreaders.  "Most people do not transmit."  Droplets vs aerosols / airborne.  Some people shed more virus due to the stage / method  of infection, some people emit more droplets than others when talking, somewhat related to volume (Asadi et al 2019).
:PROPERTIES:
:CUSTOM_ID: h:264183AB-AA80-4D94-9A33-DAF293EFDF7A
:END:
*** [[https://www.theatlantic.com/health/archive/2020/09/k-overlooked-variable-driving-pandemic/616548/][Atlantic article]] <2020-09-30 Wed> - discusses /k/ and clustering, super-spreading events and the proper kinds of governmental response to reduce infections
:PROPERTIES:
:CUSTOM_ID: h:E5361488-4804-48A4-94BD-BA8ED7507CBB
:END:

* Recipes
:PROPERTIES:
:CUSTOM_ID: h:AB9BD6FB-2BEA-43F3-A65A-67FEAEB4A6C4
:END:
** Easy Banana Magic Cake
:PROPERTIES:
:CUSTOM_ID: h:A6CABE99-408C-4E1A-934F-3E1CEFDE1495
:END:
*** Ingredients
:PROPERTIES:
:CUSTOM_ID: h:7C551EAA-0C08-498A-B00A-18D8834C777A
:END:
**** 1/2 cup unsalted butter-melted and slightly cooled
:PROPERTIES:
:CUSTOM_ID: h:F5D5FECF-5E14-4832-8E71-754C54619065
:END:
**** 1 Tablespoon water
:PROPERTIES:
:CUSTOM_ID: h:45D36529-6F6F-4A89-8F68-F1B88060F563
:END:
**** 2 cups milk-lukewarm
:PROPERTIES:
:CUSTOM_ID: h:668A25EC-0FBB-4B23-B891-CEFD0CA9C179
:END:
**** 4 eggs-separated
:PROPERTIES:
:CUSTOM_ID: h:E5F9F568-03C2-4AFA-8175-51278628B64C
:END:
**** ¾ cup sugar
:PROPERTIES:
:CUSTOM_ID: h:D148C99C-BCE9-41DF-B860-01E2CE5D5759
:END:
**** 2 tablespoons light brown sugar
:PROPERTIES:
:CUSTOM_ID: h:4A431AE6-DCE6-43CC-80A9-ACCFE6742A63
:END:
**** ½ cup mashed banana (1 medium banana)
:PROPERTIES:
:CUSTOM_ID: h:360A858D-8A96-4FB5-8EF3-1B2358EFD555
:END:
**** 1 cup flour
:PROPERTIES:
:CUSTOM_ID: h:79EACC13-A889-4C74-ABA1-CD93377B8284
:END:
**** 1 teaspoon vanilla extract
:PROPERTIES:
:CUSTOM_ID: h:2E0E98E1-D557-409E-898D-65DFD450E706
:END:
**** powdered sugar for dusting
:PROPERTIES:
:CUSTOM_ID: h:9112E649-5EA1-4189-8C62-BF6E394C9721
:END:

*** Instructions
:PROPERTIES:
:CUSTOM_ID: h:36FCFFF8-FB6C-4898-8492-43ABDE968EC8
:END:

1) Preheat the oven to 325°F. Lightly grease 8×8 inch baking dish, set aside (you can line it with parchment paper leaving the sides overhang the pan, it will be easier to serve, you can lift the cake and transfer plate).
2) Whip the egg whites until STIFF peaks form, set aside.
3) Beat the egg yolks and sugars until pale yellow.
4) Mix in melted butter and the tablespoon of water (for about 2 minutes) until evenly combined.
5) Mix in mashed banana just to combine.
6) Mix in flour until evenly incorporated.
7) Slowly beat in the milk and vanilla extract until well combined.
8) Fold in the egg whites (1/3 at a time, then repeat until all of the egg whites are folded in). NOTES: The batter is very, very
 thin!!!
9) Pour the batter into the pan and bake for 45-60 minutes (until the cake is barely jiggly in the center). Baking time might vary depending on your oven or pan you use, but start checking after 45 minutes. If the top browns quickly before the minimum of 45 minutes, you can cover the cake with aluminum foil.
10) Cool the cake completely before dusting with powdered sugar. Even cooled, it will be slightly jiggly because it has custard layer in the center!

** pancakes
- 1.5 cups flour
- 0.5 tsp salt
- 2.5 tsp baking powder  wriggle
- 1 cup milk
- 1 egg
- 1 tsp oil
** snickerdoodles
*** ingredients:
- 1/2 cup butter, softened
- 1 cup granulated sugar
- 1/4 tsp baking soda
- 1/4 tsp cream of tartar
- 1 egg
- 1/2 tsp vanilla
- 1.5 cups AP flour
- 2 tbsp sugar
- 1 tsp ground cinnamon
*** directions
1. In a medium mixing bowl beat butter with an electric mixer on medium to high speed for 30 seconds. Add the 1 cup sugar, baking soda, and cream of tartar. Beat until combined, scraping sides of bowl occasionally. Beat in egg and vanilla. Beat in as much of the flour as you can with the mixer. Using a wooden spoon, stir in any remaining flour. Cover and chill in the refrigerator for 1 hour.
2. In a small mixing bowl combine the 2 tablespoons sugar and the cinnamon. Shape dough into 1-inch balls. Roll balls in the sugar-cinnamon mixture to coat. Place 2 inches apart on an ungreased cookie sheet.
3. Bake in a 375 degree F oven for 10 to 11 minutes or until edges are golden brown. Transfer cookies to a wire rack; cool. Makes about 36 cookies. 
** Herbed oatmeal pan bread
*** ingredients
- 1-1/2 cups boiling water
- 1 cup old-fashioned oats
- 2 packages (1/4 ounce each) active dry yeast
- 1/2 cup warm water (110° to 115°)
- 1/4 cup sugar
- 3 tablespoons butter, softened
- 2 teaspoons salt
- 1 large egg, room temperature, lightly beaten
- 4 to 4-3/4 cups all-purpose flour
- *topping*
- 1/4 cup butter, melted, divided
- 2 tablespoons grated Parmesan cheese
- 1 teaspoon dried basil
- 1/2 teaspoon dried oregano
- 1/2 teaspoon garlic powder
*** directions
1. In a small bowl, combine boiling water and oats; cool to 110°-115°. In a large bowl, dissolve yeast in warm water. Add sugar, butter, salt, egg, oat mixture and 2 cups of flour; beat until smooth. Add enough remaining flour to form a soft dough.
2. Turn onto a floured surface; knead until smooth and elastic, 6-8 minutes. Place in a greased bowl, turning once to grease top. Cover and let rise in a warm place until doubled, about 45 minutes.
3. Punch dough down and press evenly into a greased 13x9-in. baking pan. With very sharp knife, cut diagonal lines 1-1/2 in. apart completely through dough. Repeat in opposite direction, creating a diamond pattern. Cover and let rise in a warm place until doubled, about 1 hour.
4. Redefine pattern by gently poking along cut lines with a knife tip. Brush with 2 tablespoons melted butter. Bake at 375° for 15 minutes. Meanwhile, combine Parmesan cheese, basil, oregano and garlic powder. Brush bread with remaining butter; sprinkle with cheese mixture. Bake for 5 minutes. Loosely cover with foil and bake 5 minutes longer. Serve warm.
5. *Freeze option*: After placing dough in pan and cutting diamond pattern, cover tightly and freeze. To use, thaw in refrigerator overnight. Let rise, covered, in a warm place until doubled, about 11/2 hours. Bake as directed.
** Dutch baby pancake
(from [[http://www.laurachau.com/textures-and-a-recipe/][here]])
*** ingredients
- 1-2 tbsp butter
- 4 eggs
- 1/2 cup flour
- 1/2 cup milk
- cinnamon, nutmeg, a few drops of vanilla extract
*** directions
1. Turn oven on to 400F. Put the butter in a cast iron skillet or glass pie pan and place it in the heating oven while you mix the rest of the ingredients.
2. Mix the eggs, flour, milk and seasonings together – I use a large glass measuring cup, and I find that the immersion blender (stick/hand blender) does a great job of incorporating the flour quickly and adding some air. Otherwise, use a standard blender, or just a bowl and a good whisk.
3. Once the butter has melted and foamed in the pan, pull the pan out of the oven, pour the batter in, then stick it back in the oven for about 20-25 minutes, or until it has puffed up around the edges and is nice and brown.
4. Sprinkle with icing sugar and serve with whatever you want
5. A few notes: I think the batter puffs up the best with room temperature batter, but the reality is that sometimes I just don’t have time for that! Instead, I measure out out the eggs and milk the night before and put them in the fridge, and measure the flour and seasonings out into a bowl. That way in the morning I just have to turn on the oven, mix it all up and dump it in the pan.

   And don’t worry if you get to about the 15 minute mark and it looks like it’s not puffed – it comes up really quickly at the end!

* Good web design
** [[https://clig.dev/][CLI Guidelines]]
- It's perfect for what it's about, but I also like the way it flows smoothly and the integration of the main section and the section titles to the left.
* Digitizing CDs
:PROPERTIES:
:CUSTOM_ID: h:C6DA7FF5-88C0-4296-8387-06D3BEEB2CF0
:END:
** http://exactaudiocopy.de/
:PROPERTIES:
:CUSTOM_ID: h:F3A0F108-593D-4B00-B1A6-3524DE86EDCF
:END:
** [[https://www.foobar2000.org/][foobar2000]] supports ripping CDs: https://www.foobar2000.org/FAQ#converting_audio_files_to_different_file_formats
:PROPERTIES:
:CUSTOM_ID: h:5582A507-98E8-4C4D-BE29-9B688469AB3C
:END:
** Where to store / play them?
:PROPERTIES:
:CUSTOM_ID: h:8934560D-1306-4AB1-A366-04DF0BBF12A5
:END:
- [[https://asti.ga/][Astiga]] lets you keep your files in the cloud - has web and phone apps
* rooting Nexus 6P
:PROPERTIES:
:CUSTOM_ID: h:C9FE1E7A-DC8D-426A-9DE0-AA1A69FAE0A3
:END:
** [[https://forum.xda-developers.com/nexus-6p/general/guides-how-to-guides-beginners-t3206928][This]] is the excellent guide that I remember - Heiseberg's
:PROPERTIES:
:CUSTOM_ID: h:AF75FDD3-E5E3-4160-931A-6F0B069E0A2E
:END:
- download latest TWRP image on computer [[https://dl.twrp.me/angler/][here]]
- boot into bootloader on phone
  - =adb reboot bootloader=
- send file to phone:
  - =fastboot flash recovery <filename>.img=
- use volume keys to scroll, power key to select =Reboot Bootloader= option.
- boot into new revoery mode - allow TWRP to allow system modifications
- make a nandroid backup with TWRP, but first need to disable all lockscreen security (you can turn it back on after)
- in TWRP, seleck =backup= and check =system=, =data=, and =boot= boxes.  Swipe to backup
- Then backup /only/ EFS after
** This worked:
:PROPERTIES:
:CUSTOM_ID: h:E64CDEBC-6F08-48BA-BB3C-E1BF4AED75AE
:END:
*** download TWRP for the Nexus 6P
:PROPERTIES:
:CUSTOM_ID: h:37FD8B9D-1AD0-40BC-B7A1-C0364FF01DA8
:END:
- [[https://dl.twrp.me/angler/][here]]
*** download Magisk APK and zip to phone
:PROPERTIES:
:CUSTOM_ID: h:0133623B-6ED9-4B5C-9CD5-578DC2DD2CF4
:END:
**** get Magisk Manager
:PROPERTIES:
:CUSTOM_ID: h:A691ECC9-F0A3-4A0B-9842-8775022420F1
:END:
- [[https://github.com/topjohnwu/Magisk][GitHub]]
- install latest apk on phone
- get correct =fastboot image= for phone, likely found somewhere [[https://developers.google.com/android/ota][here]]
- figure out correct image from =About phone= --> =Build number=
- download it to phone
- open Magisk, hit =install= and pick the file you just downloaded.
- Magisk will work away and patch a new boot image
*** Boot phone to fastboot screen
:PROPERTIES:
:CUSTOM_ID: h:6192CC20-2C6F-4D24-BD67-2D17321DE37D
:END:
- to go into fastboot mode (bootloader mode):
1. make sure USB debugging enabled!
2. also plug in the phone while running normally so that the "allow USB debugging" prompt shows up, check "always allow form this computer" box
3. =adb devices= to make sure it shows up
4. power down
5. press and hold =power= and =volume down= buttons until fastboot screen appears
*** Then Install TWRP:
:PROPERTIES:
:CUSTOM_ID: h:7B6C5112-D276-498D-BA39-357055DF59C9
:END:
- =fastboot devices= to make sure the connection is patent
- =fastboot flash recovery <filename>.img=
- then go into recovery mode - should be TWRP
*** Find and flash Magisk zip through TWRP
:PROPERTIES:
:CUSTOM_ID: h:4156819C-4D40-4B7B-B804-699B6DA409DE
:END:
- clear cache!!
*** Reboot
:PROPERTIES:
:CUSTOM_ID: h:3331FD63-A384-4A55-86B3-7D7AF12E1601
:END:

** using [[https://github.com/corbindavenport/nexus-tools][nexus tools]] - this installs adb
:PROPERTIES:
:CUSTOM_ID: h:E5724D5B-15E2-45AC-AA3D-45982473B91A
:END:
- =bash <(curl -s https://raw.githubusercontent.com/corbindavenport/nexus-tools/master/install.sh)=
* looking for used thinkpad
- buyer's guide [[https://www.bobble.tech/free-stuff/used-thinkpad-buyers-guide][here]]
- x230 still usable, up to 16gb ram, runs linux
  - upgrade to 9-cell battery [[https://www.ebay.com/itm/44-9Cell-Genuine-45N1029-45N1028-Battery-for-IBM-Lenovo-ThinkPad-X220i-X230s/122862036031][(here]] is a candidate), xx20 keyboard mod ([[http://www.thinkwiki.org/wiki/Install_Classic_Keyboard_on_xx30_Series_ThinkPads][here]]), IPS display (described [[https://www.reddit.com/r/thinkpad/comments/bsdrta/x230_ips_upgrade/][here]])
- though some say the x220 - last one with classic keyboard
- random person on REddit saying "X61 is the best sweet spot of classic and performance"
- t440p?
- don't buy the T440 - bad keyboard
- "best keyboard ended with the T430"
- T450 more portable
* Pasting stuff for scripts:
:PROPERTIES:
:CUSTOM_ID: h:9EEB2B37-E37E-4EAC-95C0-EC84B13916D2
:END:
** Halfway through setting up Jitsi in an LXC, just gonna paste all the commands (with context) I enter, so I can think about puting stuff into a bash script later:
:PROPERTIES:
:CUSTOM_ID: h:94C8E5D6-A845-43FC-96D6-BAC4D4C3E1B1
:END:
*** code:
:PROPERTIES:
:CUSTOM_ID: h:FB590C8C-F22A-4A24-8E48-46AA33B47354
:END:
- =lxc exec debian -- /bin/bash=
- from =/etc/nginx/sites-enabled/default= take the virtual host configuration example  at the bottom of the file, whch is this:
  #+begin_src bash
# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}
  #+end_src
- change it to this (for this particular case):
#+begin_src bash
# Virtual Host configuration for meet.frankiesaurus.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name frankiesaurus.com;
#
#       root /var/www/frankiesaurus.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}
#+end_src
- paste this into new files in =/etc/nginx/sites-enabled=, keeping =server_name= the same but changing where =root= is pointing:
  - =frankiesaurus.com= - =root /var/www/frankiesaurus.com=
  - =matrix.frankiesaurus.com= - =root /var/www/matrix.frankiesaurus.com=
    - for =matrix.frankiesaurus.com= replace =location= block with =proxy_pass http://localhost:8008=
  - =element.frankiesaurus.com= - =root /var/www/element.frankiesaurus.com=
- then =apt install -y python3-certbot-nginx && certbot --nginx -d frankiesaurus.com -d riot.frankiesaurus.com -d matrix.frankiesaurus.com=
  - (need to enter email, (A)gree, (Y)es
- for now, still haven't set up with HAProxy so certs did not go through.
* unconnected (for now) notes:
:PROPERTIES:
:CUSTOM_ID: h:3D147A33-4CBB-4E76-87C4-8BF3CF935EC1
:END:
** connect to WiFi from terminal Ubuntu 18.04 / 20.04 with =wpa_supplicant=
:PROPERTIES:
:CUSTOM_ID: h:1AC0EBB8-1413-414C-BED5-454EF31D5A69
:END:
*** largely from [[https://www.linuxbabe.com/ubuntu/connect-to-wi-fi-from-terminal-on-ubuntu-18-04-19-04-with-wpa-supplicant][here]]
:PROPERTIES:
:CUSTOM_ID: h:E10B6526-BD3B-4208-8C36-D41424B492A5
:END:
*** find name of wireless interface
:PROPERTIES:
:CUSTOM_ID: h:E5971F59-0CD2-4CE6-A9AC-EF6C50129854
:END:
- =iwconfig=
*** bring up wireless interface, if necessary
:PROPERTIES:
:CUSTOM_ID: h:61CF29C5-CF35-43E8-B4F5-D28F381AFEEA
:END:
- =sudo ifconfig [interface name] up= (hereafter will be using =wlan0= as wireless interface name)
*** scan nearby networks to find your network name:
:PROPERTIES:
:CUSTOM_ID: h:3999A6C3-3AB3-4C60-A53C-3A2230E7C83F
:END:
- =sudo iwlist wlan0 scan | grep ESSID=
*** connect through =wpa_supplicant=
:PROPERTIES:
:CUSTOM_ID: h:CA81D4D6-CD30-4A31-8122-E286B7BE3491
:END:
- install if needed:
  =sudo apt install wpasupplicant=
*** put in the passphrase hash
:PROPERTIES:
:CUSTOM_ID: h:A80CA20F-191E-46C2-8F34-AA430DE23258
:END:
- =wpa_passphrase <SSID> <passphrase> | sudo tee /etc/wpa_supplicant.conf=
*** connect to network
:PROPERTIES:
:CUSTOM_ID: h:31CCE3A3-75D6-4C82-88F2-8037B079F990
:END:
- may (will probably) need to turn off =NetworkManager= first:
  - =sudo systemctl stop NetworkManager=
  - =sudo systemctl disable NetworkManager-wait-online NetworkManager-dispatcher NetworkManager= (this stops NetworkManager from autostarting at boot)
- =sudo wpa_supplicant -c /etc/wpa_supplicant.conf -i wlan0=
  - this runs in foreground, would have to check status in another tab / window: =iwconfig=
*** get ip address from network
:PROPERTIES:
:CUSTOM_ID: h:84472F0C-6833-4773-ABD4-735D6FAF3043
:END:
- =sudo dhclient wlan0=
- check with =ip addr show wlan0=
*** autoconnect at boot
:PROPERTIES:
:CUSTOM_ID: h:69D4A95E-D2F8-4A2A-980A-2346F2B234AB
:END:
- copy =wpa_supplicant.service= file to =/etc/systemd/system= directory to future-proof it against update overwrites
  - =sudo cp /lib/systemd/system/wpa_supplicant.service /etc/systemd/system/wpa_supplicant.service=
- edit it!
  - =sudo nano /etc/systemd/system/wpa_supplicant.service=
- replace this line:
  =ExecStart=/sbin/wpa_supplicant -u -s -O /run/wpa_supplicant=
  - with this line:
    =ExecStart=/sbin/wpa_supplicant -u -s -c /etc/wpa_supplicant.conf -i wlan0=
    - put =Restart=always= after this line to rescue it, maybe, later
- comment out =Alias=dbus-fi.w1.wpa_supplicant1.service=
- enable it to start at boot:
  - =sudo systemctl enable wpa_supplicant.service=
- also enable =dhclient= to start at boot
  - create a system service for =dhclient=
    - =sudo nano /etc/systemd/system/dhclient.service=
    - put this in it:
      #+begin_src bash
[Unit]
Description= DHCP Client
Before=network.target
After=wpa_supplicant.service

[Service]
Type=forking
ExecStart=/sbin/dhclient wlan0 -v
ExecStop=/sbin/dhclient wlan0 -r
Restart=always
 
[Install]
WantedBy=multi-user.target
      #+end_src
  - enable that service
    - =sudo systemctl enable dhclient.service=
** replacing =netplan= in Ubuntu 20.04 / 20.10
:PROPERTIES:
:CUSTOM_ID: h:89058F12-F0AB-4319-9197-AFE5FA1695DA
:END:
- netplan might be good and all, but too many of the leads I'm getting on setting up LXC / OpenWRT use the old style of network configuration through =/etc/network/interfaces=, so I'll be taking it off for now.
- following [[https://askubuntu.com/questions/1031709/ubuntu-18-04-switch-back-to-etc-network-interfaces][this]] =askubuntu= thread (which are instructions for 18.04 but should work)
- =sudo apt install ifupdown=
  - made this my =/etc/network/interfaces=:
    #+begin_src bash
# interfaces(5) file used by ifup(8) and ifdown(8)
# Include files from /etc/network/interfaces.d:
source-directory /etc/network/interfaces.d

# The loopback network interface
auto lo
iface lo inet loopback

allow-hotplug eth0
auto eth0
iface eth0 inet static
  address 192.168.1.135
  netmask 255.255.255.0
  broadcast 192.168.1.255
  gateway 192.168.1.1
  dns-nameservers 1.1.1.1 1.0.0.1
    #+end_src
- then, repair DNS services:
  - edit =/etc/systemd/resolved.conf=, uncomment or add =DNS=1.1.1.1= (or whatever DNS nameserver you want!)
  - change =/etc/resolv.conf= symlink:
    - =sudo ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf=
 
** find linux kernel: =uname -r=, =uname -a= more details, or =cat /proc/version=
:PROPERTIES:
:CUSTOM_ID: h:46D4BB26-7845-4B6D-B98F-C0A7FE4631F4
:END:
** grep - [[https://www.howtogeek.com/496056/how-to-use-the-grep-command-on-linux/][this]] is a good resource (from howtogeek)
:PROPERTIES:
:CUSTOM_ID: h:6C027D64-ABDE-42E1-8161-4AF39DAF58EE
:END:
** find ubuntu version: =cat /etc/os-release=, =lsb_release -a=, =hostnamectl=
:PROPERTIES:
:CUSTOM_ID: h:AF5D7691-EDF1-42B3-B60F-B90F7B957243
:END:
** completely remove nginx, including config files
:PROPERTIES:
:CUSTOM_ID: h:2D817E2B-EC51-4DAE-BA34-6635DD36C843
:END:
apt-get purge nginx nginx-common
** list packages expressly installed by user (not incl dependencies)
:PROPERTIES:
:CUSTOM_ID: h:A69E978A-E911-480B-A741-9AE49CB0F148
:END:
- aptitude search '~i!~M'
- apt list --manual-installed

** erase disk from macos terminal
:PROPERTIES:
:CUSTOM_ID: h:586670E3-7E97-4AFD-9F90-7D323A89120D
:END:
- run =diskutil list= first, obvs!
- then =diskutil eraseDisk FAT32 UBUNTU /dev/disk2= for example
  - =diskutil eraseDisk [format] [name] [disk address]=
** emacs spelling
:PROPERTIES:
:CUSTOM_ID: h:439EC035-0525-4D73-B172-78BFBAF667BC
:END:
- currently <2020-10-18 Sun> spelling is through ispell, so file with added words is at =~/.ispell_english=
** install =tldr=
1. =sudo apt update=
2. =sudo apt install nodejs npm=
3. wow that's a lot of java, but we need it if we want the stable recent version of =tldr=
4. =sudo npm install -g tldr=
** Finding a device on the network that you just put up
- seeing if anything has port 22 open: =nmap -p 22 192.168.1.1/24=

** converting .mov to .gif on mac
- =ffmpeg -t 10 -i jitsiSettingPassword.mov -vf "fps=10,scale=320:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" -loop 0 output.gif=

** converting video file + sound from mkv to mp4 and H.264
- =ffmpeg -i Monsieur.Verdoux.1947.CC.1080p.BluRay.x265.10bit.MNHD-FRDS.mkv -sws_flags lanczos -s 1280x720 -pix_fmt yuv420p -vcodec libx264 -acodec aac -preset slow -tune film -crf 18 -c:a aac Monsieur.Verdoux.1947.CC.1080p.BluRay.x265.10bit.MNHD-FRDS.mp4=
- =ffmpeg -i [inputFile] -sws_flags lanczos -s 1280x720 -pix_fmt yuv420p -vcodec libx264 -acodec aac -preset slow -tune film -crf 23 -map 0 -c copy [outputFile]=
- =ffmpeg -i Duck.Soup.1933.mkv -sws_flags lanczos -s 1280x720 -pix_fmt yuv420p -vcodec libx264 -acodec aac -preset medium -tune film -crf 23 -map_metadata 0 -map 0 -c copy Duck.Soup.1933.reworked.mp4=
- =ffmpeg -i Duck.Soup.1933.mkv -sws_flags lanczos -pix_fmt yuv420p -vcodec libx264 -acodec aac -preset medium -movflags faststart -tune film -crf 23 -map_metadata 0 -map 0 -c:s mov_text Duck.Soup.1933.reworked.mp4=
- =ffmpeg -i Eddie.Izzard.Dress.To.Kill.1998.x264.aac.mkv -sws_flags lanczos -pix_fmt yuv420p -vcodec libx264 -acodec aac -preset medium -movflags faststart -tune film -crf 23 -map_metadata 0 -map 0 -c:s mov_text Eddie.Izzard.Dress.To.Kill.1998.x264.reworked.aac.mkv.reworked.mp4=
* Movies for Frankie:
- The Incredibles [*]
- Toy Story [*]
- Lion King [*]
- Mulan [*]
- Frozen 2 [*]
- Jungle Book []
